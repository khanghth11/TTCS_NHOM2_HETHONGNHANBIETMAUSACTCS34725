
TCS34725_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077c4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000978  08007964  08007964  00017964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082dc  080082dc  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  080082dc  080082dc  000182dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082e4  080082e4  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082e4  080082e4  000182e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082e8  080082e8  000182e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080082ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000da4  20000064  08008350  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e08  08008350  00020e08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001077d  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000259b  00000000  00000000  00030854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ec8  00000000  00000000  00032df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b92  00000000  00000000  00033cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000174ca  00000000  00000000  0003484a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012b64  00000000  00000000  0004bd14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090d1e  00000000  00000000  0005e878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000044c4  00000000  00000000  000ef598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000f3a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800794c 	.word	0x0800794c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	0800794c 	.word	0x0800794c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b970 	b.w	8000d64 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9e08      	ldr	r6, [sp, #32]
 8000aa2:	460d      	mov	r5, r1
 8000aa4:	4604      	mov	r4, r0
 8000aa6:	460f      	mov	r7, r1
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d14a      	bne.n	8000b42 <__udivmoddi4+0xa6>
 8000aac:	428a      	cmp	r2, r1
 8000aae:	4694      	mov	ip, r2
 8000ab0:	d965      	bls.n	8000b7e <__udivmoddi4+0xe2>
 8000ab2:	fab2 f382 	clz	r3, r2
 8000ab6:	b143      	cbz	r3, 8000aca <__udivmoddi4+0x2e>
 8000ab8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000abc:	f1c3 0220 	rsb	r2, r3, #32
 8000ac0:	409f      	lsls	r7, r3
 8000ac2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ac6:	4317      	orrs	r7, r2
 8000ac8:	409c      	lsls	r4, r3
 8000aca:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ace:	fa1f f58c 	uxth.w	r5, ip
 8000ad2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ad6:	0c22      	lsrs	r2, r4, #16
 8000ad8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000adc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ae0:	fb01 f005 	mul.w	r0, r1, r5
 8000ae4:	4290      	cmp	r0, r2
 8000ae6:	d90a      	bls.n	8000afe <__udivmoddi4+0x62>
 8000ae8:	eb1c 0202 	adds.w	r2, ip, r2
 8000aec:	f101 37ff 	add.w	r7, r1, #4294967295
 8000af0:	f080 811c 	bcs.w	8000d2c <__udivmoddi4+0x290>
 8000af4:	4290      	cmp	r0, r2
 8000af6:	f240 8119 	bls.w	8000d2c <__udivmoddi4+0x290>
 8000afa:	3902      	subs	r1, #2
 8000afc:	4462      	add	r2, ip
 8000afe:	1a12      	subs	r2, r2, r0
 8000b00:	b2a4      	uxth	r4, r4
 8000b02:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b06:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b0a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b0e:	fb00 f505 	mul.w	r5, r0, r5
 8000b12:	42a5      	cmp	r5, r4
 8000b14:	d90a      	bls.n	8000b2c <__udivmoddi4+0x90>
 8000b16:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b1e:	f080 8107 	bcs.w	8000d30 <__udivmoddi4+0x294>
 8000b22:	42a5      	cmp	r5, r4
 8000b24:	f240 8104 	bls.w	8000d30 <__udivmoddi4+0x294>
 8000b28:	4464      	add	r4, ip
 8000b2a:	3802      	subs	r0, #2
 8000b2c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b30:	1b64      	subs	r4, r4, r5
 8000b32:	2100      	movs	r1, #0
 8000b34:	b11e      	cbz	r6, 8000b3e <__udivmoddi4+0xa2>
 8000b36:	40dc      	lsrs	r4, r3
 8000b38:	2300      	movs	r3, #0
 8000b3a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	428b      	cmp	r3, r1
 8000b44:	d908      	bls.n	8000b58 <__udivmoddi4+0xbc>
 8000b46:	2e00      	cmp	r6, #0
 8000b48:	f000 80ed 	beq.w	8000d26 <__udivmoddi4+0x28a>
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b52:	4608      	mov	r0, r1
 8000b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b58:	fab3 f183 	clz	r1, r3
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	d149      	bne.n	8000bf4 <__udivmoddi4+0x158>
 8000b60:	42ab      	cmp	r3, r5
 8000b62:	d302      	bcc.n	8000b6a <__udivmoddi4+0xce>
 8000b64:	4282      	cmp	r2, r0
 8000b66:	f200 80f8 	bhi.w	8000d5a <__udivmoddi4+0x2be>
 8000b6a:	1a84      	subs	r4, r0, r2
 8000b6c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b70:	2001      	movs	r0, #1
 8000b72:	4617      	mov	r7, r2
 8000b74:	2e00      	cmp	r6, #0
 8000b76:	d0e2      	beq.n	8000b3e <__udivmoddi4+0xa2>
 8000b78:	e9c6 4700 	strd	r4, r7, [r6]
 8000b7c:	e7df      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000b7e:	b902      	cbnz	r2, 8000b82 <__udivmoddi4+0xe6>
 8000b80:	deff      	udf	#255	; 0xff
 8000b82:	fab2 f382 	clz	r3, r2
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	f040 8090 	bne.w	8000cac <__udivmoddi4+0x210>
 8000b8c:	1a8a      	subs	r2, r1, r2
 8000b8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b92:	fa1f fe8c 	uxth.w	lr, ip
 8000b96:	2101      	movs	r1, #1
 8000b98:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b9c:	fb07 2015 	mls	r0, r7, r5, r2
 8000ba0:	0c22      	lsrs	r2, r4, #16
 8000ba2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ba6:	fb0e f005 	mul.w	r0, lr, r5
 8000baa:	4290      	cmp	r0, r2
 8000bac:	d908      	bls.n	8000bc0 <__udivmoddi4+0x124>
 8000bae:	eb1c 0202 	adds.w	r2, ip, r2
 8000bb2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0x122>
 8000bb8:	4290      	cmp	r0, r2
 8000bba:	f200 80cb 	bhi.w	8000d54 <__udivmoddi4+0x2b8>
 8000bbe:	4645      	mov	r5, r8
 8000bc0:	1a12      	subs	r2, r2, r0
 8000bc2:	b2a4      	uxth	r4, r4
 8000bc4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bc8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bcc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bd0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bd4:	45a6      	cmp	lr, r4
 8000bd6:	d908      	bls.n	8000bea <__udivmoddi4+0x14e>
 8000bd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bdc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000be0:	d202      	bcs.n	8000be8 <__udivmoddi4+0x14c>
 8000be2:	45a6      	cmp	lr, r4
 8000be4:	f200 80bb 	bhi.w	8000d5e <__udivmoddi4+0x2c2>
 8000be8:	4610      	mov	r0, r2
 8000bea:	eba4 040e 	sub.w	r4, r4, lr
 8000bee:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bf2:	e79f      	b.n	8000b34 <__udivmoddi4+0x98>
 8000bf4:	f1c1 0720 	rsb	r7, r1, #32
 8000bf8:	408b      	lsls	r3, r1
 8000bfa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bfe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c02:	fa05 f401 	lsl.w	r4, r5, r1
 8000c06:	fa20 f307 	lsr.w	r3, r0, r7
 8000c0a:	40fd      	lsrs	r5, r7
 8000c0c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c10:	4323      	orrs	r3, r4
 8000c12:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c16:	fa1f fe8c 	uxth.w	lr, ip
 8000c1a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c1e:	0c1c      	lsrs	r4, r3, #16
 8000c20:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c24:	fb08 f50e 	mul.w	r5, r8, lr
 8000c28:	42a5      	cmp	r5, r4
 8000c2a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c2e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c32:	d90b      	bls.n	8000c4c <__udivmoddi4+0x1b0>
 8000c34:	eb1c 0404 	adds.w	r4, ip, r4
 8000c38:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c3c:	f080 8088 	bcs.w	8000d50 <__udivmoddi4+0x2b4>
 8000c40:	42a5      	cmp	r5, r4
 8000c42:	f240 8085 	bls.w	8000d50 <__udivmoddi4+0x2b4>
 8000c46:	f1a8 0802 	sub.w	r8, r8, #2
 8000c4a:	4464      	add	r4, ip
 8000c4c:	1b64      	subs	r4, r4, r5
 8000c4e:	b29d      	uxth	r5, r3
 8000c50:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c54:	fb09 4413 	mls	r4, r9, r3, r4
 8000c58:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c5c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c60:	45a6      	cmp	lr, r4
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x1da>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c6c:	d26c      	bcs.n	8000d48 <__udivmoddi4+0x2ac>
 8000c6e:	45a6      	cmp	lr, r4
 8000c70:	d96a      	bls.n	8000d48 <__udivmoddi4+0x2ac>
 8000c72:	3b02      	subs	r3, #2
 8000c74:	4464      	add	r4, ip
 8000c76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c7a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c7e:	eba4 040e 	sub.w	r4, r4, lr
 8000c82:	42ac      	cmp	r4, r5
 8000c84:	46c8      	mov	r8, r9
 8000c86:	46ae      	mov	lr, r5
 8000c88:	d356      	bcc.n	8000d38 <__udivmoddi4+0x29c>
 8000c8a:	d053      	beq.n	8000d34 <__udivmoddi4+0x298>
 8000c8c:	b156      	cbz	r6, 8000ca4 <__udivmoddi4+0x208>
 8000c8e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c92:	eb64 040e 	sbc.w	r4, r4, lr
 8000c96:	fa04 f707 	lsl.w	r7, r4, r7
 8000c9a:	40ca      	lsrs	r2, r1
 8000c9c:	40cc      	lsrs	r4, r1
 8000c9e:	4317      	orrs	r7, r2
 8000ca0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cac:	f1c3 0120 	rsb	r1, r3, #32
 8000cb0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cb4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cb8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cbc:	409d      	lsls	r5, r3
 8000cbe:	432a      	orrs	r2, r5
 8000cc0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cc4:	fa1f fe8c 	uxth.w	lr, ip
 8000cc8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ccc:	fb07 1510 	mls	r5, r7, r0, r1
 8000cd0:	0c11      	lsrs	r1, r2, #16
 8000cd2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cd6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cda:	428d      	cmp	r5, r1
 8000cdc:	fa04 f403 	lsl.w	r4, r4, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x258>
 8000ce2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cea:	d22f      	bcs.n	8000d4c <__udivmoddi4+0x2b0>
 8000cec:	428d      	cmp	r5, r1
 8000cee:	d92d      	bls.n	8000d4c <__udivmoddi4+0x2b0>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	4461      	add	r1, ip
 8000cf4:	1b49      	subs	r1, r1, r5
 8000cf6:	b292      	uxth	r2, r2
 8000cf8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cfc:	fb07 1115 	mls	r1, r7, r5, r1
 8000d00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d04:	fb05 f10e 	mul.w	r1, r5, lr
 8000d08:	4291      	cmp	r1, r2
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x282>
 8000d0c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d10:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d14:	d216      	bcs.n	8000d44 <__udivmoddi4+0x2a8>
 8000d16:	4291      	cmp	r1, r2
 8000d18:	d914      	bls.n	8000d44 <__udivmoddi4+0x2a8>
 8000d1a:	3d02      	subs	r5, #2
 8000d1c:	4462      	add	r2, ip
 8000d1e:	1a52      	subs	r2, r2, r1
 8000d20:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d24:	e738      	b.n	8000b98 <__udivmoddi4+0xfc>
 8000d26:	4631      	mov	r1, r6
 8000d28:	4630      	mov	r0, r6
 8000d2a:	e708      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000d2c:	4639      	mov	r1, r7
 8000d2e:	e6e6      	b.n	8000afe <__udivmoddi4+0x62>
 8000d30:	4610      	mov	r0, r2
 8000d32:	e6fb      	b.n	8000b2c <__udivmoddi4+0x90>
 8000d34:	4548      	cmp	r0, r9
 8000d36:	d2a9      	bcs.n	8000c8c <__udivmoddi4+0x1f0>
 8000d38:	ebb9 0802 	subs.w	r8, r9, r2
 8000d3c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d40:	3b01      	subs	r3, #1
 8000d42:	e7a3      	b.n	8000c8c <__udivmoddi4+0x1f0>
 8000d44:	4645      	mov	r5, r8
 8000d46:	e7ea      	b.n	8000d1e <__udivmoddi4+0x282>
 8000d48:	462b      	mov	r3, r5
 8000d4a:	e794      	b.n	8000c76 <__udivmoddi4+0x1da>
 8000d4c:	4640      	mov	r0, r8
 8000d4e:	e7d1      	b.n	8000cf4 <__udivmoddi4+0x258>
 8000d50:	46d0      	mov	r8, sl
 8000d52:	e77b      	b.n	8000c4c <__udivmoddi4+0x1b0>
 8000d54:	3d02      	subs	r5, #2
 8000d56:	4462      	add	r2, ip
 8000d58:	e732      	b.n	8000bc0 <__udivmoddi4+0x124>
 8000d5a:	4608      	mov	r0, r1
 8000d5c:	e70a      	b.n	8000b74 <__udivmoddi4+0xd8>
 8000d5e:	4464      	add	r4, ip
 8000d60:	3802      	subs	r0, #2
 8000d62:	e742      	b.n	8000bea <__udivmoddi4+0x14e>

08000d64 <__aeabi_idiv0>:
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop

08000d68 <I2C_Write8BIT>:
extern I2C_HandleTypeDef hi2c1;


//Funkcja ustawiająca wartość rejestru 8-bitowego
void I2C_Write8BIT (uint8_t reg, uint32_t value)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af02      	add	r7, sp, #8
 8000d6e:	4603      	mov	r3, r0
 8000d70:	6039      	str	r1, [r7, #0]
 8000d72:	71fb      	strb	r3, [r7, #7]
  uint8_t pkt[2];
  pkt[0] = (TCS34725_COMMAND_BIT | reg);
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	733b      	strb	r3, [r7, #12]
  pkt[1] = (value & 0xFF);
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Master_Transmit(&hi2c1, TCS34725_ADDRESS, pkt, 2, HAL_MAX_DELAY);
 8000d84:	f107 020c 	add.w	r2, r7, #12
 8000d88:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8c:	9300      	str	r3, [sp, #0]
 8000d8e:	2302      	movs	r3, #2
 8000d90:	2152      	movs	r1, #82	; 0x52
 8000d92:	4803      	ldr	r0, [pc, #12]	; (8000da0 <I2C_Write8BIT+0x38>)
 8000d94:	f001 ff1a 	bl	8002bcc <HAL_I2C_Master_Transmit>
}
 8000d98:	bf00      	nop
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	200007c4 	.word	0x200007c4

08000da4 <I2C_Read16BIT>:
	return pkt;
}


//Funkcja odczytująca dwa rejestry 8-bitowe do jednej zmiennej 16-bitowej
uint16_t I2C_Read16BIT(uint8_t reg) {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af02      	add	r7, sp, #8
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
	uint16_t ret;
	uint8_t data[2];

	data[0] = (TCS34725_COMMAND_BIT | reg);
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c1, TCS34725_ADDRESS, data, 1, HAL_MAX_DELAY);
 8000db8:	f107 020c 	add.w	r2, r7, #12
 8000dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc0:	9300      	str	r3, [sp, #0]
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	2152      	movs	r1, #82	; 0x52
 8000dc6:	480e      	ldr	r0, [pc, #56]	; (8000e00 <I2C_Read16BIT+0x5c>)
 8000dc8:	f001 ff00 	bl	8002bcc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, TCS34725_ADDRESS, data, 2, HAL_MAX_DELAY);
 8000dcc:	f107 020c 	add.w	r2, r7, #12
 8000dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd4:	9300      	str	r3, [sp, #0]
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	2152      	movs	r1, #82	; 0x52
 8000dda:	4809      	ldr	r0, [pc, #36]	; (8000e00 <I2C_Read16BIT+0x5c>)
 8000ddc:	f001 fff4 	bl	8002dc8 <HAL_I2C_Master_Receive>

	ret = (uint16_t) data[1];
 8000de0:	7b7b      	ldrb	r3, [r7, #13]
 8000de2:	81fb      	strh	r3, [r7, #14]
	ret <<= 8;
 8000de4:	89fb      	ldrh	r3, [r7, #14]
 8000de6:	021b      	lsls	r3, r3, #8
 8000de8:	81fb      	strh	r3, [r7, #14]
	ret |= (uint16_t) data[0];
 8000dea:	7b3b      	ldrb	r3, [r7, #12]
 8000dec:	b29a      	uxth	r2, r3
 8000dee:	89fb      	ldrh	r3, [r7, #14]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	81fb      	strh	r3, [r7, #14]
	return ret;
 8000df4:	89fb      	ldrh	r3, [r7, #14]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	200007c4 	.word	0x200007c4
 8000e04:	00000000 	.word	0x00000000

08000e08 <I2C_GetColor>:


//Funkcja służąca do pobrania koloru o danym adresie
uint16_t I2C_GetColor(uint8_t reg){
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	71fb      	strb	r3, [r7, #7]
	uint16_t ret=-1;
 8000e12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e16:	81fb      	strh	r3, [r7, #14]
	uint32_t clear = I2C_Read16BIT(0x14);
 8000e18:	2014      	movs	r0, #20
 8000e1a:	f7ff ffc3 	bl	8000da4 <I2C_Read16BIT>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	60bb      	str	r3, [r7, #8]
	switch (reg){
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	3b14      	subs	r3, #20
 8000e26:	2b06      	cmp	r3, #6
 8000e28:	d837      	bhi.n	8000e9a <I2C_GetColor+0x92>
 8000e2a:	a201      	add	r2, pc, #4	; (adr r2, 8000e30 <I2C_GetColor+0x28>)
 8000e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e30:	08000e95 	.word	0x08000e95
 8000e34:	08000e9b 	.word	0x08000e9b
 8000e38:	08000e4d 	.word	0x08000e4d
 8000e3c:	08000e9b 	.word	0x08000e9b
 8000e40:	08000e4d 	.word	0x08000e4d
 8000e44:	08000e9b 	.word	0x08000e9b
 8000e48:	08000e4d 	.word	0x08000e4d
		case 0x16:
		case 0x18:
		case 0x1A:
			ret=I2C_Read16BIT(reg);
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff ffa8 	bl	8000da4 <I2C_Read16BIT>
 8000e54:	4603      	mov	r3, r0
 8000e56:	81fb      	strh	r3, [r7, #14]
			ret = (float)ret / clear * 255.0;
 8000e58:	89fb      	ldrh	r3, [r7, #14]
 8000e5a:	ee07 3a90 	vmov	s15, r3
 8000e5e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	ee07 3a90 	vmov	s15, r3
 8000e68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e6c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000e70:	ee16 0a90 	vmov	r0, s13
 8000e74:	f7ff fb70 	bl	8000558 <__aeabi_f2d>
 8000e78:	a30b      	add	r3, pc, #44	; (adr r3, 8000ea8 <I2C_GetColor+0xa0>)
 8000e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7e:	f7ff fbc3 	bl	8000608 <__aeabi_dmul>
 8000e82:	4602      	mov	r2, r0
 8000e84:	460b      	mov	r3, r1
 8000e86:	4610      	mov	r0, r2
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f7ff fdcf 	bl	8000a2c <__aeabi_d2uiz>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	81fb      	strh	r3, [r7, #14]
		break;
 8000e92:	e002      	b.n	8000e9a <I2C_GetColor+0x92>

		case 0x14:
			ret=clear;
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	81fb      	strh	r3, [r7, #14]
		break;
 8000e98:	bf00      	nop

	}
	return ret;
 8000e9a:	89fb      	ldrh	r3, [r7, #14]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	f3af 8000 	nop.w
 8000ea8:	00000000 	.word	0x00000000
 8000eac:	406fe000 	.word	0x406fe000

08000eb0 <USART_start>:
__IO int USART_TX_Busy=0;
__IO int USART_RX_Empty=0;
__IO int USART_RX_Busy=0;


void USART_start(){
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2,&USART_RxBuf[0],1);
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	4903      	ldr	r1, [pc, #12]	; (8000ec4 <USART_start+0x14>)
 8000eb8:	4803      	ldr	r0, [pc, #12]	; (8000ec8 <USART_start+0x18>)
 8000eba:	f005 fbd7 	bl	800666c <HAL_UART_Receive_IT>
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000668 	.word	0x20000668
 8000ec8:	2000086c 	.word	0x2000086c

08000ecc <CALCULATE_CRC>:
		 if(USART_RX_Busy >= MAX_FRAME_SIZE)USART_RX_Busy=0;
		 return tmp;
	}else return -1;
}

uint8_t CALCULATE_CRC(char *data, uint16_t length) {
 8000ecc:	b480      	push	{r7}
 8000ece:	b087      	sub	sp, #28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	807b      	strh	r3, [r7, #2]
    const uint8_t WIELOMIAN = 0x9B;
 8000ed8:	239b      	movs	r3, #155	; 0x9b
 8000eda:	73fb      	strb	r3, [r7, #15]
    uint8_t MY_CRC = 0xFF;
 8000edc:	23ff      	movs	r3, #255	; 0xff
 8000ede:	75fb      	strb	r3, [r7, #23]

    for (uint16_t i = 0; i < length; ++i) {
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	82bb      	strh	r3, [r7, #20]
 8000ee4:	e022      	b.n	8000f2c <CALCULATE_CRC+0x60>
    	MY_CRC ^= data[i];
 8000ee6:	8abb      	ldrh	r3, [r7, #20]
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	4413      	add	r3, r2
 8000eec:	781a      	ldrb	r2, [r3, #0]
 8000eee:	7dfb      	ldrb	r3, [r7, #23]
 8000ef0:	4053      	eors	r3, r2
 8000ef2:	75fb      	strb	r3, [r7, #23]
        for (int j = 0; j < 8; ++j){
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	613b      	str	r3, [r7, #16]
 8000ef8:	e012      	b.n	8000f20 <CALCULATE_CRC+0x54>
            if (MY_CRC & 0x80)
 8000efa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	da08      	bge.n	8000f14 <CALCULATE_CRC+0x48>
            	MY_CRC = (MY_CRC << 1) ^ WIELOMIAN;
 8000f02:	7dfb      	ldrb	r3, [r7, #23]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	b25a      	sxtb	r2, r3
 8000f08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f0c:	4053      	eors	r3, r2
 8000f0e:	b25b      	sxtb	r3, r3
 8000f10:	75fb      	strb	r3, [r7, #23]
 8000f12:	e002      	b.n	8000f1a <CALCULATE_CRC+0x4e>
            else
            	MY_CRC <<= 1;
 8000f14:	7dfb      	ldrb	r3, [r7, #23]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	75fb      	strb	r3, [r7, #23]
        for (int j = 0; j < 8; ++j){
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	2b07      	cmp	r3, #7
 8000f24:	dde9      	ble.n	8000efa <CALCULATE_CRC+0x2e>
    for (uint16_t i = 0; i < length; ++i) {
 8000f26:	8abb      	ldrh	r3, [r7, #20]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	82bb      	strh	r3, [r7, #20]
 8000f2c:	8aba      	ldrh	r2, [r7, #20]
 8000f2e:	887b      	ldrh	r3, [r7, #2]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d3d8      	bcc.n	8000ee6 <CALCULATE_CRC+0x1a>
        }
    }
    return MY_CRC;
 8000f34:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	371c      	adds	r7, #28
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
	...

08000f44 <USART_fsend>:

void USART_fsend(char* format,...){ // Funkcja odpowiedzialna za przesyłanie tekstu do komputera
 8000f44:	b40f      	push	{r0, r1, r2, r3}
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b0ea      	sub	sp, #424	; 0x1a8
 8000f4a:	af02      	add	r7, sp, #8
	char tmp_rs[128];
	char FRAME[MAX_FRAME_SIZE];
	__IO int idx;
	va_list arglist; // Deklaracja listy argumentów
	va_start(arglist,format);
 8000f4c:	f507 72d6 	add.w	r2, r7, #428	; 0x1ac
 8000f50:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000f54:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8000f58:	601a      	str	r2, [r3, #0]
	vsprintf(tmp_rs,format,arglist); //Wpisanie do bufora tmp_rs sformatowanego tekstu
 8000f5a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000f5e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8000f62:	f507 708c 	add.w	r0, r7, #280	; 0x118
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 8000f6c:	f006 f860 	bl	8007030 <vsiprintf>
	va_end(arglist); // Koniec przetwarzania zmienych argumentow
	idx=USART_TX_Empty; // Przypisanie do idx wartości wskaźnika
 8000f70:	4b51      	ldr	r3, [pc, #324]	; (80010b8 <USART_fsend+0x174>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000f78:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000f7c:	601a      	str	r2, [r3, #0]

	uint8_t CHECKSUM=CALCULATE_CRC(tmp_rs, strlen(tmp_rs));
 8000f7e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff f92c 	bl	80001e0 <strlen>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	b29a      	uxth	r2, r3
 8000f8c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000f90:	4611      	mov	r1, r2
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff ff9a 	bl	8000ecc <CALCULATE_CRC>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
	sprintf(FRAME,"%c%s%02x%c\r\n",STX,tmp_rs,CHECKSUM,ETB);
 8000f9e:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 8000fa2:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000fa6:	f107 0010 	add.w	r0, r7, #16
 8000faa:	2117      	movs	r1, #23
 8000fac:	9101      	str	r1, [sp, #4]
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	2202      	movs	r2, #2
 8000fb4:	4941      	ldr	r1, [pc, #260]	; (80010bc <USART_fsend+0x178>)
 8000fb6:	f006 f805 	bl	8006fc4 <siprintf>

	for(int i=0;i<strlen(FRAME);i++){
 8000fba:	2300      	movs	r3, #0
 8000fbc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000fc0:	e02c      	b.n	800101c <USART_fsend+0xd8>
		USART_TxBuf[idx]=FRAME[i]; //Przypisujemy do bufora znaki z tmp_rs
 8000fc2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000fc6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8000fd0:	f5a2 71c8 	sub.w	r1, r2, #400	; 0x190
 8000fd4:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000fd8:	440a      	add	r2, r1
 8000fda:	7811      	ldrb	r1, [r2, #0]
 8000fdc:	4a38      	ldr	r2, [pc, #224]	; (80010c0 <USART_fsend+0x17c>)
 8000fde:	54d1      	strb	r1, [r2, r3]
		idx++; // Zwiększamy wskaźnik
 8000fe0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000fe4:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	1c5a      	adds	r2, r3, #1
 8000fec:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000ff0:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000ff4:	601a      	str	r2, [r3, #0]
		if(idx >= USART_TXBUF_LEN)idx=0; // Jeżeli datarlśmy do końca bufora to zawijamy
 8000ff6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000ffa:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f5b3 6fbd 	cmp.w	r3, #1512	; 0x5e8
 8001004:	db05      	blt.n	8001012 <USART_fsend+0xce>
 8001006:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800100a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
	for(int i=0;i<strlen(FRAME);i++){
 8001012:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001016:	3301      	adds	r3, #1
 8001018:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800101c:	f107 0310 	add.w	r3, r7, #16
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff f8dd 	bl	80001e0 <strlen>
 8001026:	4602      	mov	r2, r0
 8001028:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800102c:	429a      	cmp	r2, r3
 800102e:	d8c8      	bhi.n	8000fc2 <USART_fsend+0x7e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001030:	b672      	cpsid	i
}
 8001032:	bf00      	nop
	}
	__disable_irq();
	if((USART_TX_Empty==USART_TX_Busy)&&(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==SET)){
 8001034:	4b20      	ldr	r3, [pc, #128]	; (80010b8 <USART_fsend+0x174>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	4b22      	ldr	r3, [pc, #136]	; (80010c4 <USART_fsend+0x180>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	429a      	cmp	r2, r3
 800103e:	d12a      	bne.n	8001096 <USART_fsend+0x152>
 8001040:	4b21      	ldr	r3, [pc, #132]	; (80010c8 <USART_fsend+0x184>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800104a:	2b80      	cmp	r3, #128	; 0x80
 800104c:	d123      	bne.n	8001096 <USART_fsend+0x152>
		USART_TX_Empty=idx; //
 800104e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001052:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a17      	ldr	r2, [pc, #92]	; (80010b8 <USART_fsend+0x174>)
 800105a:	6013      	str	r3, [r2, #0]
		uint8_t tmp=USART_TxBuf[USART_TX_Busy];
 800105c:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <USART_fsend+0x180>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a17      	ldr	r2, [pc, #92]	; (80010c0 <USART_fsend+0x17c>)
 8001062:	5cd2      	ldrb	r2, [r2, r3]
 8001064:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001068:	f2a3 1399 	subw	r3, r3, #409	; 0x199
 800106c:	701a      	strb	r2, [r3, #0]
		USART_TX_Busy++;
 800106e:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <USART_fsend+0x180>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	3301      	adds	r3, #1
 8001074:	4a13      	ldr	r2, [pc, #76]	; (80010c4 <USART_fsend+0x180>)
 8001076:	6013      	str	r3, [r2, #0]

		if(USART_TX_Busy >= USART_TXBUF_LEN)USART_TX_Busy=0;
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <USART_fsend+0x180>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f5b3 6fbd 	cmp.w	r3, #1512	; 0x5e8
 8001080:	db02      	blt.n	8001088 <USART_fsend+0x144>
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <USART_fsend+0x180>)
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 8001088:	1dfb      	adds	r3, r7, #7
 800108a:	2201      	movs	r2, #1
 800108c:	4619      	mov	r1, r3
 800108e:	480e      	ldr	r0, [pc, #56]	; (80010c8 <USART_fsend+0x184>)
 8001090:	f005 faa7 	bl	80065e2 <HAL_UART_Transmit_IT>
	if((USART_TX_Empty==USART_TX_Busy)&&(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==SET)){
 8001094:	e006      	b.n	80010a4 <USART_fsend+0x160>
	}else{
		USART_TX_Empty=idx;
 8001096:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800109a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a05      	ldr	r2, [pc, #20]	; (80010b8 <USART_fsend+0x174>)
 80010a2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80010a4:	b662      	cpsie	i
}
 80010a6:	bf00      	nop
	}
	__enable_irq();
}
 80010a8:	bf00      	nop
 80010aa:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 80010ae:	46bd      	mov	sp, r7
 80010b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010b4:	b004      	add	sp, #16
 80010b6:	4770      	bx	lr
 80010b8:	20000770 	.word	0x20000770
 80010bc:	08007964 	.word	0x08007964
 80010c0:	20000080 	.word	0x20000080
 80010c4:	20000774 	.word	0x20000774
 80010c8:	2000086c 	.word	0x2000086c

080010cc <HAL_UART_TxCpltCallback>:
		}
	}else{USART_fsend("WRONG PARAMETER!");}
}


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
   if(huart==&huart2){
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4a13      	ldr	r2, [pc, #76]	; (8001124 <HAL_UART_TxCpltCallback+0x58>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d11e      	bne.n	800111a <HAL_UART_TxCpltCallback+0x4e>
	   if(USART_TX_Empty!=USART_TX_Busy){
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <HAL_UART_TxCpltCallback+0x5c>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b12      	ldr	r3, [pc, #72]	; (800112c <HAL_UART_TxCpltCallback+0x60>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d018      	beq.n	800111a <HAL_UART_TxCpltCallback+0x4e>
		   uint8_t tmp=USART_TxBuf[USART_TX_Busy];
 80010e8:	4b10      	ldr	r3, [pc, #64]	; (800112c <HAL_UART_TxCpltCallback+0x60>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a10      	ldr	r2, [pc, #64]	; (8001130 <HAL_UART_TxCpltCallback+0x64>)
 80010ee:	5cd3      	ldrb	r3, [r2, r3]
 80010f0:	73fb      	strb	r3, [r7, #15]
		   USART_TX_Busy++;
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <HAL_UART_TxCpltCallback+0x60>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	3301      	adds	r3, #1
 80010f8:	4a0c      	ldr	r2, [pc, #48]	; (800112c <HAL_UART_TxCpltCallback+0x60>)
 80010fa:	6013      	str	r3, [r2, #0]
		   if(USART_TX_Busy >= USART_TXBUF_LEN)USART_TX_Busy=0;
 80010fc:	4b0b      	ldr	r3, [pc, #44]	; (800112c <HAL_UART_TxCpltCallback+0x60>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f5b3 6fbd 	cmp.w	r3, #1512	; 0x5e8
 8001104:	db02      	blt.n	800110c <HAL_UART_TxCpltCallback+0x40>
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <HAL_UART_TxCpltCallback+0x60>)
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
		   HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 800110c:	f107 030f 	add.w	r3, r7, #15
 8001110:	2201      	movs	r2, #1
 8001112:	4619      	mov	r1, r3
 8001114:	4803      	ldr	r0, [pc, #12]	; (8001124 <HAL_UART_TxCpltCallback+0x58>)
 8001116:	f005 fa64 	bl	80065e2 <HAL_UART_Transmit_IT>
	   }
   }
}
 800111a:	bf00      	nop
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	2000086c 	.word	0x2000086c
 8001128:	20000770 	.word	0x20000770
 800112c:	20000774 	.word	0x20000774
 8001130:	20000080 	.word	0x20000080

08001134 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
	 if(huart==&huart2){
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4a0e      	ldr	r2, [pc, #56]	; (8001178 <HAL_UART_RxCpltCallback+0x44>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d115      	bne.n	8001170 <HAL_UART_RxCpltCallback+0x3c>
		 USART_RX_Empty++;
 8001144:	4b0d      	ldr	r3, [pc, #52]	; (800117c <HAL_UART_RxCpltCallback+0x48>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	3301      	adds	r3, #1
 800114a:	4a0c      	ldr	r2, [pc, #48]	; (800117c <HAL_UART_RxCpltCallback+0x48>)
 800114c:	6013      	str	r3, [r2, #0]
		 if(USART_RX_Empty>=MAX_FRAME_SIZE)USART_RX_Empty=0;
 800114e:	4b0b      	ldr	r3, [pc, #44]	; (800117c <HAL_UART_RxCpltCallback+0x48>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001156:	dd02      	ble.n	800115e <HAL_UART_RxCpltCallback+0x2a>
 8001158:	4b08      	ldr	r3, [pc, #32]	; (800117c <HAL_UART_RxCpltCallback+0x48>)
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
		 HAL_UART_Receive_IT(&huart2,&USART_RxBuf[USART_RX_Empty],1);
 800115e:	4b07      	ldr	r3, [pc, #28]	; (800117c <HAL_UART_RxCpltCallback+0x48>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a07      	ldr	r2, [pc, #28]	; (8001180 <HAL_UART_RxCpltCallback+0x4c>)
 8001164:	4413      	add	r3, r2
 8001166:	2201      	movs	r2, #1
 8001168:	4619      	mov	r1, r3
 800116a:	4803      	ldr	r0, [pc, #12]	; (8001178 <HAL_UART_RxCpltCallback+0x44>)
 800116c:	f005 fa7e 	bl	800666c <HAL_UART_Receive_IT>

	 }
}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	2000086c 	.word	0x2000086c
 800117c:	20000778 	.word	0x20000778
 8001180:	20000668 	.word	0x20000668

08001184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	6039      	str	r1, [r7, #0]
 800118e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001194:	2b00      	cmp	r3, #0
 8001196:	db0a      	blt.n	80011ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	b2da      	uxtb	r2, r3
 800119c:	490c      	ldr	r1, [pc, #48]	; (80011d0 <__NVIC_SetPriority+0x4c>)
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	0112      	lsls	r2, r2, #4
 80011a4:	b2d2      	uxtb	r2, r2
 80011a6:	440b      	add	r3, r1
 80011a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011ac:	e00a      	b.n	80011c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	4908      	ldr	r1, [pc, #32]	; (80011d4 <__NVIC_SetPriority+0x50>)
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	f003 030f 	and.w	r3, r3, #15
 80011ba:	3b04      	subs	r3, #4
 80011bc:	0112      	lsls	r2, r2, #4
 80011be:	b2d2      	uxtb	r2, r2
 80011c0:	440b      	add	r3, r1
 80011c2:	761a      	strb	r2, [r3, #24]
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	e000e100 	.word	0xe000e100
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011e8:	d301      	bcc.n	80011ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ea:	2301      	movs	r3, #1
 80011ec:	e00f      	b.n	800120e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ee:	4a0a      	ldr	r2, [pc, #40]	; (8001218 <SysTick_Config+0x40>)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011f6:	210f      	movs	r1, #15
 80011f8:	f04f 30ff 	mov.w	r0, #4294967295
 80011fc:	f7ff ffc2 	bl	8001184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <SysTick_Config+0x40>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001206:	4b04      	ldr	r3, [pc, #16]	; (8001218 <SysTick_Config+0x40>)
 8001208:	2207      	movs	r2, #7
 800120a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	e000e010 	.word	0xe000e010

0800121c <delay1>:
  * @brief  The application entry point.
  * @retval int
  */


void delay1() {
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < 300000; i++)
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	e002      	b.n	800122e <delay1+0x12>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3301      	adds	r3, #1
 800122c:	607b      	str	r3, [r7, #4]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a04      	ldr	r2, [pc, #16]	; (8001244 <delay1+0x28>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d9f8      	bls.n	8001228 <delay1+0xc>
		;
}
 8001236:	bf00      	nop
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	000493df 	.word	0x000493df

08001248 <MX_TIM3_Init>:

static void MX_TIM3_Init(void) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b088      	sub	sp, #32
 800124c:	af00      	add	r7, sp, #0
    TIM_OC_InitTypeDef sConfigOC ={0} ;
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
 800125c:	615a      	str	r2, [r3, #20]
 800125e:	619a      	str	r2, [r3, #24]

    htim3.Instance = TIM3;
 8001260:	4b2a      	ldr	r3, [pc, #168]	; (800130c <MX_TIM3_Init+0xc4>)
 8001262:	4a2b      	ldr	r2, [pc, #172]	; (8001310 <MX_TIM3_Init+0xc8>)
 8001264:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 83; // Tần số 1 MHz (84 MHz / (Prescaler + 1))
 8001266:	4b29      	ldr	r3, [pc, #164]	; (800130c <MX_TIM3_Init+0xc4>)
 8001268:	2253      	movs	r2, #83	; 0x53
 800126a:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126c:	4b27      	ldr	r3, [pc, #156]	; (800130c <MX_TIM3_Init+0xc4>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = 155; // Độ phân giải 8-bit
 8001272:	4b26      	ldr	r3, [pc, #152]	; (800130c <MX_TIM3_Init+0xc4>)
 8001274:	229b      	movs	r2, #155	; 0x9b
 8001276:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001278:	4b24      	ldr	r3, [pc, #144]	; (800130c <MX_TIM3_Init+0xc4>)
 800127a:	2200      	movs	r2, #0
 800127c:	611a      	str	r2, [r3, #16]
    HAL_TIM_PWM_Init(&htim3);
 800127e:	4823      	ldr	r0, [pc, #140]	; (800130c <MX_TIM3_Init+0xc4>)
 8001280:	f004 fdbc 	bl	8005dfc <HAL_TIM_PWM_Init>
    if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8001284:	4821      	ldr	r0, [pc, #132]	; (800130c <MX_TIM3_Init+0xc4>)
 8001286:	f004 fdb9 	bl	8005dfc <HAL_TIM_PWM_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM3_Init+0x4c>
        Error_Handler();
 8001290:	f000 fb0e 	bl	80018b0 <Error_Handler>
    }

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001294:	2360      	movs	r3, #96	; 0x60
 8001296:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800129c:	2300      	movs	r3, #0
 800129e:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]

    // Cấu hình kênh PWM cho các chân LED RGB
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	2200      	movs	r2, #0
 80012a8:	4619      	mov	r1, r3
 80012aa:	4818      	ldr	r0, [pc, #96]	; (800130c <MX_TIM3_Init+0xc4>)
 80012ac:	f004 fea6 	bl	8005ffc <HAL_TIM_PWM_ConfigChannel>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM3_Init+0x72>
        Error_Handler();
 80012b6:	f000 fafb 	bl	80018b0 <Error_Handler>
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	2208      	movs	r2, #8
 80012be:	4619      	mov	r1, r3
 80012c0:	4812      	ldr	r0, [pc, #72]	; (800130c <MX_TIM3_Init+0xc4>)
 80012c2:	f004 fe9b 	bl	8005ffc <HAL_TIM_PWM_ConfigChannel>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_TIM3_Init+0x88>
            Error_Handler();
 80012cc:	f000 faf0 	bl	80018b0 <Error_Handler>
        }
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 80012d0:	1d3b      	adds	r3, r7, #4
 80012d2:	2204      	movs	r2, #4
 80012d4:	4619      	mov	r1, r3
 80012d6:	480d      	ldr	r0, [pc, #52]	; (800130c <MX_TIM3_Init+0xc4>)
 80012d8:	f004 fe90 	bl	8005ffc <HAL_TIM_PWM_ConfigChannel>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM3_Init+0x9e>
        Error_Handler();
 80012e2:	f000 fae5 	bl	80018b0 <Error_Handler>
    }
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80012e6:	2100      	movs	r1, #0
 80012e8:	4808      	ldr	r0, [pc, #32]	; (800130c <MX_TIM3_Init+0xc4>)
 80012ea:	f004 fdd7 	bl	8005e9c <HAL_TIM_PWM_Start>
        HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80012ee:	2108      	movs	r1, #8
 80012f0:	4806      	ldr	r0, [pc, #24]	; (800130c <MX_TIM3_Init+0xc4>)
 80012f2:	f004 fdd3 	bl	8005e9c <HAL_TIM_PWM_Start>
        HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80012f6:	2104      	movs	r1, #4
 80012f8:	4804      	ldr	r0, [pc, #16]	; (800130c <MX_TIM3_Init+0xc4>)
 80012fa:	f004 fdcf 	bl	8005e9c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_MspInit(&htim3);
 80012fe:	4803      	ldr	r0, [pc, #12]	; (800130c <MX_TIM3_Init+0xc4>)
 8001300:	f000 fe5e 	bl	8001fc0 <HAL_TIM_PWM_MspInit>
}
 8001304:	bf00      	nop
 8001306:	3720      	adds	r7, #32
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	2000077c 	.word	0x2000077c
 8001310:	40000400 	.word	0x40000400

08001314 <main>:




int main(void)
{
 8001314:	b590      	push	{r4, r7, lr}
 8001316:	b0d1      	sub	sp, #324	; 0x144
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
int cuctac=1;
 800131a:	2301      	movs	r3, #1
 800131c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001320:	f000 ff2a 	bl	8002178 <HAL_Init>

  /* USER CODE BEGIN Init */
  SysTick_Config(84000000/1000);
 8001324:	4879      	ldr	r0, [pc, #484]	; (800150c <main+0x1f8>)
 8001326:	f7ff ff57 	bl	80011d8 <SysTick_Config>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800132a:	f000 f901 	bl	8001530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM3_Init();
 800132e:	f7ff ff8b 	bl	8001248 <MX_TIM3_Init>

  //adjustLED();
  LED_GPIO_Init();
 8001332:	f000 fa6f 	bl	8001814 <LED_GPIO_Init>
MX_GPIO_Init();
 8001336:	f000 f9c3 	bl	80016c0 <MX_GPIO_Init>
//  MX_USART2_UART_Init();
  MX_I2C1_Init();
 800133a:	f000 f965 	bl	8001608 <MX_I2C1_Init>
  MX_I2C3_Init();
 800133e:	f000 f991 	bl	8001664 <MX_I2C3_Init>
  if (ssd1306_Init(&hi2c3) != 0) {
 8001342:	4873      	ldr	r0, [pc, #460]	; (8001510 <main+0x1fc>)
 8001344:	f000 fad0 	bl	80018e8 <ssd1306_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <main+0x3e>
      Error_Handler();
 800134e:	f000 faaf 	bl	80018b0 <Error_Handler>

  //########	Inicjalizacja czujnika	########

  //HAL_GPIO_WritePin(TCSLED_GPIO_Port, TCSLED_Pin, GPIO_PIN_RESET); //Wyłączenie diody led

  I2C_Write8BIT(ATIME_REG,0); //Ustawienie czasu RGBC
 8001352:	2100      	movs	r1, #0
 8001354:	2001      	movs	r0, #1
 8001356:	f7ff fd07 	bl	8000d68 <I2C_Write8BIT>
  I2C_Write8BIT(CONTROL_REG,0x03); //Ustawienie Gainu
 800135a:	2103      	movs	r1, #3
 800135c:	200f      	movs	r0, #15
 800135e:	f7ff fd03 	bl	8000d68 <I2C_Write8BIT>
  I2C_Write8BIT(ENABLE_REG,3); //Włączenie czujnika
 8001362:	2103      	movs	r1, #3
 8001364:	2000      	movs	r0, #0
 8001366:	f7ff fcff 	bl	8000d68 <I2C_Write8BIT>


  //############################################

  USART_start();
 800136a:	f7ff fda1 	bl	8000eb0 <USART_start>
  USART_fsend("Hello User!;");
 800136e:	4869      	ldr	r0, [pc, #420]	; (8001514 <main+0x200>)
 8001370:	f7ff fde8 	bl	8000f44 <USART_fsend>
  char FRAME[MAX_FRAME_SIZE]={""};
 8001374:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001378:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	3304      	adds	r3, #4
 8001382:	f240 1201 	movw	r2, #257	; 0x101
 8001386:	2100      	movs	r1, #0
 8001388:	4618      	mov	r0, r3
 800138a:	f005 fe5b 	bl	8007044 <memset>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(TCSLED_GPIO_Port, TCSLED_Pin, GPIO_PIN_RESET);
 800138e:	2200      	movs	r2, #0
 8001390:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001394:	4860      	ldr	r0, [pc, #384]	; (8001518 <main+0x204>)
 8001396:	f001 fabb 	bl	8002910 <HAL_GPIO_WritePin>
	//  HAL_GPIO_WritePin(LEDRED_RGB_PORT, LEDRED_RGB_PIN,I2C_GetColor(RED));
	  	uint8_t  	   red = I2C_GetColor(RED);
 800139a:	2016      	movs	r0, #22
 800139c:	f7ff fd34 	bl	8000e08 <I2C_GetColor>
 80013a0:	4603      	mov	r3, r0
 80013a2:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
	    uint8_t       green = I2C_GetColor(GREEN);
 80013a6:	2018      	movs	r0, #24
 80013a8:	f7ff fd2e 	bl	8000e08 <I2C_GetColor>
 80013ac:	4603      	mov	r3, r0
 80013ae:	f887 313a 	strb.w	r3, [r7, #314]	; 0x13a
	       uint8_t    blue = I2C_GetColor(BLUE);
 80013b2:	201a      	movs	r0, #26
 80013b4:	f7ff fd28 	bl	8000e08 <I2C_GetColor>
 80013b8:	4603      	mov	r3, r0
 80013ba:	f887 3139 	strb.w	r3, [r7, #313]	; 0x139
	       uint8_t    rw = red/5;
 80013be:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 80013c2:	4a56      	ldr	r2, [pc, #344]	; (800151c <main+0x208>)
 80013c4:	fba2 2303 	umull	r2, r3, r2, r3
 80013c8:	089b      	lsrs	r3, r3, #2
 80013ca:	f887 3138 	strb.w	r3, [r7, #312]	; 0x138
	       uint8_t    gw = green/5;
 80013ce:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 80013d2:	4a52      	ldr	r2, [pc, #328]	; (800151c <main+0x208>)
 80013d4:	fba2 2303 	umull	r2, r3, r2, r3
 80013d8:	089b      	lsrs	r3, r3, #2
 80013da:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
	       uint8_t    bw = blue/5;
 80013de:	f897 3139 	ldrb.w	r3, [r7, #313]	; 0x139
 80013e2:	4a4e      	ldr	r2, [pc, #312]	; (800151c <main+0x208>)
 80013e4:	fba2 2303 	umull	r2, r3, r2, r3
 80013e8:	089b      	lsrs	r3, r3, #2
 80013ea:	f887 3136 	strb.w	r3, [r7, #310]	; 0x136
	        adjustLED(rw,gw,bw);
 80013ee:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 80013f2:	f897 1137 	ldrb.w	r1, [r7, #311]	; 0x137
 80013f6:	f897 2136 	ldrb.w	r2, [r7, #310]	; 0x136
 80013fa:	4618      	mov	r0, r3
 80013fc:	f000 f9ec 	bl	80017d8 <adjustLED>
	        if ((I2C_GetColor(RED) >= 240 && I2C_GetColor(RED) <= 256) &&
 8001400:	2016      	movs	r0, #22
 8001402:	f7ff fd01 	bl	8000e08 <I2C_GetColor>
 8001406:	4603      	mov	r3, r0
 8001408:	2bef      	cmp	r3, #239	; 0xef
 800140a:	d926      	bls.n	800145a <main+0x146>
 800140c:	2016      	movs	r0, #22
 800140e:	f7ff fcfb 	bl	8000e08 <I2C_GetColor>
 8001412:	4603      	mov	r3, r0
 8001414:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001418:	d81f      	bhi.n	800145a <main+0x146>
	        	      (I2C_GetColor(GREEN) >= 230 && I2C_GetColor(GREEN) <= 256) &&
 800141a:	2018      	movs	r0, #24
 800141c:	f7ff fcf4 	bl	8000e08 <I2C_GetColor>
 8001420:	4603      	mov	r3, r0
	        if ((I2C_GetColor(RED) >= 240 && I2C_GetColor(RED) <= 256) &&
 8001422:	2be5      	cmp	r3, #229	; 0xe5
 8001424:	d919      	bls.n	800145a <main+0x146>
	        	      (I2C_GetColor(GREEN) >= 230 && I2C_GetColor(GREEN) <= 256) &&
 8001426:	2018      	movs	r0, #24
 8001428:	f7ff fcee 	bl	8000e08 <I2C_GetColor>
 800142c:	4603      	mov	r3, r0
 800142e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001432:	d812      	bhi.n	800145a <main+0x146>
	        	      (I2C_GetColor(BLUE) >= 230 && I2C_GetColor(BLUE) <= 256))
 8001434:	201a      	movs	r0, #26
 8001436:	f7ff fce7 	bl	8000e08 <I2C_GetColor>
 800143a:	4603      	mov	r3, r0
	        	      (I2C_GetColor(GREEN) >= 230 && I2C_GetColor(GREEN) <= 256) &&
 800143c:	2be5      	cmp	r3, #229	; 0xe5
 800143e:	d90c      	bls.n	800145a <main+0x146>
	        	      (I2C_GetColor(BLUE) >= 230 && I2C_GetColor(BLUE) <= 256))
 8001440:	201a      	movs	r0, #26
 8001442:	f7ff fce1 	bl	8000e08 <I2C_GetColor>
 8001446:	4603      	mov	r3, r0
 8001448:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800144c:	d805      	bhi.n	800145a <main+0x146>
	        	  {
	        	      HAL_GPIO_WritePin(BUZZER_PORT,BUZZER_PIN, GPIO_PIN_RESET);
 800144e:	2200      	movs	r2, #0
 8001450:	2101      	movs	r1, #1
 8001452:	4833      	ldr	r0, [pc, #204]	; (8001520 <main+0x20c>)
 8001454:	f001 fa5c 	bl	8002910 <HAL_GPIO_WritePin>
 8001458:	e01b      	b.n	8001492 <main+0x17e>
	        	  }
	        	  	else {
	        	   delay1();
 800145a:	f7ff fedf 	bl	800121c <delay1>
	        	   cuctac++;
 800145e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001462:	3301      	adds	r3, #1
 8001464:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	        	  if(cuctac >=2) {
 8001468:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800146c:	2b01      	cmp	r3, #1
 800146e:	dd10      	ble.n	8001492 <main+0x17e>
	        	  HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_SET);
 8001470:	2201      	movs	r2, #1
 8001472:	2101      	movs	r1, #1
 8001474:	482a      	ldr	r0, [pc, #168]	; (8001520 <main+0x20c>)
 8001476:	f001 fa4b 	bl	8002910 <HAL_GPIO_WritePin>

	        	   	delay1();
 800147a:	f7ff fecf 	bl	800121c <delay1>
	        	   	HAL_GPIO_WritePin(BUZZER_PORT,BUZZER_PIN, GPIO_PIN_RESET);
 800147e:	2200      	movs	r2, #0
 8001480:	2101      	movs	r1, #1
 8001482:	4827      	ldr	r0, [pc, #156]	; (8001520 <main+0x20c>)
 8001484:	f001 fa44 	bl	8002910 <HAL_GPIO_WritePin>
	        	  cuctac--;
 8001488:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800148c:	3b01      	subs	r3, #1
 800148e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	        	  	}



    /* USER CODE END WHILE */
	    HAL_Delay(100);
 8001492:	2064      	movs	r0, #100	; 0x64
 8001494:	f000 fee2 	bl	800225c <HAL_Delay>
	    ssd1306_Fill(Black);
 8001498:	2000      	movs	r0, #0
 800149a:	f000 fb45 	bl	8001b28 <ssd1306_Fill>
	    HAL_Delay(100);
 800149e:	2064      	movs	r0, #100	; 0x64
 80014a0:	f000 fedc 	bl	800225c <HAL_Delay>
	    sprintf(buffer, "Red=%d,Green=%d", I2C_GetColor(RED),I2C_GetColor(GREEN));
 80014a4:	2016      	movs	r0, #22
 80014a6:	f7ff fcaf 	bl	8000e08 <I2C_GetColor>
 80014aa:	4603      	mov	r3, r0
 80014ac:	461c      	mov	r4, r3
 80014ae:	2018      	movs	r0, #24
 80014b0:	f7ff fcaa 	bl	8000e08 <I2C_GetColor>
 80014b4:	4603      	mov	r3, r0
 80014b6:	f507 7090 	add.w	r0, r7, #288	; 0x120
 80014ba:	4622      	mov	r2, r4
 80014bc:	4919      	ldr	r1, [pc, #100]	; (8001524 <main+0x210>)
 80014be:	f005 fd81 	bl	8006fc4 <siprintf>
	    sprintf(dev, "Blue=%d",I2C_GetColor(BLUE));
 80014c2:	201a      	movs	r0, #26
 80014c4:	f7ff fca0 	bl	8000e08 <I2C_GetColor>
 80014c8:	4603      	mov	r3, r0
 80014ca:	461a      	mov	r2, r3
 80014cc:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80014d0:	4915      	ldr	r1, [pc, #84]	; (8001528 <main+0x214>)
 80014d2:	4618      	mov	r0, r3
 80014d4:	f005 fd76 	bl	8006fc4 <siprintf>
	    ssd1306_SetCursor(0, 0);
 80014d8:	2100      	movs	r1, #0
 80014da:	2000      	movs	r0, #0
 80014dc:	f000 fc80 	bl	8001de0 <ssd1306_SetCursor>
	    ssd1306_WriteString(buffer, Font_7x10, White);
 80014e0:	4a12      	ldr	r2, [pc, #72]	; (800152c <main+0x218>)
 80014e2:	f507 7090 	add.w	r0, r7, #288	; 0x120
 80014e6:	2301      	movs	r3, #1
 80014e8:	ca06      	ldmia	r2, {r1, r2}
 80014ea:	f000 fc53 	bl	8001d94 <ssd1306_WriteString>
	    ssd1306_SetCursor(0, 36);
 80014ee:	2124      	movs	r1, #36	; 0x24
 80014f0:	2000      	movs	r0, #0
 80014f2:	f000 fc75 	bl	8001de0 <ssd1306_SetCursor>
	    ssd1306_WriteString(dev, Font_7x10, White);
 80014f6:	4a0d      	ldr	r2, [pc, #52]	; (800152c <main+0x218>)
 80014f8:	f507 7086 	add.w	r0, r7, #268	; 0x10c
 80014fc:	2301      	movs	r3, #1
 80014fe:	ca06      	ldmia	r2, {r1, r2}
 8001500:	f000 fc48 	bl	8001d94 <ssd1306_WriteString>

	    ssd1306_UpdateScreen(&hi2c3);
 8001504:	4802      	ldr	r0, [pc, #8]	; (8001510 <main+0x1fc>)
 8001506:	f000 fb33 	bl	8001b70 <ssd1306_UpdateScreen>
  {
 800150a:	e740      	b.n	800138e <main+0x7a>
 800150c:	00014820 	.word	0x00014820
 8001510:	20000818 	.word	0x20000818
 8001514:	08007afc 	.word	0x08007afc
 8001518:	40020400 	.word	0x40020400
 800151c:	cccccccd 	.word	0xcccccccd
 8001520:	40020800 	.word	0x40020800
 8001524:	08007b0c 	.word	0x08007b0c
 8001528:	08007b1c 	.word	0x08007b1c
 800152c:	20000000 	.word	0x20000000

08001530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b094      	sub	sp, #80	; 0x50
 8001534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001536:	f107 0320 	add.w	r3, r7, #32
 800153a:	2230      	movs	r2, #48	; 0x30
 800153c:	2100      	movs	r1, #0
 800153e:	4618      	mov	r0, r3
 8001540:	f005 fd80 	bl	8007044 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001544:	f107 030c 	add.w	r3, r7, #12
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001554:	2300      	movs	r3, #0
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	4b29      	ldr	r3, [pc, #164]	; (8001600 <SystemClock_Config+0xd0>)
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	4a28      	ldr	r2, [pc, #160]	; (8001600 <SystemClock_Config+0xd0>)
 800155e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001562:	6413      	str	r3, [r2, #64]	; 0x40
 8001564:	4b26      	ldr	r3, [pc, #152]	; (8001600 <SystemClock_Config+0xd0>)
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156c:	60bb      	str	r3, [r7, #8]
 800156e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001570:	2300      	movs	r3, #0
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	4b23      	ldr	r3, [pc, #140]	; (8001604 <SystemClock_Config+0xd4>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800157c:	4a21      	ldr	r2, [pc, #132]	; (8001604 <SystemClock_Config+0xd4>)
 800157e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001582:	6013      	str	r3, [r2, #0]
 8001584:	4b1f      	ldr	r3, [pc, #124]	; (8001604 <SystemClock_Config+0xd4>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800158c:	607b      	str	r3, [r7, #4]
 800158e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001590:	2302      	movs	r3, #2
 8001592:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001594:	2301      	movs	r3, #1
 8001596:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001598:	2310      	movs	r3, #16
 800159a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800159c:	2302      	movs	r3, #2
 800159e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015a0:	2300      	movs	r3, #0
 80015a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80015a4:	2310      	movs	r3, #16
 80015a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80015a8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80015ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80015ae:	2304      	movs	r3, #4
 80015b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015b2:	2307      	movs	r3, #7
 80015b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b6:	f107 0320 	add.w	r3, r7, #32
 80015ba:	4618      	mov	r0, r3
 80015bc:	f003 ff9a 	bl	80054f4 <HAL_RCC_OscConfig>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80015c6:	f000 f973 	bl	80018b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ca:	230f      	movs	r3, #15
 80015cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ce:	2302      	movs	r3, #2
 80015d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015dc:	2300      	movs	r3, #0
 80015de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015e0:	f107 030c 	add.w	r3, r7, #12
 80015e4:	2102      	movs	r1, #2
 80015e6:	4618      	mov	r0, r3
 80015e8:	f004 f9fc 	bl	80059e4 <HAL_RCC_ClockConfig>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80015f2:	f000 f95d 	bl	80018b0 <Error_Handler>
  }
}
 80015f6:	bf00      	nop
 80015f8:	3750      	adds	r7, #80	; 0x50
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40023800 	.word	0x40023800
 8001604:	40007000 	.word	0x40007000

08001608 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800160c:	4b12      	ldr	r3, [pc, #72]	; (8001658 <MX_I2C1_Init+0x50>)
 800160e:	4a13      	ldr	r2, [pc, #76]	; (800165c <MX_I2C1_Init+0x54>)
 8001610:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001612:	4b11      	ldr	r3, [pc, #68]	; (8001658 <MX_I2C1_Init+0x50>)
 8001614:	4a12      	ldr	r2, [pc, #72]	; (8001660 <MX_I2C1_Init+0x58>)
 8001616:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001618:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <MX_I2C1_Init+0x50>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800161e:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <MX_I2C1_Init+0x50>)
 8001620:	2200      	movs	r2, #0
 8001622:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001624:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <MX_I2C1_Init+0x50>)
 8001626:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800162a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800162c:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <MX_I2C1_Init+0x50>)
 800162e:	2200      	movs	r2, #0
 8001630:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001632:	4b09      	ldr	r3, [pc, #36]	; (8001658 <MX_I2C1_Init+0x50>)
 8001634:	2200      	movs	r2, #0
 8001636:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001638:	4b07      	ldr	r3, [pc, #28]	; (8001658 <MX_I2C1_Init+0x50>)
 800163a:	2200      	movs	r2, #0
 800163c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <MX_I2C1_Init+0x50>)
 8001640:	2200      	movs	r2, #0
 8001642:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001644:	4804      	ldr	r0, [pc, #16]	; (8001658 <MX_I2C1_Init+0x50>)
 8001646:	f001 f97d 	bl	8002944 <HAL_I2C_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001650:	f000 f92e 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}
 8001658:	200007c4 	.word	0x200007c4
 800165c:	40005400 	.word	0x40005400
 8001660:	000186a0 	.word	0x000186a0

08001664 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
	  /* USER CODE END I2C3_Init 0 */

	  /* USER CODE BEGIN I2C3_Init 1 */

	  /* USER CODE END I2C3_Init 1 */
	  hi2c3.Instance = I2C3;
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <MX_I2C3_Init+0x50>)
 800166a:	4a13      	ldr	r2, [pc, #76]	; (80016b8 <MX_I2C3_Init+0x54>)
 800166c:	601a      	str	r2, [r3, #0]
	  hi2c3.Init.ClockSpeed = 100000;
 800166e:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <MX_I2C3_Init+0x50>)
 8001670:	4a12      	ldr	r2, [pc, #72]	; (80016bc <MX_I2C3_Init+0x58>)
 8001672:	605a      	str	r2, [r3, #4]
	  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001674:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <MX_I2C3_Init+0x50>)
 8001676:	2200      	movs	r2, #0
 8001678:	609a      	str	r2, [r3, #8]
	  hi2c3.Init.OwnAddress1 = 0;
 800167a:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <MX_I2C3_Init+0x50>)
 800167c:	2200      	movs	r2, #0
 800167e:	60da      	str	r2, [r3, #12]
	  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <MX_I2C3_Init+0x50>)
 8001682:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001686:	611a      	str	r2, [r3, #16]
	  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001688:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <MX_I2C3_Init+0x50>)
 800168a:	2200      	movs	r2, #0
 800168c:	615a      	str	r2, [r3, #20]
	  hi2c3.Init.OwnAddress2 = 0;
 800168e:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <MX_I2C3_Init+0x50>)
 8001690:	2200      	movs	r2, #0
 8001692:	619a      	str	r2, [r3, #24]
	  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001694:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <MX_I2C3_Init+0x50>)
 8001696:	2200      	movs	r2, #0
 8001698:	61da      	str	r2, [r3, #28]
	  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800169a:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <MX_I2C3_Init+0x50>)
 800169c:	2200      	movs	r2, #0
 800169e:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80016a0:	4804      	ldr	r0, [pc, #16]	; (80016b4 <MX_I2C3_Init+0x50>)
 80016a2:	f001 f94f 	bl	8002944 <HAL_I2C_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_I2C3_Init+0x4c>
	  {
	    Error_Handler();
 80016ac:	f000 f900 	bl	80018b0 <Error_Handler>
	  /* USER CODE BEGIN I2C1_Init 2 */

	  /* USER CODE END I2C1_Init 2 */


}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20000818 	.word	0x20000818
 80016b8:	40005c00 	.word	0x40005c00
 80016bc:	000186a0 	.word	0x000186a0

080016c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08a      	sub	sp, #40	; 0x28
 80016c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c6:	f107 0314 	add.w	r3, r7, #20
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	605a      	str	r2, [r3, #4]
 80016d0:	609a      	str	r2, [r3, #8]
 80016d2:	60da      	str	r2, [r3, #12]
 80016d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]
 80016da:	4b3c      	ldr	r3, [pc, #240]	; (80017cc <MX_GPIO_Init+0x10c>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a3b      	ldr	r2, [pc, #236]	; (80017cc <MX_GPIO_Init+0x10c>)
 80016e0:	f043 0304 	orr.w	r3, r3, #4
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b39      	ldr	r3, [pc, #228]	; (80017cc <MX_GPIO_Init+0x10c>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0304 	and.w	r3, r3, #4
 80016ee:	613b      	str	r3, [r7, #16]
 80016f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	4b35      	ldr	r3, [pc, #212]	; (80017cc <MX_GPIO_Init+0x10c>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a34      	ldr	r2, [pc, #208]	; (80017cc <MX_GPIO_Init+0x10c>)
 80016fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4b32      	ldr	r3, [pc, #200]	; (80017cc <MX_GPIO_Init+0x10c>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	4b2e      	ldr	r3, [pc, #184]	; (80017cc <MX_GPIO_Init+0x10c>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a2d      	ldr	r2, [pc, #180]	; (80017cc <MX_GPIO_Init+0x10c>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b2b      	ldr	r3, [pc, #172]	; (80017cc <MX_GPIO_Init+0x10c>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	607b      	str	r3, [r7, #4]
 800172e:	4b27      	ldr	r3, [pc, #156]	; (80017cc <MX_GPIO_Init+0x10c>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	4a26      	ldr	r2, [pc, #152]	; (80017cc <MX_GPIO_Init+0x10c>)
 8001734:	f043 0302 	orr.w	r3, r3, #2
 8001738:	6313      	str	r3, [r2, #48]	; 0x30
 800173a:	4b24      	ldr	r3, [pc, #144]	; (80017cc <MX_GPIO_Init+0x10c>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	607b      	str	r3, [r7, #4]
 8001744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	603b      	str	r3, [r7, #0]
 800174a:	4b20      	ldr	r3, [pc, #128]	; (80017cc <MX_GPIO_Init+0x10c>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	4a1f      	ldr	r2, [pc, #124]	; (80017cc <MX_GPIO_Init+0x10c>)
 8001750:	f043 0308 	orr.w	r3, r3, #8
 8001754:	6313      	str	r3, [r2, #48]	; 0x30
 8001756:	4b1d      	ldr	r3, [pc, #116]	; (80017cc <MX_GPIO_Init+0x10c>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	f003 0308 	and.w	r3, r3, #8
 800175e:	603b      	str	r3, [r7, #0]
 8001760:	683b      	ldr	r3, [r7, #0]


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TCSLED_GPIO_Port, TCSLED_Pin, GPIO_PIN_RESET);
 8001762:	2200      	movs	r2, #0
 8001764:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001768:	4819      	ldr	r0, [pc, #100]	; (80017d0 <MX_GPIO_Init+0x110>)
 800176a:	f001 f8d1 	bl	8002910 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TCSLED_Pin */
  GPIO_InitStruct.Pin = TCSLED_Pin;
 800176e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001772:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001774:	2301      	movs	r3, #1
 8001776:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177c:	2300      	movs	r3, #0
 800177e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TCSLED_GPIO_Port, &GPIO_InitStruct);
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	4619      	mov	r1, r3
 8001786:	4812      	ldr	r0, [pc, #72]	; (80017d0 <MX_GPIO_Init+0x110>)
 8001788:	f000 ff3e 	bl	8002608 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800178c:	2310      	movs	r3, #16
 800178e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001790:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001794:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179a:	f107 0314 	add.w	r3, r7, #20
 800179e:	4619      	mov	r1, r3
 80017a0:	480b      	ldr	r0, [pc, #44]	; (80017d0 <MX_GPIO_Init+0x110>)
 80017a2:	f000 ff31 	bl	8002608 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = BUZZER_PIN;
 80017a6:	2301      	movs	r3, #1
 80017a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017aa:	2301      	movs	r3, #1
 80017ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b2:	2300      	movs	r3, #0
 80017b4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BUZZER_PORT, &GPIO_InitStruct);
 80017b6:	f107 0314 	add.w	r3, r7, #20
 80017ba:	4619      	mov	r1, r3
 80017bc:	4805      	ldr	r0, [pc, #20]	; (80017d4 <MX_GPIO_Init+0x114>)
 80017be:	f000 ff23 	bl	8002608 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017c2:	bf00      	nop
 80017c4:	3728      	adds	r7, #40	; 0x28
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40020400 	.word	0x40020400
 80017d4:	40020800 	.word	0x40020800

080017d8 <adjustLED>:



void adjustLED(uint8_t red, uint8_t green, uint8_t blue) {
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	71fb      	strb	r3, [r7, #7]
 80017e2:	460b      	mov	r3, r1
 80017e4:	71bb      	strb	r3, [r7, #6]
 80017e6:	4613      	mov	r3, r2
 80017e8:	717b      	strb	r3, [r7, #5]

    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, red); // Đặt giá trị PWM cho kênh LED đỏ
 80017ea:	4b09      	ldr	r3, [pc, #36]	; (8001810 <adjustLED+0x38>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	79fa      	ldrb	r2, [r7, #7]
 80017f0:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, green); // Đặt giá trị PWM cho kênh LED xanh lục
 80017f2:	4b07      	ldr	r3, [pc, #28]	; (8001810 <adjustLED+0x38>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	79ba      	ldrb	r2, [r7, #6]
 80017f8:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, blue); // Đặt giá trị PWM cho kênh LED xanh
 80017fa:	4b05      	ldr	r3, [pc, #20]	; (8001810 <adjustLED+0x38>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	797a      	ldrb	r2, [r7, #5]
 8001800:	639a      	str	r2, [r3, #56]	; 0x38

}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	2000077c 	.word	0x2000077c

08001814 <LED_GPIO_Init>:


static void LED_GPIO_Init(void) {
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181a:	1d3b      	adds	r3, r7, #4
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001828:	2300      	movs	r3, #0
 800182a:	603b      	str	r3, [r7, #0]
 800182c:	4b1e      	ldr	r3, [pc, #120]	; (80018a8 <LED_GPIO_Init+0x94>)
 800182e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001830:	4a1d      	ldr	r2, [pc, #116]	; (80018a8 <LED_GPIO_Init+0x94>)
 8001832:	f043 0304 	orr.w	r3, r3, #4
 8001836:	6313      	str	r3, [r2, #48]	; 0x30
 8001838:	4b1b      	ldr	r3, [pc, #108]	; (80018a8 <LED_GPIO_Init+0x94>)
 800183a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	603b      	str	r3, [r7, #0]
 8001842:	683b      	ldr	r3, [r7, #0]

    // Cấu hình chân cho đèn LED xanh lục
    GPIO_InitStruct.Pin = LEDGREEN_RGB_PIN;
 8001844:	2380      	movs	r3, #128	; 0x80
 8001846:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001848:	2302      	movs	r3, #2
 800184a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001850:	2300      	movs	r3, #0
 8001852:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001854:	2302      	movs	r3, #2
 8001856:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LEDGREEN_RGB_PORT, &GPIO_InitStruct);
 8001858:	1d3b      	adds	r3, r7, #4
 800185a:	4619      	mov	r1, r3
 800185c:	4813      	ldr	r0, [pc, #76]	; (80018ac <LED_GPIO_Init+0x98>)
 800185e:	f000 fed3 	bl	8002608 <HAL_GPIO_Init>

    // Cấu hình chân cho đèn LED đỏ
    GPIO_InitStruct.Pin = LEDRED_RGB_PIN;
 8001862:	2340      	movs	r3, #64	; 0x40
 8001864:	607b      	str	r3, [r7, #4]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001866:	2302      	movs	r3, #2
 8001868:	60bb      	str	r3, [r7, #8]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186e:	2300      	movs	r3, #0
 8001870:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001872:	2302      	movs	r3, #2
 8001874:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(LEDRED_RGB_PORT, &GPIO_InitStruct);
 8001876:	1d3b      	adds	r3, r7, #4
 8001878:	4619      	mov	r1, r3
 800187a:	480c      	ldr	r0, [pc, #48]	; (80018ac <LED_GPIO_Init+0x98>)
 800187c:	f000 fec4 	bl	8002608 <HAL_GPIO_Init>


    // Cấu hình chân cho đèn LED xanh
    GPIO_InitStruct.Pin = LEDBLUE_RGB_PIN;
 8001880:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001884:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001886:	2302      	movs	r3, #2
 8001888:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001892:	2302      	movs	r3, #2
 8001894:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LEDBLUE_RGB_PORT, &GPIO_InitStruct);
 8001896:	1d3b      	adds	r3, r7, #4
 8001898:	4619      	mov	r1, r3
 800189a:	4804      	ldr	r0, [pc, #16]	; (80018ac <LED_GPIO_Init+0x98>)
 800189c:	f000 feb4 	bl	8002608 <HAL_GPIO_Init>
}
 80018a0:	bf00      	nop
 80018a2:	3718      	adds	r7, #24
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40023800 	.word	0x40023800
 80018ac:	40020800 	.word	0x40020800

080018b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80018b4:	b672      	cpsid	i
}
 80018b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018b8:	e7fe      	b.n	80018b8 <Error_Handler+0x8>

080018ba <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b086      	sub	sp, #24
 80018be:	af04      	add	r7, sp, #16
 80018c0:	6078      	str	r0, [r7, #4]
 80018c2:	460b      	mov	r3, r1
 80018c4:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 80018c6:	230a      	movs	r3, #10
 80018c8:	9302      	str	r3, [sp, #8]
 80018ca:	2301      	movs	r3, #1
 80018cc:	9301      	str	r3, [sp, #4]
 80018ce:	1cfb      	adds	r3, r7, #3
 80018d0:	9300      	str	r3, [sp, #0]
 80018d2:	2301      	movs	r3, #1
 80018d4:	2200      	movs	r2, #0
 80018d6:	2178      	movs	r1, #120	; 0x78
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f001 fc9b 	bl	8003214 <HAL_I2C_Mem_Write>
 80018de:	4603      	mov	r3, r0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 80018f0:	2064      	movs	r0, #100	; 0x64
 80018f2:	f000 fcb3 	bl	800225c <HAL_Delay>
    int status = 0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 80018fa:	21ae      	movs	r1, #174	; 0xae
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff ffdc 	bl	80018ba <ssd1306_WriteCommand>
 8001902:	4603      	mov	r3, r0
 8001904:	461a      	mov	r2, r3
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	4413      	add	r3, r2
 800190a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 800190c:	2120      	movs	r1, #32
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff ffd3 	bl	80018ba <ssd1306_WriteCommand>
 8001914:	4603      	mov	r3, r0
 8001916:	461a      	mov	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4413      	add	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800191e:	2110      	movs	r1, #16
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f7ff ffca 	bl	80018ba <ssd1306_WriteCommand>
 8001926:	4603      	mov	r3, r0
 8001928:	461a      	mov	r2, r3
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	4413      	add	r3, r2
 800192e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8001930:	21b0      	movs	r1, #176	; 0xb0
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f7ff ffc1 	bl	80018ba <ssd1306_WriteCommand>
 8001938:	4603      	mov	r3, r0
 800193a:	461a      	mov	r2, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4413      	add	r3, r2
 8001940:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 8001942:	21c8      	movs	r1, #200	; 0xc8
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff ffb8 	bl	80018ba <ssd1306_WriteCommand>
 800194a:	4603      	mov	r3, r0
 800194c:	461a      	mov	r2, r3
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	4413      	add	r3, r2
 8001952:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8001954:	2100      	movs	r1, #0
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f7ff ffaf 	bl	80018ba <ssd1306_WriteCommand>
 800195c:	4603      	mov	r3, r0
 800195e:	461a      	mov	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	4413      	add	r3, r2
 8001964:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 8001966:	2110      	movs	r1, #16
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f7ff ffa6 	bl	80018ba <ssd1306_WriteCommand>
 800196e:	4603      	mov	r3, r0
 8001970:	461a      	mov	r2, r3
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	4413      	add	r3, r2
 8001976:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8001978:	2140      	movs	r1, #64	; 0x40
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff ff9d 	bl	80018ba <ssd1306_WriteCommand>
 8001980:	4603      	mov	r3, r0
 8001982:	461a      	mov	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	4413      	add	r3, r2
 8001988:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 800198a:	2181      	movs	r1, #129	; 0x81
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f7ff ff94 	bl	80018ba <ssd1306_WriteCommand>
 8001992:	4603      	mov	r3, r0
 8001994:	461a      	mov	r2, r3
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	4413      	add	r3, r2
 800199a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 800199c:	21ff      	movs	r1, #255	; 0xff
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff ff8b 	bl	80018ba <ssd1306_WriteCommand>
 80019a4:	4603      	mov	r3, r0
 80019a6:	461a      	mov	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	4413      	add	r3, r2
 80019ac:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 80019ae:	21a1      	movs	r1, #161	; 0xa1
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff ff82 	bl	80018ba <ssd1306_WriteCommand>
 80019b6:	4603      	mov	r3, r0
 80019b8:	461a      	mov	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	4413      	add	r3, r2
 80019be:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 80019c0:	21a6      	movs	r1, #166	; 0xa6
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff ff79 	bl	80018ba <ssd1306_WriteCommand>
 80019c8:	4603      	mov	r3, r0
 80019ca:	461a      	mov	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4413      	add	r3, r2
 80019d0:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 80019d2:	21a8      	movs	r1, #168	; 0xa8
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f7ff ff70 	bl	80018ba <ssd1306_WriteCommand>
 80019da:	4603      	mov	r3, r0
 80019dc:	461a      	mov	r2, r3
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	4413      	add	r3, r2
 80019e2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 80019e4:	213f      	movs	r1, #63	; 0x3f
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff ff67 	bl	80018ba <ssd1306_WriteCommand>
 80019ec:	4603      	mov	r3, r0
 80019ee:	461a      	mov	r2, r3
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	4413      	add	r3, r2
 80019f4:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80019f6:	21a4      	movs	r1, #164	; 0xa4
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff ff5e 	bl	80018ba <ssd1306_WriteCommand>
 80019fe:	4603      	mov	r3, r0
 8001a00:	461a      	mov	r2, r3
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	4413      	add	r3, r2
 8001a06:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8001a08:	21d3      	movs	r1, #211	; 0xd3
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff ff55 	bl	80018ba <ssd1306_WriteCommand>
 8001a10:	4603      	mov	r3, r0
 8001a12:	461a      	mov	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	4413      	add	r3, r2
 8001a18:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff ff4c 	bl	80018ba <ssd1306_WriteCommand>
 8001a22:	4603      	mov	r3, r0
 8001a24:	461a      	mov	r2, r3
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	4413      	add	r3, r2
 8001a2a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8001a2c:	21d5      	movs	r1, #213	; 0xd5
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7ff ff43 	bl	80018ba <ssd1306_WriteCommand>
 8001a34:	4603      	mov	r3, r0
 8001a36:	461a      	mov	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 8001a3e:	21f0      	movs	r1, #240	; 0xf0
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7ff ff3a 	bl	80018ba <ssd1306_WriteCommand>
 8001a46:	4603      	mov	r3, r0
 8001a48:	461a      	mov	r2, r3
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8001a50:	21d9      	movs	r1, #217	; 0xd9
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7ff ff31 	bl	80018ba <ssd1306_WriteCommand>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	4413      	add	r3, r2
 8001a60:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 8001a62:	2122      	movs	r1, #34	; 0x22
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7ff ff28 	bl	80018ba <ssd1306_WriteCommand>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	4413      	add	r3, r2
 8001a72:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8001a74:	21da      	movs	r1, #218	; 0xda
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff ff1f 	bl	80018ba <ssd1306_WriteCommand>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	461a      	mov	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4413      	add	r3, r2
 8001a84:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_COM_LR_REMAP << 5 | SSD1306_COM_ALTERNATIVE_PIN_CONFIG << 4 | 0x02);   
 8001a86:	2112      	movs	r1, #18
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7ff ff16 	bl	80018ba <ssd1306_WriteCommand>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	461a      	mov	r2, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	4413      	add	r3, r2
 8001a96:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8001a98:	21db      	movs	r1, #219	; 0xdb
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7ff ff0d 	bl	80018ba <ssd1306_WriteCommand>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8001aaa:	2120      	movs	r1, #32
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f7ff ff04 	bl	80018ba <ssd1306_WriteCommand>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	4413      	add	r3, r2
 8001aba:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8001abc:	218d      	movs	r1, #141	; 0x8d
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff fefb 	bl	80018ba <ssd1306_WriteCommand>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	4413      	add	r3, r2
 8001acc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8001ace:	2114      	movs	r1, #20
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff fef2 	bl	80018ba <ssd1306_WriteCommand>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	461a      	mov	r2, r3
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	4413      	add	r3, r2
 8001ade:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8001ae0:	21af      	movs	r1, #175	; 0xaf
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7ff fee9 	bl	80018ba <ssd1306_WriteCommand>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	461a      	mov	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	4413      	add	r3, r2
 8001af0:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <ssd1306_Init+0x214>
        return 1;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e00f      	b.n	8001b1c <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8001afc:	2000      	movs	r0, #0
 8001afe:	f000 f813 	bl	8001b28 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 f834 	bl	8001b70 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001b08:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <ssd1306_Init+0x23c>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001b0e:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <ssd1306_Init+0x23c>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8001b14:	4b03      	ldr	r3, [pc, #12]	; (8001b24 <ssd1306_Init+0x23c>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	715a      	strb	r2, [r3, #5]

    return 0;
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	20000cb0 	.word	0x20000cb0

08001b28 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	e00d      	b.n	8001b54 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001b38:	79fb      	ldrb	r3, [r7, #7]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <ssd1306_Fill+0x1a>
 8001b3e:	2100      	movs	r1, #0
 8001b40:	e000      	b.n	8001b44 <ssd1306_Fill+0x1c>
 8001b42:	21ff      	movs	r1, #255	; 0xff
 8001b44:	4a09      	ldr	r2, [pc, #36]	; (8001b6c <ssd1306_Fill+0x44>)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	4413      	add	r3, r2
 8001b4a:	460a      	mov	r2, r1
 8001b4c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	3301      	adds	r3, #1
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b5a:	d3ed      	bcc.n	8001b38 <ssd1306_Fill+0x10>
    }
}
 8001b5c:	bf00      	nop
 8001b5e:	bf00      	nop
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	200008b0 	.word	0x200008b0

08001b70 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b088      	sub	sp, #32
 8001b74:	af04      	add	r7, sp, #16
 8001b76:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8001b78:	2300      	movs	r3, #0
 8001b7a:	73fb      	strb	r3, [r7, #15]
 8001b7c:	e020      	b.n	8001bc0 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8001b7e:	7bfb      	ldrb	r3, [r7, #15]
 8001b80:	3b50      	subs	r3, #80	; 0x50
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	4619      	mov	r1, r3
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7ff fe97 	bl	80018ba <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff fe93 	bl	80018ba <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8001b94:	2110      	movs	r1, #16
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff fe8f 	bl	80018ba <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8001b9c:	7bfb      	ldrb	r3, [r7, #15]
 8001b9e:	01db      	lsls	r3, r3, #7
 8001ba0:	4a0b      	ldr	r2, [pc, #44]	; (8001bd0 <ssd1306_UpdateScreen+0x60>)
 8001ba2:	4413      	add	r3, r2
 8001ba4:	2264      	movs	r2, #100	; 0x64
 8001ba6:	9202      	str	r2, [sp, #8]
 8001ba8:	2280      	movs	r2, #128	; 0x80
 8001baa:	9201      	str	r2, [sp, #4]
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	2301      	movs	r3, #1
 8001bb0:	2240      	movs	r2, #64	; 0x40
 8001bb2:	2178      	movs	r1, #120	; 0x78
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f001 fb2d 	bl	8003214 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 8001bba:	7bfb      	ldrb	r3, [r7, #15]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	73fb      	strb	r3, [r7, #15]
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
 8001bc2:	2b07      	cmp	r3, #7
 8001bc4:	d9db      	bls.n	8001b7e <ssd1306_UpdateScreen+0xe>
    }
}
 8001bc6:	bf00      	nop
 8001bc8:	bf00      	nop
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	200008b0 	.word	0x200008b0

08001bd4 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	71fb      	strb	r3, [r7, #7]
 8001bde:	460b      	mov	r3, r1
 8001be0:	71bb      	strb	r3, [r7, #6]
 8001be2:	4613      	mov	r3, r2
 8001be4:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8001be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	db48      	blt.n	8001c80 <ssd1306_DrawPixel+0xac>
 8001bee:	79bb      	ldrb	r3, [r7, #6]
 8001bf0:	2b3f      	cmp	r3, #63	; 0x3f
 8001bf2:	d845      	bhi.n	8001c80 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8001bf4:	4b25      	ldr	r3, [pc, #148]	; (8001c8c <ssd1306_DrawPixel+0xb8>)
 8001bf6:	791b      	ldrb	r3, [r3, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d006      	beq.n	8001c0a <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8001bfc:	797b      	ldrb	r3, [r7, #5]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	bf0c      	ite	eq
 8001c02:	2301      	moveq	r3, #1
 8001c04:	2300      	movne	r3, #0
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8001c0a:	797b      	ldrb	r3, [r7, #5]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d11a      	bne.n	8001c46 <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001c10:	79fa      	ldrb	r2, [r7, #7]
 8001c12:	79bb      	ldrb	r3, [r7, #6]
 8001c14:	08db      	lsrs	r3, r3, #3
 8001c16:	b2d8      	uxtb	r0, r3
 8001c18:	4603      	mov	r3, r0
 8001c1a:	01db      	lsls	r3, r3, #7
 8001c1c:	4413      	add	r3, r2
 8001c1e:	4a1c      	ldr	r2, [pc, #112]	; (8001c90 <ssd1306_DrawPixel+0xbc>)
 8001c20:	5cd3      	ldrb	r3, [r2, r3]
 8001c22:	b25a      	sxtb	r2, r3
 8001c24:	79bb      	ldrb	r3, [r7, #6]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c30:	b25b      	sxtb	r3, r3
 8001c32:	4313      	orrs	r3, r2
 8001c34:	b259      	sxtb	r1, r3
 8001c36:	79fa      	ldrb	r2, [r7, #7]
 8001c38:	4603      	mov	r3, r0
 8001c3a:	01db      	lsls	r3, r3, #7
 8001c3c:	4413      	add	r3, r2
 8001c3e:	b2c9      	uxtb	r1, r1
 8001c40:	4a13      	ldr	r2, [pc, #76]	; (8001c90 <ssd1306_DrawPixel+0xbc>)
 8001c42:	54d1      	strb	r1, [r2, r3]
 8001c44:	e01d      	b.n	8001c82 <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001c46:	79fa      	ldrb	r2, [r7, #7]
 8001c48:	79bb      	ldrb	r3, [r7, #6]
 8001c4a:	08db      	lsrs	r3, r3, #3
 8001c4c:	b2d8      	uxtb	r0, r3
 8001c4e:	4603      	mov	r3, r0
 8001c50:	01db      	lsls	r3, r3, #7
 8001c52:	4413      	add	r3, r2
 8001c54:	4a0e      	ldr	r2, [pc, #56]	; (8001c90 <ssd1306_DrawPixel+0xbc>)
 8001c56:	5cd3      	ldrb	r3, [r2, r3]
 8001c58:	b25a      	sxtb	r2, r3
 8001c5a:	79bb      	ldrb	r3, [r7, #6]
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	2101      	movs	r1, #1
 8001c62:	fa01 f303 	lsl.w	r3, r1, r3
 8001c66:	b25b      	sxtb	r3, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	b25b      	sxtb	r3, r3
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	b259      	sxtb	r1, r3
 8001c70:	79fa      	ldrb	r2, [r7, #7]
 8001c72:	4603      	mov	r3, r0
 8001c74:	01db      	lsls	r3, r3, #7
 8001c76:	4413      	add	r3, r2
 8001c78:	b2c9      	uxtb	r1, r1
 8001c7a:	4a05      	ldr	r2, [pc, #20]	; (8001c90 <ssd1306_DrawPixel+0xbc>)
 8001c7c:	54d1      	strb	r1, [r2, r3]
 8001c7e:	e000      	b.n	8001c82 <ssd1306_DrawPixel+0xae>
        return;
 8001c80:	bf00      	nop
    }
}
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	20000cb0 	.word	0x20000cb0
 8001c90:	200008b0 	.word	0x200008b0

08001c94 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8001c94:	b590      	push	{r4, r7, lr}
 8001c96:	b089      	sub	sp, #36	; 0x24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4604      	mov	r4, r0
 8001c9c:	1d38      	adds	r0, r7, #4
 8001c9e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	4623      	mov	r3, r4
 8001ca6:	73fb      	strb	r3, [r7, #15]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001cac:	4b38      	ldr	r3, [pc, #224]	; (8001d90 <ssd1306_WriteChar+0xfc>)
 8001cae:	881b      	ldrh	r3, [r3, #0]
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	793b      	ldrb	r3, [r7, #4]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	2b7f      	cmp	r3, #127	; 0x7f
 8001cb8:	dc06      	bgt.n	8001cc8 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8001cba:	4b35      	ldr	r3, [pc, #212]	; (8001d90 <ssd1306_WriteChar+0xfc>)
 8001cbc:	885b      	ldrh	r3, [r3, #2]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	797b      	ldrb	r3, [r7, #5]
 8001cc2:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001cc4:	2b3f      	cmp	r3, #63	; 0x3f
 8001cc6:	dd01      	ble.n	8001ccc <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	e05d      	b.n	8001d88 <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61fb      	str	r3, [r7, #28]
 8001cd0:	e04c      	b.n	8001d6c <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001cd2:	68ba      	ldr	r2, [r7, #8]
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
 8001cd6:	3b20      	subs	r3, #32
 8001cd8:	7979      	ldrb	r1, [r7, #5]
 8001cda:	fb01 f303 	mul.w	r3, r1, r3
 8001cde:	4619      	mov	r1, r3
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	440b      	add	r3, r1
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	4413      	add	r3, r2
 8001ce8:	881b      	ldrh	r3, [r3, #0]
 8001cea:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8001cec:	2300      	movs	r3, #0
 8001cee:	61bb      	str	r3, [r7, #24]
 8001cf0:	e034      	b.n	8001d5c <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 8001cf2:	697a      	ldr	r2, [r7, #20]
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d012      	beq.n	8001d28 <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001d02:	4b23      	ldr	r3, [pc, #140]	; (8001d90 <ssd1306_WriteChar+0xfc>)
 8001d04:	881b      	ldrh	r3, [r3, #0]
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	4413      	add	r3, r2
 8001d0e:	b2d8      	uxtb	r0, r3
 8001d10:	4b1f      	ldr	r3, [pc, #124]	; (8001d90 <ssd1306_WriteChar+0xfc>)
 8001d12:	885b      	ldrh	r3, [r3, #2]
 8001d14:	b2da      	uxtb	r2, r3
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	4413      	add	r3, r2
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	7bba      	ldrb	r2, [r7, #14]
 8001d20:	4619      	mov	r1, r3
 8001d22:	f7ff ff57 	bl	8001bd4 <ssd1306_DrawPixel>
 8001d26:	e016      	b.n	8001d56 <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001d28:	4b19      	ldr	r3, [pc, #100]	; (8001d90 <ssd1306_WriteChar+0xfc>)
 8001d2a:	881b      	ldrh	r3, [r3, #0]
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	4413      	add	r3, r2
 8001d34:	b2d8      	uxtb	r0, r3
 8001d36:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <ssd1306_WriteChar+0xfc>)
 8001d38:	885b      	ldrh	r3, [r3, #2]
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	4413      	add	r3, r2
 8001d42:	b2d9      	uxtb	r1, r3
 8001d44:	7bbb      	ldrb	r3, [r7, #14]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	bf0c      	ite	eq
 8001d4a:	2301      	moveq	r3, #1
 8001d4c:	2300      	movne	r3, #0
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	461a      	mov	r2, r3
 8001d52:	f7ff ff3f 	bl	8001bd4 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	61bb      	str	r3, [r7, #24]
 8001d5c:	793b      	ldrb	r3, [r7, #4]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d3c5      	bcc.n	8001cf2 <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	61fb      	str	r3, [r7, #28]
 8001d6c:	797b      	ldrb	r3, [r7, #5]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d3ad      	bcc.n	8001cd2 <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001d76:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <ssd1306_WriteChar+0xfc>)
 8001d78:	881a      	ldrh	r2, [r3, #0]
 8001d7a:	793b      	ldrb	r3, [r7, #4]
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	4413      	add	r3, r2
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	4b03      	ldr	r3, [pc, #12]	; (8001d90 <ssd1306_WriteChar+0xfc>)
 8001d84:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8001d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3724      	adds	r7, #36	; 0x24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd90      	pop	{r4, r7, pc}
 8001d90:	20000cb0 	.word	0x20000cb0

08001d94 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	1d38      	adds	r0, r7, #4
 8001d9e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001da2:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8001da4:	e012      	b.n	8001dcc <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	7818      	ldrb	r0, [r3, #0]
 8001daa:	78fb      	ldrb	r3, [r7, #3]
 8001dac:	1d3a      	adds	r2, r7, #4
 8001dae:	ca06      	ldmia	r2, {r1, r2}
 8001db0:	f7ff ff70 	bl	8001c94 <ssd1306_WriteChar>
 8001db4:	4603      	mov	r3, r0
 8001db6:	461a      	mov	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d002      	beq.n	8001dc6 <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	e008      	b.n	8001dd8 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	60fb      	str	r3, [r7, #12]
    while (*str)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1e8      	bne.n	8001da6 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	781b      	ldrb	r3, [r3, #0]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	460a      	mov	r2, r1
 8001dea:	71fb      	strb	r3, [r7, #7]
 8001dec:	4613      	mov	r3, r2
 8001dee:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001df0:	79fb      	ldrb	r3, [r7, #7]
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <ssd1306_SetCursor+0x2c>)
 8001df6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001df8:	79bb      	ldrb	r3, [r7, #6]
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	4b03      	ldr	r3, [pc, #12]	; (8001e0c <ssd1306_SetCursor+0x2c>)
 8001dfe:	805a      	strh	r2, [r3, #2]
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	20000cb0 	.word	0x20000cb0

08001e10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	607b      	str	r3, [r7, #4]
 8001e1a:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <HAL_MspInit+0x4c>)
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1e:	4a0f      	ldr	r2, [pc, #60]	; (8001e5c <HAL_MspInit+0x4c>)
 8001e20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e24:	6453      	str	r3, [r2, #68]	; 0x44
 8001e26:	4b0d      	ldr	r3, [pc, #52]	; (8001e5c <HAL_MspInit+0x4c>)
 8001e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e2e:	607b      	str	r3, [r7, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	603b      	str	r3, [r7, #0]
 8001e36:	4b09      	ldr	r3, [pc, #36]	; (8001e5c <HAL_MspInit+0x4c>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	4a08      	ldr	r2, [pc, #32]	; (8001e5c <HAL_MspInit+0x4c>)
 8001e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e40:	6413      	str	r3, [r2, #64]	; 0x40
 8001e42:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <HAL_MspInit+0x4c>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4a:	603b      	str	r3, [r7, #0]
 8001e4c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e4e:	2007      	movs	r0, #7
 8001e50:	f000 faf8 	bl	8002444 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e54:	bf00      	nop
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40023800 	.word	0x40023800

08001e60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b08c      	sub	sp, #48	; 0x30
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e68:	f107 031c 	add.w	r3, r7, #28
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	609a      	str	r2, [r3, #8]
 8001e74:	60da      	str	r2, [r3, #12]
 8001e76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a4a      	ldr	r2, [pc, #296]	; (8001fa8 <HAL_I2C_MspInit+0x148>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d13c      	bne.n	8001efc <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	61bb      	str	r3, [r7, #24]
 8001e86:	4b49      	ldr	r3, [pc, #292]	; (8001fac <HAL_I2C_MspInit+0x14c>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	4a48      	ldr	r2, [pc, #288]	; (8001fac <HAL_I2C_MspInit+0x14c>)
 8001e8c:	f043 0302 	orr.w	r3, r3, #2
 8001e90:	6313      	str	r3, [r2, #48]	; 0x30
 8001e92:	4b46      	ldr	r3, [pc, #280]	; (8001fac <HAL_I2C_MspInit+0x14c>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	61bb      	str	r3, [r7, #24]
 8001e9c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e9e:	23c0      	movs	r3, #192	; 0xc0
 8001ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ea2:	2312      	movs	r3, #18
 8001ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001eae:	2304      	movs	r3, #4
 8001eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb2:	f107 031c 	add.w	r3, r7, #28
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	483d      	ldr	r0, [pc, #244]	; (8001fb0 <HAL_I2C_MspInit+0x150>)
 8001eba:	f000 fba5 	bl	8002608 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	617b      	str	r3, [r7, #20]
 8001ec2:	4b3a      	ldr	r3, [pc, #232]	; (8001fac <HAL_I2C_MspInit+0x14c>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	4a39      	ldr	r2, [pc, #228]	; (8001fac <HAL_I2C_MspInit+0x14c>)
 8001ec8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ece:	4b37      	ldr	r3, [pc, #220]	; (8001fac <HAL_I2C_MspInit+0x14c>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ed6:	617b      	str	r3, [r7, #20]
 8001ed8:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001eda:	2200      	movs	r2, #0
 8001edc:	2100      	movs	r1, #0
 8001ede:	201f      	movs	r0, #31
 8001ee0:	f000 fabb 	bl	800245a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001ee4:	201f      	movs	r0, #31
 8001ee6:	f000 fad4 	bl	8002492 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001eea:	2200      	movs	r2, #0
 8001eec:	2100      	movs	r1, #0
 8001eee:	2020      	movs	r0, #32
 8001ef0:	f000 fab3 	bl	800245a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001ef4:	2020      	movs	r0, #32
 8001ef6:	f000 facc 	bl	8002492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001efa:	e050      	b.n	8001f9e <HAL_I2C_MspInit+0x13e>
  else if(hi2c->Instance==I2C3)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a2c      	ldr	r2, [pc, #176]	; (8001fb4 <HAL_I2C_MspInit+0x154>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d14b      	bne.n	8001f9e <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	613b      	str	r3, [r7, #16]
 8001f0a:	4b28      	ldr	r3, [pc, #160]	; (8001fac <HAL_I2C_MspInit+0x14c>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	4a27      	ldr	r2, [pc, #156]	; (8001fac <HAL_I2C_MspInit+0x14c>)
 8001f10:	f043 0304 	orr.w	r3, r3, #4
 8001f14:	6313      	str	r3, [r2, #48]	; 0x30
 8001f16:	4b25      	ldr	r3, [pc, #148]	; (8001fac <HAL_I2C_MspInit+0x14c>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	f003 0304 	and.w	r3, r3, #4
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	4b21      	ldr	r3, [pc, #132]	; (8001fac <HAL_I2C_MspInit+0x14c>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	4a20      	ldr	r2, [pc, #128]	; (8001fac <HAL_I2C_MspInit+0x14c>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	6313      	str	r3, [r2, #48]	; 0x30
 8001f32:	4b1e      	ldr	r3, [pc, #120]	; (8001fac <HAL_I2C_MspInit+0x14c>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f44:	2312      	movs	r3, #18
 8001f46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f50:	2304      	movs	r3, #4
 8001f52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f54:	f107 031c 	add.w	r3, r7, #28
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4817      	ldr	r0, [pc, #92]	; (8001fb8 <HAL_I2C_MspInit+0x158>)
 8001f5c:	f000 fb54 	bl	8002608 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f66:	2312      	movs	r3, #18
 8001f68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f72:	2304      	movs	r3, #4
 8001f74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f76:	f107 031c 	add.w	r3, r7, #28
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	480f      	ldr	r0, [pc, #60]	; (8001fbc <HAL_I2C_MspInit+0x15c>)
 8001f7e:	f000 fb43 	bl	8002608 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	60bb      	str	r3, [r7, #8]
 8001f86:	4b09      	ldr	r3, [pc, #36]	; (8001fac <HAL_I2C_MspInit+0x14c>)
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	4a08      	ldr	r2, [pc, #32]	; (8001fac <HAL_I2C_MspInit+0x14c>)
 8001f8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f90:	6413      	str	r3, [r2, #64]	; 0x40
 8001f92:	4b06      	ldr	r3, [pc, #24]	; (8001fac <HAL_I2C_MspInit+0x14c>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f9a:	60bb      	str	r3, [r7, #8]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
}
 8001f9e:	bf00      	nop
 8001fa0:	3730      	adds	r7, #48	; 0x30
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40005400 	.word	0x40005400
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40020400 	.word	0x40020400
 8001fb4:	40005c00 	.word	0x40005c00
 8001fb8:	40020800 	.word	0x40020800
 8001fbc:	40020000 	.word	0x40020000

08001fc0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a0b      	ldr	r2, [pc, #44]	; (8001ffc <HAL_TIM_PWM_MspInit+0x3c>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d10d      	bne.n	8001fee <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	4b0a      	ldr	r3, [pc, #40]	; (8002000 <HAL_TIM_PWM_MspInit+0x40>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	4a09      	ldr	r2, [pc, #36]	; (8002000 <HAL_TIM_PWM_MspInit+0x40>)
 8001fdc:	f043 0302 	orr.w	r3, r3, #2
 8001fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fe2:	4b07      	ldr	r3, [pc, #28]	; (8002000 <HAL_TIM_PWM_MspInit+0x40>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001fee:	bf00      	nop
 8001ff0:	3714      	adds	r7, #20
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	40000400 	.word	0x40000400
 8002000:	40023800 	.word	0x40023800

08002004 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002008:	e7fe      	b.n	8002008 <NMI_Handler+0x4>

0800200a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800200a:	b480      	push	{r7}
 800200c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800200e:	e7fe      	b.n	800200e <HardFault_Handler+0x4>

08002010 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002014:	e7fe      	b.n	8002014 <MemManage_Handler+0x4>

08002016 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002016:	b480      	push	{r7}
 8002018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800201a:	e7fe      	b.n	800201a <BusFault_Handler+0x4>

0800201c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002020:	e7fe      	b.n	8002020 <UsageFault_Handler+0x4>

08002022 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002022:	b480      	push	{r7}
 8002024:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002034:	bf00      	nop
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002050:	f000 f8e4 	bl	800221c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002054:	bf00      	nop
 8002056:	bd80      	pop	{r7, pc}

08002058 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800205c:	4802      	ldr	r0, [pc, #8]	; (8002068 <I2C1_EV_IRQHandler+0x10>)
 800205e:	f001 f9d3 	bl	8003408 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	200007c4 	.word	0x200007c4

0800206c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002070:	4802      	ldr	r0, [pc, #8]	; (800207c <I2C1_ER_IRQHandler+0x10>)
 8002072:	f001 fb1c 	bl	80036ae <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	200007c4 	.word	0x200007c4

08002080 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002084:	4802      	ldr	r0, [pc, #8]	; (8002090 <USART2_IRQHandler+0x10>)
 8002086:	f004 fb21 	bl	80066cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	2000086c 	.word	0x2000086c

08002094 <_sbrk>:
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	4a14      	ldr	r2, [pc, #80]	; (80020f0 <_sbrk+0x5c>)
 800209e:	4b15      	ldr	r3, [pc, #84]	; (80020f4 <_sbrk+0x60>)
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	617b      	str	r3, [r7, #20]
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	613b      	str	r3, [r7, #16]
 80020a8:	4b13      	ldr	r3, [pc, #76]	; (80020f8 <_sbrk+0x64>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d102      	bne.n	80020b6 <_sbrk+0x22>
 80020b0:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <_sbrk+0x64>)
 80020b2:	4a12      	ldr	r2, [pc, #72]	; (80020fc <_sbrk+0x68>)
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	4b10      	ldr	r3, [pc, #64]	; (80020f8 <_sbrk+0x64>)
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4413      	add	r3, r2
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d207      	bcs.n	80020d4 <_sbrk+0x40>
 80020c4:	f004 ffc6 	bl	8007054 <__errno>
 80020c8:	4603      	mov	r3, r0
 80020ca:	220c      	movs	r2, #12
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	f04f 33ff 	mov.w	r3, #4294967295
 80020d2:	e009      	b.n	80020e8 <_sbrk+0x54>
 80020d4:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <_sbrk+0x64>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	4b07      	ldr	r3, [pc, #28]	; (80020f8 <_sbrk+0x64>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4413      	add	r3, r2
 80020e2:	4a05      	ldr	r2, [pc, #20]	; (80020f8 <_sbrk+0x64>)
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	4618      	mov	r0, r3
 80020ea:	3718      	adds	r7, #24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	20018000 	.word	0x20018000
 80020f4:	00000400 	.word	0x00000400
 80020f8:	20000cb8 	.word	0x20000cb8
 80020fc:	20000e08 	.word	0x20000e08

08002100 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002104:	4b06      	ldr	r3, [pc, #24]	; (8002120 <SystemInit+0x20>)
 8002106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800210a:	4a05      	ldr	r2, [pc, #20]	; (8002120 <SystemInit+0x20>)
 800210c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002110:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	e000ed00 	.word	0xe000ed00

08002124 <Reset_Handler>:
 8002124:	f8df d034 	ldr.w	sp, [pc, #52]	; 800215c <LoopFillZerobss+0x12>
 8002128:	480d      	ldr	r0, [pc, #52]	; (8002160 <LoopFillZerobss+0x16>)
 800212a:	490e      	ldr	r1, [pc, #56]	; (8002164 <LoopFillZerobss+0x1a>)
 800212c:	4a0e      	ldr	r2, [pc, #56]	; (8002168 <LoopFillZerobss+0x1e>)
 800212e:	2300      	movs	r3, #0
 8002130:	e002      	b.n	8002138 <LoopCopyDataInit>

08002132 <CopyDataInit>:
 8002132:	58d4      	ldr	r4, [r2, r3]
 8002134:	50c4      	str	r4, [r0, r3]
 8002136:	3304      	adds	r3, #4

08002138 <LoopCopyDataInit>:
 8002138:	18c4      	adds	r4, r0, r3
 800213a:	428c      	cmp	r4, r1
 800213c:	d3f9      	bcc.n	8002132 <CopyDataInit>
 800213e:	4a0b      	ldr	r2, [pc, #44]	; (800216c <LoopFillZerobss+0x22>)
 8002140:	4c0b      	ldr	r4, [pc, #44]	; (8002170 <LoopFillZerobss+0x26>)
 8002142:	2300      	movs	r3, #0
 8002144:	e001      	b.n	800214a <LoopFillZerobss>

08002146 <FillZerobss>:
 8002146:	6013      	str	r3, [r2, #0]
 8002148:	3204      	adds	r2, #4

0800214a <LoopFillZerobss>:
 800214a:	42a2      	cmp	r2, r4
 800214c:	d3fb      	bcc.n	8002146 <FillZerobss>
 800214e:	f7ff ffd7 	bl	8002100 <SystemInit>
 8002152:	f004 ff85 	bl	8007060 <__libc_init_array>
 8002156:	f7ff f8dd 	bl	8001314 <main>
 800215a:	4770      	bx	lr
 800215c:	20018000 	.word	0x20018000
 8002160:	20000000 	.word	0x20000000
 8002164:	20000064 	.word	0x20000064
 8002168:	080082ec 	.word	0x080082ec
 800216c:	20000064 	.word	0x20000064
 8002170:	20000e08 	.word	0x20000e08

08002174 <ADC_IRQHandler>:
 8002174:	e7fe      	b.n	8002174 <ADC_IRQHandler>
	...

08002178 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800217c:	4b0e      	ldr	r3, [pc, #56]	; (80021b8 <HAL_Init+0x40>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a0d      	ldr	r2, [pc, #52]	; (80021b8 <HAL_Init+0x40>)
 8002182:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002186:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002188:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <HAL_Init+0x40>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a0a      	ldr	r2, [pc, #40]	; (80021b8 <HAL_Init+0x40>)
 800218e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002192:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002194:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <HAL_Init+0x40>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a07      	ldr	r2, [pc, #28]	; (80021b8 <HAL_Init+0x40>)
 800219a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800219e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021a0:	2003      	movs	r0, #3
 80021a2:	f000 f94f 	bl	8002444 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021a6:	2000      	movs	r0, #0
 80021a8:	f000 f808 	bl	80021bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021ac:	f7ff fe30 	bl	8001e10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40023c00 	.word	0x40023c00

080021bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021c4:	4b12      	ldr	r3, [pc, #72]	; (8002210 <HAL_InitTick+0x54>)
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	4b12      	ldr	r3, [pc, #72]	; (8002214 <HAL_InitTick+0x58>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	4619      	mov	r1, r3
 80021ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80021d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021da:	4618      	mov	r0, r3
 80021dc:	f000 f967 	bl	80024ae <HAL_SYSTICK_Config>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e00e      	b.n	8002208 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b0f      	cmp	r3, #15
 80021ee:	d80a      	bhi.n	8002206 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021f0:	2200      	movs	r2, #0
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	f04f 30ff 	mov.w	r0, #4294967295
 80021f8:	f000 f92f 	bl	800245a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021fc:	4a06      	ldr	r2, [pc, #24]	; (8002218 <HAL_InitTick+0x5c>)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002202:	2300      	movs	r3, #0
 8002204:	e000      	b.n	8002208 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
}
 8002208:	4618      	mov	r0, r3
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	20000008 	.word	0x20000008
 8002214:	20000010 	.word	0x20000010
 8002218:	2000000c 	.word	0x2000000c

0800221c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002220:	4b06      	ldr	r3, [pc, #24]	; (800223c <HAL_IncTick+0x20>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	461a      	mov	r2, r3
 8002226:	4b06      	ldr	r3, [pc, #24]	; (8002240 <HAL_IncTick+0x24>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4413      	add	r3, r2
 800222c:	4a04      	ldr	r2, [pc, #16]	; (8002240 <HAL_IncTick+0x24>)
 800222e:	6013      	str	r3, [r2, #0]
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	20000010 	.word	0x20000010
 8002240:	20000cbc 	.word	0x20000cbc

08002244 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  return uwTick;
 8002248:	4b03      	ldr	r3, [pc, #12]	; (8002258 <HAL_GetTick+0x14>)
 800224a:	681b      	ldr	r3, [r3, #0]
}
 800224c:	4618      	mov	r0, r3
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	20000cbc 	.word	0x20000cbc

0800225c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002264:	f7ff ffee 	bl	8002244 <HAL_GetTick>
 8002268:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002274:	d005      	beq.n	8002282 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002276:	4b0a      	ldr	r3, [pc, #40]	; (80022a0 <HAL_Delay+0x44>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	461a      	mov	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	4413      	add	r3, r2
 8002280:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002282:	bf00      	nop
 8002284:	f7ff ffde 	bl	8002244 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	429a      	cmp	r2, r3
 8002292:	d8f7      	bhi.n	8002284 <HAL_Delay+0x28>
  {
  }
}
 8002294:	bf00      	nop
 8002296:	bf00      	nop
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	20000010 	.word	0x20000010

080022a4 <__NVIC_SetPriorityGrouping>:
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022b4:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <__NVIC_SetPriorityGrouping+0x44>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ba:	68ba      	ldr	r2, [r7, #8]
 80022bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022c0:	4013      	ands	r3, r2
 80022c2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022d6:	4a04      	ldr	r2, [pc, #16]	; (80022e8 <__NVIC_SetPriorityGrouping+0x44>)
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	60d3      	str	r3, [r2, #12]
}
 80022dc:	bf00      	nop
 80022de:	3714      	adds	r7, #20
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	e000ed00 	.word	0xe000ed00

080022ec <__NVIC_GetPriorityGrouping>:
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022f0:	4b04      	ldr	r3, [pc, #16]	; (8002304 <__NVIC_GetPriorityGrouping+0x18>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	0a1b      	lsrs	r3, r3, #8
 80022f6:	f003 0307 	and.w	r3, r3, #7
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	e000ed00 	.word	0xe000ed00

08002308 <__NVIC_EnableIRQ>:
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002316:	2b00      	cmp	r3, #0
 8002318:	db0b      	blt.n	8002332 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800231a:	79fb      	ldrb	r3, [r7, #7]
 800231c:	f003 021f 	and.w	r2, r3, #31
 8002320:	4907      	ldr	r1, [pc, #28]	; (8002340 <__NVIC_EnableIRQ+0x38>)
 8002322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002326:	095b      	lsrs	r3, r3, #5
 8002328:	2001      	movs	r0, #1
 800232a:	fa00 f202 	lsl.w	r2, r0, r2
 800232e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002332:	bf00      	nop
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	e000e100 	.word	0xe000e100

08002344 <__NVIC_SetPriority>:
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	6039      	str	r1, [r7, #0]
 800234e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002354:	2b00      	cmp	r3, #0
 8002356:	db0a      	blt.n	800236e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	b2da      	uxtb	r2, r3
 800235c:	490c      	ldr	r1, [pc, #48]	; (8002390 <__NVIC_SetPriority+0x4c>)
 800235e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002362:	0112      	lsls	r2, r2, #4
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	440b      	add	r3, r1
 8002368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800236c:	e00a      	b.n	8002384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	b2da      	uxtb	r2, r3
 8002372:	4908      	ldr	r1, [pc, #32]	; (8002394 <__NVIC_SetPriority+0x50>)
 8002374:	79fb      	ldrb	r3, [r7, #7]
 8002376:	f003 030f 	and.w	r3, r3, #15
 800237a:	3b04      	subs	r3, #4
 800237c:	0112      	lsls	r2, r2, #4
 800237e:	b2d2      	uxtb	r2, r2
 8002380:	440b      	add	r3, r1
 8002382:	761a      	strb	r2, [r3, #24]
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	e000e100 	.word	0xe000e100
 8002394:	e000ed00 	.word	0xe000ed00

08002398 <NVIC_EncodePriority>:
{
 8002398:	b480      	push	{r7}
 800239a:	b089      	sub	sp, #36	; 0x24
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	f1c3 0307 	rsb	r3, r3, #7
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	bf28      	it	cs
 80023b6:	2304      	movcs	r3, #4
 80023b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	3304      	adds	r3, #4
 80023be:	2b06      	cmp	r3, #6
 80023c0:	d902      	bls.n	80023c8 <NVIC_EncodePriority+0x30>
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	3b03      	subs	r3, #3
 80023c6:	e000      	b.n	80023ca <NVIC_EncodePriority+0x32>
 80023c8:	2300      	movs	r3, #0
 80023ca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023cc:	f04f 32ff 	mov.w	r2, #4294967295
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	43da      	mvns	r2, r3
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	401a      	ands	r2, r3
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023e0:	f04f 31ff 	mov.w	r1, #4294967295
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ea:	43d9      	mvns	r1, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f0:	4313      	orrs	r3, r2
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3724      	adds	r7, #36	; 0x24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
	...

08002400 <SysTick_Config>:
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3b01      	subs	r3, #1
 800240c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002410:	d301      	bcc.n	8002416 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002412:	2301      	movs	r3, #1
 8002414:	e00f      	b.n	8002436 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002416:	4a0a      	ldr	r2, [pc, #40]	; (8002440 <SysTick_Config+0x40>)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	3b01      	subs	r3, #1
 800241c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800241e:	210f      	movs	r1, #15
 8002420:	f04f 30ff 	mov.w	r0, #4294967295
 8002424:	f7ff ff8e 	bl	8002344 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002428:	4b05      	ldr	r3, [pc, #20]	; (8002440 <SysTick_Config+0x40>)
 800242a:	2200      	movs	r2, #0
 800242c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800242e:	4b04      	ldr	r3, [pc, #16]	; (8002440 <SysTick_Config+0x40>)
 8002430:	2207      	movs	r2, #7
 8002432:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	e000e010 	.word	0xe000e010

08002444 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f7ff ff29 	bl	80022a4 <__NVIC_SetPriorityGrouping>
}
 8002452:	bf00      	nop
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800245a:	b580      	push	{r7, lr}
 800245c:	b086      	sub	sp, #24
 800245e:	af00      	add	r7, sp, #0
 8002460:	4603      	mov	r3, r0
 8002462:	60b9      	str	r1, [r7, #8]
 8002464:	607a      	str	r2, [r7, #4]
 8002466:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002468:	2300      	movs	r3, #0
 800246a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800246c:	f7ff ff3e 	bl	80022ec <__NVIC_GetPriorityGrouping>
 8002470:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	68b9      	ldr	r1, [r7, #8]
 8002476:	6978      	ldr	r0, [r7, #20]
 8002478:	f7ff ff8e 	bl	8002398 <NVIC_EncodePriority>
 800247c:	4602      	mov	r2, r0
 800247e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002482:	4611      	mov	r1, r2
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff ff5d 	bl	8002344 <__NVIC_SetPriority>
}
 800248a:	bf00      	nop
 800248c:	3718      	adds	r7, #24
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b082      	sub	sp, #8
 8002496:	af00      	add	r7, sp, #0
 8002498:	4603      	mov	r3, r0
 800249a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800249c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff ff31 	bl	8002308 <__NVIC_EnableIRQ>
}
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b082      	sub	sp, #8
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7ff ffa2 	bl	8002400 <SysTick_Config>
 80024bc:	4603      	mov	r3, r0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b084      	sub	sp, #16
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80024d4:	f7ff feb6 	bl	8002244 <HAL_GetTick>
 80024d8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d008      	beq.n	80024f8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2280      	movs	r2, #128	; 0x80
 80024ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e052      	b.n	800259e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f022 0216 	bic.w	r2, r2, #22
 8002506:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	695a      	ldr	r2, [r3, #20]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002516:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251c:	2b00      	cmp	r3, #0
 800251e:	d103      	bne.n	8002528 <HAL_DMA_Abort+0x62>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002524:	2b00      	cmp	r3, #0
 8002526:	d007      	beq.n	8002538 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f022 0208 	bic.w	r2, r2, #8
 8002536:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f022 0201 	bic.w	r2, r2, #1
 8002546:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002548:	e013      	b.n	8002572 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800254a:	f7ff fe7b 	bl	8002244 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b05      	cmp	r3, #5
 8002556:	d90c      	bls.n	8002572 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2220      	movs	r2, #32
 800255c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2203      	movs	r2, #3
 8002562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e015      	b.n	800259e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1e4      	bne.n	800254a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002584:	223f      	movs	r2, #63	; 0x3f
 8002586:	409a      	lsls	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d004      	beq.n	80025c4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2280      	movs	r2, #128	; 0x80
 80025be:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e00c      	b.n	80025de <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2205      	movs	r2, #5
 80025c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 0201 	bic.w	r2, r2, #1
 80025da:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b083      	sub	sp, #12
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025f8:	b2db      	uxtb	r3, r3
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
	...

08002608 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002608:	b480      	push	{r7}
 800260a:	b089      	sub	sp, #36	; 0x24
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002612:	2300      	movs	r3, #0
 8002614:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002616:	2300      	movs	r3, #0
 8002618:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800261a:	2300      	movs	r3, #0
 800261c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800261e:	2300      	movs	r3, #0
 8002620:	61fb      	str	r3, [r7, #28]
 8002622:	e159      	b.n	80028d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002624:	2201      	movs	r2, #1
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	4013      	ands	r3, r2
 8002636:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	429a      	cmp	r2, r3
 800263e:	f040 8148 	bne.w	80028d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f003 0303 	and.w	r3, r3, #3
 800264a:	2b01      	cmp	r3, #1
 800264c:	d005      	beq.n	800265a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002656:	2b02      	cmp	r3, #2
 8002658:	d130      	bne.n	80026bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	2203      	movs	r2, #3
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	43db      	mvns	r3, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4013      	ands	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	68da      	ldr	r2, [r3, #12]
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4313      	orrs	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002690:	2201      	movs	r2, #1
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	43db      	mvns	r3, r3
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4013      	ands	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	091b      	lsrs	r3, r3, #4
 80026a6:	f003 0201 	and.w	r2, r3, #1
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f003 0303 	and.w	r3, r3, #3
 80026c4:	2b03      	cmp	r3, #3
 80026c6:	d017      	beq.n	80026f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	2203      	movs	r2, #3
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	43db      	mvns	r3, r3
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4013      	ands	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f003 0303 	and.w	r3, r3, #3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d123      	bne.n	800274c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	08da      	lsrs	r2, r3, #3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	3208      	adds	r2, #8
 800270c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002710:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	220f      	movs	r2, #15
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	43db      	mvns	r3, r3
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4013      	ands	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	691a      	ldr	r2, [r3, #16]
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	f003 0307 	and.w	r3, r3, #7
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4313      	orrs	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	08da      	lsrs	r2, r3, #3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	3208      	adds	r2, #8
 8002746:	69b9      	ldr	r1, [r7, #24]
 8002748:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	2203      	movs	r2, #3
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	43db      	mvns	r3, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f003 0203 	and.w	r2, r3, #3
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002788:	2b00      	cmp	r3, #0
 800278a:	f000 80a2 	beq.w	80028d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800278e:	2300      	movs	r3, #0
 8002790:	60fb      	str	r3, [r7, #12]
 8002792:	4b57      	ldr	r3, [pc, #348]	; (80028f0 <HAL_GPIO_Init+0x2e8>)
 8002794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002796:	4a56      	ldr	r2, [pc, #344]	; (80028f0 <HAL_GPIO_Init+0x2e8>)
 8002798:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800279c:	6453      	str	r3, [r2, #68]	; 0x44
 800279e:	4b54      	ldr	r3, [pc, #336]	; (80028f0 <HAL_GPIO_Init+0x2e8>)
 80027a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027aa:	4a52      	ldr	r2, [pc, #328]	; (80028f4 <HAL_GPIO_Init+0x2ec>)
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	089b      	lsrs	r3, r3, #2
 80027b0:	3302      	adds	r3, #2
 80027b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	f003 0303 	and.w	r3, r3, #3
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	220f      	movs	r2, #15
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	43db      	mvns	r3, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4013      	ands	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a49      	ldr	r2, [pc, #292]	; (80028f8 <HAL_GPIO_Init+0x2f0>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d019      	beq.n	800280a <HAL_GPIO_Init+0x202>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a48      	ldr	r2, [pc, #288]	; (80028fc <HAL_GPIO_Init+0x2f4>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d013      	beq.n	8002806 <HAL_GPIO_Init+0x1fe>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a47      	ldr	r2, [pc, #284]	; (8002900 <HAL_GPIO_Init+0x2f8>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d00d      	beq.n	8002802 <HAL_GPIO_Init+0x1fa>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a46      	ldr	r2, [pc, #280]	; (8002904 <HAL_GPIO_Init+0x2fc>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d007      	beq.n	80027fe <HAL_GPIO_Init+0x1f6>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a45      	ldr	r2, [pc, #276]	; (8002908 <HAL_GPIO_Init+0x300>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d101      	bne.n	80027fa <HAL_GPIO_Init+0x1f2>
 80027f6:	2304      	movs	r3, #4
 80027f8:	e008      	b.n	800280c <HAL_GPIO_Init+0x204>
 80027fa:	2307      	movs	r3, #7
 80027fc:	e006      	b.n	800280c <HAL_GPIO_Init+0x204>
 80027fe:	2303      	movs	r3, #3
 8002800:	e004      	b.n	800280c <HAL_GPIO_Init+0x204>
 8002802:	2302      	movs	r3, #2
 8002804:	e002      	b.n	800280c <HAL_GPIO_Init+0x204>
 8002806:	2301      	movs	r3, #1
 8002808:	e000      	b.n	800280c <HAL_GPIO_Init+0x204>
 800280a:	2300      	movs	r3, #0
 800280c:	69fa      	ldr	r2, [r7, #28]
 800280e:	f002 0203 	and.w	r2, r2, #3
 8002812:	0092      	lsls	r2, r2, #2
 8002814:	4093      	lsls	r3, r2
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4313      	orrs	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800281c:	4935      	ldr	r1, [pc, #212]	; (80028f4 <HAL_GPIO_Init+0x2ec>)
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	089b      	lsrs	r3, r3, #2
 8002822:	3302      	adds	r3, #2
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800282a:	4b38      	ldr	r3, [pc, #224]	; (800290c <HAL_GPIO_Init+0x304>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	43db      	mvns	r3, r3
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	4013      	ands	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	4313      	orrs	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800284e:	4a2f      	ldr	r2, [pc, #188]	; (800290c <HAL_GPIO_Init+0x304>)
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002854:	4b2d      	ldr	r3, [pc, #180]	; (800290c <HAL_GPIO_Init+0x304>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	43db      	mvns	r3, r3
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	4013      	ands	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d003      	beq.n	8002878 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	4313      	orrs	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002878:	4a24      	ldr	r2, [pc, #144]	; (800290c <HAL_GPIO_Init+0x304>)
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800287e:	4b23      	ldr	r3, [pc, #140]	; (800290c <HAL_GPIO_Init+0x304>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	43db      	mvns	r3, r3
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4013      	ands	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	4313      	orrs	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028a2:	4a1a      	ldr	r2, [pc, #104]	; (800290c <HAL_GPIO_Init+0x304>)
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028a8:	4b18      	ldr	r3, [pc, #96]	; (800290c <HAL_GPIO_Init+0x304>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	43db      	mvns	r3, r3
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	4013      	ands	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d003      	beq.n	80028cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028cc:	4a0f      	ldr	r2, [pc, #60]	; (800290c <HAL_GPIO_Init+0x304>)
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	3301      	adds	r3, #1
 80028d6:	61fb      	str	r3, [r7, #28]
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	2b0f      	cmp	r3, #15
 80028dc:	f67f aea2 	bls.w	8002624 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028e0:	bf00      	nop
 80028e2:	bf00      	nop
 80028e4:	3724      	adds	r7, #36	; 0x24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	40023800 	.word	0x40023800
 80028f4:	40013800 	.word	0x40013800
 80028f8:	40020000 	.word	0x40020000
 80028fc:	40020400 	.word	0x40020400
 8002900:	40020800 	.word	0x40020800
 8002904:	40020c00 	.word	0x40020c00
 8002908:	40021000 	.word	0x40021000
 800290c:	40013c00 	.word	0x40013c00

08002910 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	460b      	mov	r3, r1
 800291a:	807b      	strh	r3, [r7, #2]
 800291c:	4613      	mov	r3, r2
 800291e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002920:	787b      	ldrb	r3, [r7, #1]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002926:	887a      	ldrh	r2, [r7, #2]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800292c:	e003      	b.n	8002936 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800292e:	887b      	ldrh	r3, [r7, #2]
 8002930:	041a      	lsls	r2, r3, #16
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	619a      	str	r2, [r3, #24]
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
	...

08002944 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e12b      	b.n	8002bae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d106      	bne.n	8002970 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7ff fa78 	bl	8001e60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2224      	movs	r2, #36	; 0x24
 8002974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 0201 	bic.w	r2, r2, #1
 8002986:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002996:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029a8:	f003 fa14 	bl	8005dd4 <HAL_RCC_GetPCLK1Freq>
 80029ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	4a81      	ldr	r2, [pc, #516]	; (8002bb8 <HAL_I2C_Init+0x274>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d807      	bhi.n	80029c8 <HAL_I2C_Init+0x84>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4a80      	ldr	r2, [pc, #512]	; (8002bbc <HAL_I2C_Init+0x278>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	bf94      	ite	ls
 80029c0:	2301      	movls	r3, #1
 80029c2:	2300      	movhi	r3, #0
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	e006      	b.n	80029d6 <HAL_I2C_Init+0x92>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	4a7d      	ldr	r2, [pc, #500]	; (8002bc0 <HAL_I2C_Init+0x27c>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	bf94      	ite	ls
 80029d0:	2301      	movls	r3, #1
 80029d2:	2300      	movhi	r3, #0
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e0e7      	b.n	8002bae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	4a78      	ldr	r2, [pc, #480]	; (8002bc4 <HAL_I2C_Init+0x280>)
 80029e2:	fba2 2303 	umull	r2, r3, r2, r3
 80029e6:	0c9b      	lsrs	r3, r3, #18
 80029e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68ba      	ldr	r2, [r7, #8]
 80029fa:	430a      	orrs	r2, r1
 80029fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	4a6a      	ldr	r2, [pc, #424]	; (8002bb8 <HAL_I2C_Init+0x274>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d802      	bhi.n	8002a18 <HAL_I2C_Init+0xd4>
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	3301      	adds	r3, #1
 8002a16:	e009      	b.n	8002a2c <HAL_I2C_Init+0xe8>
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a1e:	fb02 f303 	mul.w	r3, r2, r3
 8002a22:	4a69      	ldr	r2, [pc, #420]	; (8002bc8 <HAL_I2C_Init+0x284>)
 8002a24:	fba2 2303 	umull	r2, r3, r2, r3
 8002a28:	099b      	lsrs	r3, r3, #6
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	6812      	ldr	r2, [r2, #0]
 8002a30:	430b      	orrs	r3, r1
 8002a32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a3e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	495c      	ldr	r1, [pc, #368]	; (8002bb8 <HAL_I2C_Init+0x274>)
 8002a48:	428b      	cmp	r3, r1
 8002a4a:	d819      	bhi.n	8002a80 <HAL_I2C_Init+0x13c>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	1e59      	subs	r1, r3, #1
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a5a:	1c59      	adds	r1, r3, #1
 8002a5c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a60:	400b      	ands	r3, r1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00a      	beq.n	8002a7c <HAL_I2C_Init+0x138>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	1e59      	subs	r1, r3, #1
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a74:	3301      	adds	r3, #1
 8002a76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a7a:	e051      	b.n	8002b20 <HAL_I2C_Init+0x1dc>
 8002a7c:	2304      	movs	r3, #4
 8002a7e:	e04f      	b.n	8002b20 <HAL_I2C_Init+0x1dc>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d111      	bne.n	8002aac <HAL_I2C_Init+0x168>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	1e58      	subs	r0, r3, #1
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6859      	ldr	r1, [r3, #4]
 8002a90:	460b      	mov	r3, r1
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	440b      	add	r3, r1
 8002a96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	bf0c      	ite	eq
 8002aa4:	2301      	moveq	r3, #1
 8002aa6:	2300      	movne	r3, #0
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	e012      	b.n	8002ad2 <HAL_I2C_Init+0x18e>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	1e58      	subs	r0, r3, #1
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6859      	ldr	r1, [r3, #4]
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	440b      	add	r3, r1
 8002aba:	0099      	lsls	r1, r3, #2
 8002abc:	440b      	add	r3, r1
 8002abe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	bf0c      	ite	eq
 8002acc:	2301      	moveq	r3, #1
 8002ace:	2300      	movne	r3, #0
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <HAL_I2C_Init+0x196>
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e022      	b.n	8002b20 <HAL_I2C_Init+0x1dc>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10e      	bne.n	8002b00 <HAL_I2C_Init+0x1bc>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	1e58      	subs	r0, r3, #1
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6859      	ldr	r1, [r3, #4]
 8002aea:	460b      	mov	r3, r1
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	440b      	add	r3, r1
 8002af0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002af4:	3301      	adds	r3, #1
 8002af6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002afe:	e00f      	b.n	8002b20 <HAL_I2C_Init+0x1dc>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	1e58      	subs	r0, r3, #1
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6859      	ldr	r1, [r3, #4]
 8002b08:	460b      	mov	r3, r1
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	440b      	add	r3, r1
 8002b0e:	0099      	lsls	r1, r3, #2
 8002b10:	440b      	add	r3, r1
 8002b12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b16:	3301      	adds	r3, #1
 8002b18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b20:	6879      	ldr	r1, [r7, #4]
 8002b22:	6809      	ldr	r1, [r1, #0]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	69da      	ldr	r2, [r3, #28]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	430a      	orrs	r2, r1
 8002b42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	6911      	ldr	r1, [r2, #16]
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	68d2      	ldr	r2, [r2, #12]
 8002b5a:	4311      	orrs	r1, r2
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	6812      	ldr	r2, [r2, #0]
 8002b60:	430b      	orrs	r3, r1
 8002b62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	695a      	ldr	r2, [r3, #20]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	431a      	orrs	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f042 0201 	orr.w	r2, r2, #1
 8002b8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2220      	movs	r2, #32
 8002b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	000186a0 	.word	0x000186a0
 8002bbc:	001e847f 	.word	0x001e847f
 8002bc0:	003d08ff 	.word	0x003d08ff
 8002bc4:	431bde83 	.word	0x431bde83
 8002bc8:	10624dd3 	.word	0x10624dd3

08002bcc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b088      	sub	sp, #32
 8002bd0:	af02      	add	r7, sp, #8
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	607a      	str	r2, [r7, #4]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	460b      	mov	r3, r1
 8002bda:	817b      	strh	r3, [r7, #10]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002be0:	f7ff fb30 	bl	8002244 <HAL_GetTick>
 8002be4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b20      	cmp	r3, #32
 8002bf0:	f040 80e0 	bne.w	8002db4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	9300      	str	r3, [sp, #0]
 8002bf8:	2319      	movs	r3, #25
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	4970      	ldr	r1, [pc, #448]	; (8002dc0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002bfe:	68f8      	ldr	r0, [r7, #12]
 8002c00:	f002 fa4e 	bl	80050a0 <I2C_WaitOnFlagUntilTimeout>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	e0d3      	b.n	8002db6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d101      	bne.n	8002c1c <HAL_I2C_Master_Transmit+0x50>
 8002c18:	2302      	movs	r3, #2
 8002c1a:	e0cc      	b.n	8002db6 <HAL_I2C_Master_Transmit+0x1ea>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d007      	beq.n	8002c42 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f042 0201 	orr.w	r2, r2, #1
 8002c40:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c50:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2221      	movs	r2, #33	; 0x21
 8002c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2210      	movs	r2, #16
 8002c5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	893a      	ldrh	r2, [r7, #8]
 8002c72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	4a50      	ldr	r2, [pc, #320]	; (8002dc4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002c82:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c84:	8979      	ldrh	r1, [r7, #10]
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	6a3a      	ldr	r2, [r7, #32]
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f001 ff7a 	bl	8004b84 <I2C_MasterRequestWrite>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e08d      	b.n	8002db6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	613b      	str	r3, [r7, #16]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	613b      	str	r3, [r7, #16]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	613b      	str	r3, [r7, #16]
 8002cae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002cb0:	e066      	b.n	8002d80 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	6a39      	ldr	r1, [r7, #32]
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f002 fac8 	bl	800524c <I2C_WaitOnTXEFlagUntilTimeout>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00d      	beq.n	8002cde <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	d107      	bne.n	8002cda <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cd8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e06b      	b.n	8002db6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce2:	781a      	ldrb	r2, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	1c5a      	adds	r2, r3, #1
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d06:	3b01      	subs	r3, #1
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	2b04      	cmp	r3, #4
 8002d1a:	d11b      	bne.n	8002d54 <HAL_I2C_Master_Transmit+0x188>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d017      	beq.n	8002d54 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	781a      	ldrb	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d34:	1c5a      	adds	r2, r3, #1
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	3b01      	subs	r3, #1
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	6a39      	ldr	r1, [r7, #32]
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f002 fab8 	bl	80052ce <I2C_WaitOnBTFFlagUntilTimeout>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00d      	beq.n	8002d80 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	2b04      	cmp	r3, #4
 8002d6a:	d107      	bne.n	8002d7c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d7a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e01a      	b.n	8002db6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d194      	bne.n	8002cb2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002db0:	2300      	movs	r3, #0
 8002db2:	e000      	b.n	8002db6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002db4:	2302      	movs	r3, #2
  }
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3718      	adds	r7, #24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	00100002 	.word	0x00100002
 8002dc4:	ffff0000 	.word	0xffff0000

08002dc8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b08c      	sub	sp, #48	; 0x30
 8002dcc:	af02      	add	r7, sp, #8
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	607a      	str	r2, [r7, #4]
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	817b      	strh	r3, [r7, #10]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ddc:	f7ff fa32 	bl	8002244 <HAL_GetTick>
 8002de0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b20      	cmp	r3, #32
 8002dec:	f040 820b 	bne.w	8003206 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	2319      	movs	r3, #25
 8002df6:	2201      	movs	r2, #1
 8002df8:	497c      	ldr	r1, [pc, #496]	; (8002fec <HAL_I2C_Master_Receive+0x224>)
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f002 f950 	bl	80050a0 <I2C_WaitOnFlagUntilTimeout>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002e06:	2302      	movs	r3, #2
 8002e08:	e1fe      	b.n	8003208 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d101      	bne.n	8002e18 <HAL_I2C_Master_Receive+0x50>
 8002e14:	2302      	movs	r3, #2
 8002e16:	e1f7      	b.n	8003208 <HAL_I2C_Master_Receive+0x440>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d007      	beq.n	8002e3e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f042 0201 	orr.w	r2, r2, #1
 8002e3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e4c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2222      	movs	r2, #34	; 0x22
 8002e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2210      	movs	r2, #16
 8002e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	893a      	ldrh	r2, [r7, #8]
 8002e6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	4a5c      	ldr	r2, [pc, #368]	; (8002ff0 <HAL_I2C_Master_Receive+0x228>)
 8002e7e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e80:	8979      	ldrh	r1, [r7, #10]
 8002e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f001 fefe 	bl	8004c88 <I2C_MasterRequestRead>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e1b8      	b.n	8003208 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d113      	bne.n	8002ec6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	623b      	str	r3, [r7, #32]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	623b      	str	r3, [r7, #32]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	623b      	str	r3, [r7, #32]
 8002eb2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	e18c      	b.n	80031e0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d11b      	bne.n	8002f06 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002edc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ede:	2300      	movs	r3, #0
 8002ee0:	61fb      	str	r3, [r7, #28]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	61fb      	str	r3, [r7, #28]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	61fb      	str	r3, [r7, #28]
 8002ef2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	e16c      	b.n	80031e0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d11b      	bne.n	8002f46 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f1c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61bb      	str	r3, [r7, #24]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	61bb      	str	r3, [r7, #24]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	61bb      	str	r3, [r7, #24]
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	e14c      	b.n	80031e0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f56:	2300      	movs	r3, #0
 8002f58:	617b      	str	r3, [r7, #20]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	617b      	str	r3, [r7, #20]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	617b      	str	r3, [r7, #20]
 8002f6a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002f6c:	e138      	b.n	80031e0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f72:	2b03      	cmp	r3, #3
 8002f74:	f200 80f1 	bhi.w	800315a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d123      	bne.n	8002fc8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f002 fa15 	bl	80053b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e139      	b.n	8003208 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	691a      	ldr	r2, [r3, #16]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa6:	1c5a      	adds	r2, r3, #1
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fc6:	e10b      	b.n	80031e0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d14e      	bne.n	800306e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	4906      	ldr	r1, [pc, #24]	; (8002ff4 <HAL_I2C_Master_Receive+0x22c>)
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f002 f860 	bl	80050a0 <I2C_WaitOnFlagUntilTimeout>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d008      	beq.n	8002ff8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e10e      	b.n	8003208 <HAL_I2C_Master_Receive+0x440>
 8002fea:	bf00      	nop
 8002fec:	00100002 	.word	0x00100002
 8002ff0:	ffff0000 	.word	0xffff0000
 8002ff4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003006:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	691a      	ldr	r2, [r3, #16]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003012:	b2d2      	uxtb	r2, r2
 8003014:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301a:	1c5a      	adds	r2, r3, #1
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003024:	3b01      	subs	r3, #1
 8003026:	b29a      	uxth	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003030:	b29b      	uxth	r3, r3
 8003032:	3b01      	subs	r3, #1
 8003034:	b29a      	uxth	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	691a      	ldr	r2, [r3, #16]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003044:	b2d2      	uxtb	r2, r2
 8003046:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	1c5a      	adds	r2, r3, #1
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003056:	3b01      	subs	r3, #1
 8003058:	b29a      	uxth	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003062:	b29b      	uxth	r3, r3
 8003064:	3b01      	subs	r3, #1
 8003066:	b29a      	uxth	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800306c:	e0b8      	b.n	80031e0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	9300      	str	r3, [sp, #0]
 8003072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003074:	2200      	movs	r2, #0
 8003076:	4966      	ldr	r1, [pc, #408]	; (8003210 <HAL_I2C_Master_Receive+0x448>)
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f002 f811 	bl	80050a0 <I2C_WaitOnFlagUntilTimeout>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e0bf      	b.n	8003208 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003096:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	691a      	ldr	r2, [r3, #16]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a2:	b2d2      	uxtb	r2, r2
 80030a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030aa:	1c5a      	adds	r2, r3, #1
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b4:	3b01      	subs	r3, #1
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	3b01      	subs	r3, #1
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d0:	2200      	movs	r2, #0
 80030d2:	494f      	ldr	r1, [pc, #316]	; (8003210 <HAL_I2C_Master_Receive+0x448>)
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f001 ffe3 	bl	80050a0 <I2C_WaitOnFlagUntilTimeout>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e091      	b.n	8003208 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	691a      	ldr	r2, [r3, #16]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	1c5a      	adds	r2, r3, #1
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003110:	3b01      	subs	r3, #1
 8003112:	b29a      	uxth	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800311c:	b29b      	uxth	r3, r3
 800311e:	3b01      	subs	r3, #1
 8003120:	b29a      	uxth	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	691a      	ldr	r2, [r3, #16]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	b2d2      	uxtb	r2, r2
 8003132:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003138:	1c5a      	adds	r2, r3, #1
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003142:	3b01      	subs	r3, #1
 8003144:	b29a      	uxth	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800314e:	b29b      	uxth	r3, r3
 8003150:	3b01      	subs	r3, #1
 8003152:	b29a      	uxth	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003158:	e042      	b.n	80031e0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800315a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800315c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f002 f928 	bl	80053b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e04c      	b.n	8003208 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	691a      	ldr	r2, [r3, #16]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003178:	b2d2      	uxtb	r2, r2
 800317a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	1c5a      	adds	r2, r3, #1
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800318a:	3b01      	subs	r3, #1
 800318c:	b29a      	uxth	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003196:	b29b      	uxth	r3, r3
 8003198:	3b01      	subs	r3, #1
 800319a:	b29a      	uxth	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	f003 0304 	and.w	r3, r3, #4
 80031aa:	2b04      	cmp	r3, #4
 80031ac:	d118      	bne.n	80031e0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	691a      	ldr	r2, [r3, #16]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b8:	b2d2      	uxtb	r2, r2
 80031ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c0:	1c5a      	adds	r2, r3, #1
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ca:	3b01      	subs	r3, #1
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	3b01      	subs	r3, #1
 80031da:	b29a      	uxth	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f47f aec2 	bne.w	8002f6e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2220      	movs	r2, #32
 80031ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003202:	2300      	movs	r3, #0
 8003204:	e000      	b.n	8003208 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003206:	2302      	movs	r3, #2
  }
}
 8003208:	4618      	mov	r0, r3
 800320a:	3728      	adds	r7, #40	; 0x28
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	00010004 	.word	0x00010004

08003214 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b088      	sub	sp, #32
 8003218:	af02      	add	r7, sp, #8
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	4608      	mov	r0, r1
 800321e:	4611      	mov	r1, r2
 8003220:	461a      	mov	r2, r3
 8003222:	4603      	mov	r3, r0
 8003224:	817b      	strh	r3, [r7, #10]
 8003226:	460b      	mov	r3, r1
 8003228:	813b      	strh	r3, [r7, #8]
 800322a:	4613      	mov	r3, r2
 800322c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800322e:	f7ff f809 	bl	8002244 <HAL_GetTick>
 8003232:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b20      	cmp	r3, #32
 800323e:	f040 80d9 	bne.w	80033f4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	2319      	movs	r3, #25
 8003248:	2201      	movs	r2, #1
 800324a:	496d      	ldr	r1, [pc, #436]	; (8003400 <HAL_I2C_Mem_Write+0x1ec>)
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f001 ff27 	bl	80050a0 <I2C_WaitOnFlagUntilTimeout>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003258:	2302      	movs	r3, #2
 800325a:	e0cc      	b.n	80033f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003262:	2b01      	cmp	r3, #1
 8003264:	d101      	bne.n	800326a <HAL_I2C_Mem_Write+0x56>
 8003266:	2302      	movs	r3, #2
 8003268:	e0c5      	b.n	80033f6 <HAL_I2C_Mem_Write+0x1e2>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	2b01      	cmp	r3, #1
 800327e:	d007      	beq.n	8003290 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f042 0201 	orr.w	r2, r2, #1
 800328e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800329e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2221      	movs	r2, #33	; 0x21
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2240      	movs	r2, #64	; 0x40
 80032ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6a3a      	ldr	r2, [r7, #32]
 80032ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80032c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4a4d      	ldr	r2, [pc, #308]	; (8003404 <HAL_I2C_Mem_Write+0x1f0>)
 80032d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032d2:	88f8      	ldrh	r0, [r7, #6]
 80032d4:	893a      	ldrh	r2, [r7, #8]
 80032d6:	8979      	ldrh	r1, [r7, #10]
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	9301      	str	r3, [sp, #4]
 80032dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	4603      	mov	r3, r0
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f001 fd9e 	bl	8004e24 <I2C_RequestMemoryWrite>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d052      	beq.n	8003394 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e081      	b.n	80033f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f001 ffa8 	bl	800524c <I2C_WaitOnTXEFlagUntilTimeout>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00d      	beq.n	800331e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	2b04      	cmp	r3, #4
 8003308:	d107      	bne.n	800331a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003318:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e06b      	b.n	80033f6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003322:	781a      	ldrb	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332e:	1c5a      	adds	r2, r3, #1
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003338:	3b01      	subs	r3, #1
 800333a:	b29a      	uxth	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003344:	b29b      	uxth	r3, r3
 8003346:	3b01      	subs	r3, #1
 8003348:	b29a      	uxth	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	f003 0304 	and.w	r3, r3, #4
 8003358:	2b04      	cmp	r3, #4
 800335a:	d11b      	bne.n	8003394 <HAL_I2C_Mem_Write+0x180>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003360:	2b00      	cmp	r3, #0
 8003362:	d017      	beq.n	8003394 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003368:	781a      	ldrb	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003374:	1c5a      	adds	r2, r3, #1
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800337e:	3b01      	subs	r3, #1
 8003380:	b29a      	uxth	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338a:	b29b      	uxth	r3, r3
 800338c:	3b01      	subs	r3, #1
 800338e:	b29a      	uxth	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1aa      	bne.n	80032f2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f001 ff94 	bl	80052ce <I2C_WaitOnBTFFlagUntilTimeout>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00d      	beq.n	80033c8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b0:	2b04      	cmp	r3, #4
 80033b2:	d107      	bne.n	80033c4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033c2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e016      	b.n	80033f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2220      	movs	r2, #32
 80033dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80033f0:	2300      	movs	r3, #0
 80033f2:	e000      	b.n	80033f6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80033f4:	2302      	movs	r3, #2
  }
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3718      	adds	r7, #24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	00100002 	.word	0x00100002
 8003404:	ffff0000 	.word	0xffff0000

08003408 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b088      	sub	sp, #32
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003410:	2300      	movs	r3, #0
 8003412:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003420:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003428:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003430:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003432:	7bfb      	ldrb	r3, [r7, #15]
 8003434:	2b10      	cmp	r3, #16
 8003436:	d003      	beq.n	8003440 <HAL_I2C_EV_IRQHandler+0x38>
 8003438:	7bfb      	ldrb	r3, [r7, #15]
 800343a:	2b40      	cmp	r3, #64	; 0x40
 800343c:	f040 80b1 	bne.w	80035a2 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10d      	bne.n	8003476 <HAL_I2C_EV_IRQHandler+0x6e>
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003460:	d003      	beq.n	800346a <HAL_I2C_EV_IRQHandler+0x62>
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003468:	d101      	bne.n	800346e <HAL_I2C_EV_IRQHandler+0x66>
 800346a:	2301      	movs	r3, #1
 800346c:	e000      	b.n	8003470 <HAL_I2C_EV_IRQHandler+0x68>
 800346e:	2300      	movs	r3, #0
 8003470:	2b01      	cmp	r3, #1
 8003472:	f000 8114 	beq.w	800369e <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00b      	beq.n	8003498 <HAL_I2C_EV_IRQHandler+0x90>
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003486:	2b00      	cmp	r3, #0
 8003488:	d006      	beq.n	8003498 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f002 f817 	bl	80054be <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 fd5e 	bl	8003f52 <I2C_Master_SB>
 8003496:	e083      	b.n	80035a0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	f003 0308 	and.w	r3, r3, #8
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d008      	beq.n	80034b4 <HAL_I2C_EV_IRQHandler+0xac>
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d003      	beq.n	80034b4 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 fdd6 	bl	800405e <I2C_Master_ADD10>
 80034b2:	e075      	b.n	80035a0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d008      	beq.n	80034d0 <HAL_I2C_EV_IRQHandler+0xc8>
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d003      	beq.n	80034d0 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 fdf2 	bl	80040b2 <I2C_Master_ADDR>
 80034ce:	e067      	b.n	80035a0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	f003 0304 	and.w	r3, r3, #4
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d036      	beq.n	8003548 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034e8:	f000 80db 	beq.w	80036a2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00d      	beq.n	8003512 <HAL_I2C_EV_IRQHandler+0x10a>
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d008      	beq.n	8003512 <HAL_I2C_EV_IRQHandler+0x10a>
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	f003 0304 	and.w	r3, r3, #4
 8003506:	2b00      	cmp	r3, #0
 8003508:	d103      	bne.n	8003512 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f9d6 	bl	80038bc <I2C_MasterTransmit_TXE>
 8003510:	e046      	b.n	80035a0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	2b00      	cmp	r3, #0
 800351a:	f000 80c2 	beq.w	80036a2 <HAL_I2C_EV_IRQHandler+0x29a>
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 80bc 	beq.w	80036a2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800352a:	7bbb      	ldrb	r3, [r7, #14]
 800352c:	2b21      	cmp	r3, #33	; 0x21
 800352e:	d103      	bne.n	8003538 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 fa5f 	bl	80039f4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003536:	e0b4      	b.n	80036a2 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003538:	7bfb      	ldrb	r3, [r7, #15]
 800353a:	2b40      	cmp	r3, #64	; 0x40
 800353c:	f040 80b1 	bne.w	80036a2 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 facd 	bl	8003ae0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003546:	e0ac      	b.n	80036a2 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003552:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003556:	f000 80a4 	beq.w	80036a2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00d      	beq.n	8003580 <HAL_I2C_EV_IRQHandler+0x178>
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800356a:	2b00      	cmp	r3, #0
 800356c:	d008      	beq.n	8003580 <HAL_I2C_EV_IRQHandler+0x178>
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	f003 0304 	and.w	r3, r3, #4
 8003574:	2b00      	cmp	r3, #0
 8003576:	d103      	bne.n	8003580 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 fb45 	bl	8003c08 <I2C_MasterReceive_RXNE>
 800357e:	e00f      	b.n	80035a0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	f003 0304 	and.w	r3, r3, #4
 8003586:	2b00      	cmp	r3, #0
 8003588:	f000 808b 	beq.w	80036a2 <HAL_I2C_EV_IRQHandler+0x29a>
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 8085 	beq.w	80036a2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 fbf0 	bl	8003d7e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800359e:	e080      	b.n	80036a2 <HAL_I2C_EV_IRQHandler+0x29a>
 80035a0:	e07f      	b.n	80036a2 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d004      	beq.n	80035b4 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	61fb      	str	r3, [r7, #28]
 80035b2:	e007      	b.n	80035c4 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d011      	beq.n	80035f2 <HAL_I2C_EV_IRQHandler+0x1ea>
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00c      	beq.n	80035f2 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d003      	beq.n	80035e8 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80035e8:	69b9      	ldr	r1, [r7, #24]
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 ffb0 	bl	8004550 <I2C_Slave_ADDR>
 80035f0:	e05a      	b.n	80036a8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	f003 0310 	and.w	r3, r3, #16
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d008      	beq.n	800360e <HAL_I2C_EV_IRQHandler+0x206>
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003602:	2b00      	cmp	r3, #0
 8003604:	d003      	beq.n	800360e <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 ffea 	bl	80045e0 <I2C_Slave_STOPF>
 800360c:	e04c      	b.n	80036a8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800360e:	7bbb      	ldrb	r3, [r7, #14]
 8003610:	2b21      	cmp	r3, #33	; 0x21
 8003612:	d002      	beq.n	800361a <HAL_I2C_EV_IRQHandler+0x212>
 8003614:	7bbb      	ldrb	r3, [r7, #14]
 8003616:	2b29      	cmp	r3, #41	; 0x29
 8003618:	d120      	bne.n	800365c <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00d      	beq.n	8003640 <HAL_I2C_EV_IRQHandler+0x238>
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800362a:	2b00      	cmp	r3, #0
 800362c:	d008      	beq.n	8003640 <HAL_I2C_EV_IRQHandler+0x238>
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	f003 0304 	and.w	r3, r3, #4
 8003634:	2b00      	cmp	r3, #0
 8003636:	d103      	bne.n	8003640 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f000 fecb 	bl	80043d4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800363e:	e032      	b.n	80036a6 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	f003 0304 	and.w	r3, r3, #4
 8003646:	2b00      	cmp	r3, #0
 8003648:	d02d      	beq.n	80036a6 <HAL_I2C_EV_IRQHandler+0x29e>
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003650:	2b00      	cmp	r3, #0
 8003652:	d028      	beq.n	80036a6 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 fefa 	bl	800444e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800365a:	e024      	b.n	80036a6 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00d      	beq.n	8003682 <HAL_I2C_EV_IRQHandler+0x27a>
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800366c:	2b00      	cmp	r3, #0
 800366e:	d008      	beq.n	8003682 <HAL_I2C_EV_IRQHandler+0x27a>
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	f003 0304 	and.w	r3, r3, #4
 8003676:	2b00      	cmp	r3, #0
 8003678:	d103      	bne.n	8003682 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 ff08 	bl	8004490 <I2C_SlaveReceive_RXNE>
 8003680:	e012      	b.n	80036a8 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00d      	beq.n	80036a8 <HAL_I2C_EV_IRQHandler+0x2a0>
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003692:	2b00      	cmp	r3, #0
 8003694:	d008      	beq.n	80036a8 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 ff38 	bl	800450c <I2C_SlaveReceive_BTF>
 800369c:	e004      	b.n	80036a8 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800369e:	bf00      	nop
 80036a0:	e002      	b.n	80036a8 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036a2:	bf00      	nop
 80036a4:	e000      	b.n	80036a8 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036a6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80036a8:	3720      	adds	r7, #32
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b08a      	sub	sp, #40	; 0x28
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	695b      	ldr	r3, [r3, #20]
 80036bc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80036c6:	2300      	movs	r3, #0
 80036c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036d0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80036d2:	6a3b      	ldr	r3, [r7, #32]
 80036d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00d      	beq.n	80036f8 <HAL_I2C_ER_IRQHandler+0x4a>
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d008      	beq.n	80036f8 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e8:	f043 0301 	orr.w	r3, r3, #1
 80036ec:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80036f6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80036f8:	6a3b      	ldr	r3, [r7, #32]
 80036fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00d      	beq.n	800371e <HAL_I2C_ER_IRQHandler+0x70>
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003708:	2b00      	cmp	r3, #0
 800370a:	d008      	beq.n	800371e <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800370c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370e:	f043 0302 	orr.w	r3, r3, #2
 8003712:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800371c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800371e:	6a3b      	ldr	r3, [r7, #32]
 8003720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003724:	2b00      	cmp	r3, #0
 8003726:	d03e      	beq.n	80037a6 <HAL_I2C_ER_IRQHandler+0xf8>
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372e:	2b00      	cmp	r3, #0
 8003730:	d039      	beq.n	80037a6 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8003732:	7efb      	ldrb	r3, [r7, #27]
 8003734:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800373a:	b29b      	uxth	r3, r3
 800373c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003744:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800374c:	7ebb      	ldrb	r3, [r7, #26]
 800374e:	2b20      	cmp	r3, #32
 8003750:	d112      	bne.n	8003778 <HAL_I2C_ER_IRQHandler+0xca>
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10f      	bne.n	8003778 <HAL_I2C_ER_IRQHandler+0xca>
 8003758:	7cfb      	ldrb	r3, [r7, #19]
 800375a:	2b21      	cmp	r3, #33	; 0x21
 800375c:	d008      	beq.n	8003770 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800375e:	7cfb      	ldrb	r3, [r7, #19]
 8003760:	2b29      	cmp	r3, #41	; 0x29
 8003762:	d005      	beq.n	8003770 <HAL_I2C_ER_IRQHandler+0xc2>
 8003764:	7cfb      	ldrb	r3, [r7, #19]
 8003766:	2b28      	cmp	r3, #40	; 0x28
 8003768:	d106      	bne.n	8003778 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2b21      	cmp	r3, #33	; 0x21
 800376e:	d103      	bne.n	8003778 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f001 f865 	bl	8004840 <I2C_Slave_AF>
 8003776:	e016      	b.n	80037a6 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003780:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	f043 0304 	orr.w	r3, r3, #4
 8003788:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800378a:	7efb      	ldrb	r3, [r7, #27]
 800378c:	2b10      	cmp	r3, #16
 800378e:	d002      	beq.n	8003796 <HAL_I2C_ER_IRQHandler+0xe8>
 8003790:	7efb      	ldrb	r3, [r7, #27]
 8003792:	2b40      	cmp	r3, #64	; 0x40
 8003794:	d107      	bne.n	80037a6 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037a4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80037a6:	6a3b      	ldr	r3, [r7, #32]
 80037a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00d      	beq.n	80037cc <HAL_I2C_ER_IRQHandler+0x11e>
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d008      	beq.n	80037cc <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80037ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037bc:	f043 0308 	orr.w	r3, r3, #8
 80037c0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80037ca:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80037cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d008      	beq.n	80037e4 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	431a      	orrs	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f001 f89e 	bl	8004920 <I2C_ITError>
  }
}
 80037e4:	bf00      	nop
 80037e6:	3728      	adds	r7, #40	; 0x28
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	460b      	mov	r3, r1
 8003846:	70fb      	strb	r3, [r7, #3]
 8003848:	4613      	mov	r3, r2
 800384a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ca:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038d2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d150      	bne.n	8003984 <I2C_MasterTransmit_TXE+0xc8>
 80038e2:	7bfb      	ldrb	r3, [r7, #15]
 80038e4:	2b21      	cmp	r3, #33	; 0x21
 80038e6:	d14d      	bne.n	8003984 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	2b08      	cmp	r3, #8
 80038ec:	d01d      	beq.n	800392a <I2C_MasterTransmit_TXE+0x6e>
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	2b20      	cmp	r3, #32
 80038f2:	d01a      	beq.n	800392a <I2C_MasterTransmit_TXE+0x6e>
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038fa:	d016      	beq.n	800392a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685a      	ldr	r2, [r3, #4]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800390a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2211      	movs	r2, #17
 8003910:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2220      	movs	r2, #32
 800391e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7ff ff62 	bl	80037ec <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003928:	e060      	b.n	80039ec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003938:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003948:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2220      	movs	r2, #32
 8003954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b40      	cmp	r3, #64	; 0x40
 8003962:	d107      	bne.n	8003974 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f7ff ff7d 	bl	800386c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003972:	e03b      	b.n	80039ec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f7ff ff35 	bl	80037ec <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003982:	e033      	b.n	80039ec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003984:	7bfb      	ldrb	r3, [r7, #15]
 8003986:	2b21      	cmp	r3, #33	; 0x21
 8003988:	d005      	beq.n	8003996 <I2C_MasterTransmit_TXE+0xda>
 800398a:	7bbb      	ldrb	r3, [r7, #14]
 800398c:	2b40      	cmp	r3, #64	; 0x40
 800398e:	d12d      	bne.n	80039ec <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003990:	7bfb      	ldrb	r3, [r7, #15]
 8003992:	2b22      	cmp	r3, #34	; 0x22
 8003994:	d12a      	bne.n	80039ec <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399a:	b29b      	uxth	r3, r3
 800399c:	2b00      	cmp	r3, #0
 800399e:	d108      	bne.n	80039b2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685a      	ldr	r2, [r3, #4]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039ae:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80039b0:	e01c      	b.n	80039ec <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b40      	cmp	r3, #64	; 0x40
 80039bc:	d103      	bne.n	80039c6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 f88e 	bl	8003ae0 <I2C_MemoryTransmit_TXE_BTF>
}
 80039c4:	e012      	b.n	80039ec <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ca:	781a      	ldrb	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d6:	1c5a      	adds	r2, r3, #1
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	3b01      	subs	r3, #1
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80039ea:	e7ff      	b.n	80039ec <I2C_MasterTransmit_TXE+0x130>
 80039ec:	bf00      	nop
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a00:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b21      	cmp	r3, #33	; 0x21
 8003a0c:	d164      	bne.n	8003ad8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d012      	beq.n	8003a3e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1c:	781a      	ldrb	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a28:	1c5a      	adds	r2, r3, #1
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	3b01      	subs	r3, #1
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003a3c:	e04c      	b.n	8003ad8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2b08      	cmp	r3, #8
 8003a42:	d01d      	beq.n	8003a80 <I2C_MasterTransmit_BTF+0x8c>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2b20      	cmp	r3, #32
 8003a48:	d01a      	beq.n	8003a80 <I2C_MasterTransmit_BTF+0x8c>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a50:	d016      	beq.n	8003a80 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	685a      	ldr	r2, [r3, #4]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a60:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2211      	movs	r2, #17
 8003a66:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2220      	movs	r2, #32
 8003a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f7ff feb7 	bl	80037ec <HAL_I2C_MasterTxCpltCallback>
}
 8003a7e:	e02b      	b.n	8003ad8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685a      	ldr	r2, [r3, #4]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a8e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a9e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2220      	movs	r2, #32
 8003aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b40      	cmp	r3, #64	; 0x40
 8003ab8:	d107      	bne.n	8003aca <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f7ff fed2 	bl	800386c <HAL_I2C_MemTxCpltCallback>
}
 8003ac8:	e006      	b.n	8003ad8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7ff fe8a 	bl	80037ec <HAL_I2C_MasterTxCpltCallback>
}
 8003ad8:	bf00      	nop
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aee:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d11d      	bne.n	8003b34 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d10b      	bne.n	8003b18 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b10:	1c9a      	adds	r2, r3, #2
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003b16:	e073      	b.n	8003c00 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	121b      	asrs	r3, r3, #8
 8003b20:	b2da      	uxtb	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b2c:	1c5a      	adds	r2, r3, #1
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003b32:	e065      	b.n	8003c00 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d10b      	bne.n	8003b54 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b40:	b2da      	uxtb	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b4c:	1c5a      	adds	r2, r3, #1
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003b52:	e055      	b.n	8003c00 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d151      	bne.n	8003c00 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003b5c:	7bfb      	ldrb	r3, [r7, #15]
 8003b5e:	2b22      	cmp	r3, #34	; 0x22
 8003b60:	d10d      	bne.n	8003b7e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b70:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b76:	1c5a      	adds	r2, r3, #1
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003b7c:	e040      	b.n	8003c00 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d015      	beq.n	8003bb4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003b88:	7bfb      	ldrb	r3, [r7, #15]
 8003b8a:	2b21      	cmp	r3, #33	; 0x21
 8003b8c:	d112      	bne.n	8003bb4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b92:	781a      	ldrb	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9e:	1c5a      	adds	r2, r3, #1
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	3b01      	subs	r3, #1
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003bb2:	e025      	b.n	8003c00 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d120      	bne.n	8003c00 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003bbe:	7bfb      	ldrb	r3, [r7, #15]
 8003bc0:	2b21      	cmp	r3, #33	; 0x21
 8003bc2:	d11d      	bne.n	8003c00 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685a      	ldr	r2, [r3, #4]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003bd2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003be2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2220      	movs	r2, #32
 8003bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f7ff fe36 	bl	800386c <HAL_I2C_MemTxCpltCallback>
}
 8003c00:	bf00      	nop
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	2b22      	cmp	r3, #34	; 0x22
 8003c1a:	f040 80ac 	bne.w	8003d76 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2b03      	cmp	r3, #3
 8003c2a:	d921      	bls.n	8003c70 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	691a      	ldr	r2, [r3, #16]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c36:	b2d2      	uxtb	r2, r2
 8003c38:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3e:	1c5a      	adds	r2, r3, #1
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	2b03      	cmp	r3, #3
 8003c5a:	f040 808c 	bne.w	8003d76 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c6c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003c6e:	e082      	b.n	8003d76 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d075      	beq.n	8003d64 <I2C_MasterReceive_RXNE+0x15c>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d002      	beq.n	8003c84 <I2C_MasterReceive_RXNE+0x7c>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d16f      	bne.n	8003d64 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f001 fb63 	bl	8005350 <I2C_WaitOnSTOPRequestThroughIT>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d142      	bne.n	8003d16 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c9e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003cae:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	691a      	ldr	r2, [r3, #16]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cba:	b2d2      	uxtb	r2, r2
 8003cbc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc2:	1c5a      	adds	r2, r3, #1
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2220      	movs	r2, #32
 8003cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b40      	cmp	r3, #64	; 0x40
 8003ce8:	d10a      	bne.n	8003d00 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f7ff fdc1 	bl	8003880 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003cfe:	e03a      	b.n	8003d76 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2212      	movs	r2, #18
 8003d0c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7ff fd76 	bl	8003800 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003d14:	e02f      	b.n	8003d76 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	685a      	ldr	r2, [r3, #4]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d24:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	691a      	ldr	r2, [r3, #16]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d30:	b2d2      	uxtb	r2, r2
 8003d32:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d38:	1c5a      	adds	r2, r3, #1
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	3b01      	subs	r3, #1
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f7ff fd99 	bl	8003894 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003d62:	e008      	b.n	8003d76 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d72:	605a      	str	r2, [r3, #4]
}
 8003d74:	e7ff      	b.n	8003d76 <I2C_MasterReceive_RXNE+0x16e>
 8003d76:	bf00      	nop
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b084      	sub	sp, #16
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	2b04      	cmp	r3, #4
 8003d94:	d11b      	bne.n	8003dce <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	685a      	ldr	r2, [r3, #4]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003da4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	691a      	ldr	r2, [r3, #16]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db0:	b2d2      	uxtb	r2, r2
 8003db2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db8:	1c5a      	adds	r2, r3, #1
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003dcc:	e0bd      	b.n	8003f4a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	2b03      	cmp	r3, #3
 8003dd6:	d129      	bne.n	8003e2c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003de6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2b04      	cmp	r3, #4
 8003dec:	d00a      	beq.n	8003e04 <I2C_MasterReceive_BTF+0x86>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d007      	beq.n	8003e04 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e02:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	691a      	ldr	r2, [r3, #16]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0e:	b2d2      	uxtb	r2, r2
 8003e10:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e16:	1c5a      	adds	r2, r3, #1
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	3b01      	subs	r3, #1
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003e2a:	e08e      	b.n	8003f4a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d176      	bne.n	8003f24 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d002      	beq.n	8003e42 <I2C_MasterReceive_BTF+0xc4>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2b10      	cmp	r3, #16
 8003e40:	d108      	bne.n	8003e54 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	e019      	b.n	8003e88 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2b04      	cmp	r3, #4
 8003e58:	d002      	beq.n	8003e60 <I2C_MasterReceive_BTF+0xe2>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d108      	bne.n	8003e72 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e6e:	601a      	str	r2, [r3, #0]
 8003e70:	e00a      	b.n	8003e88 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2b10      	cmp	r3, #16
 8003e76:	d007      	beq.n	8003e88 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e86:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	691a      	ldr	r2, [r3, #16]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	b2d2      	uxtb	r2, r2
 8003e94:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9a:	1c5a      	adds	r2, r3, #1
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	b29a      	uxth	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	691a      	ldr	r2, [r3, #16]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb8:	b2d2      	uxtb	r2, r2
 8003eba:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec0:	1c5a      	adds	r2, r3, #1
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	685a      	ldr	r2, [r3, #4]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003ee2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	2b40      	cmp	r3, #64	; 0x40
 8003ef6:	d10a      	bne.n	8003f0e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f7ff fcba 	bl	8003880 <HAL_I2C_MemRxCpltCallback>
}
 8003f0c:	e01d      	b.n	8003f4a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2212      	movs	r2, #18
 8003f1a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f7ff fc6f 	bl	8003800 <HAL_I2C_MasterRxCpltCallback>
}
 8003f22:	e012      	b.n	8003f4a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	691a      	ldr	r2, [r3, #16]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	b2d2      	uxtb	r2, r2
 8003f30:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f36:	1c5a      	adds	r2, r3, #1
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	3b01      	subs	r3, #1
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003f4a:	bf00      	nop
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003f52:	b480      	push	{r7}
 8003f54:	b083      	sub	sp, #12
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b40      	cmp	r3, #64	; 0x40
 8003f64:	d117      	bne.n	8003f96 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d109      	bne.n	8003f82 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	461a      	mov	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f7e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003f80:	e067      	b.n	8004052 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	f043 0301 	orr.w	r3, r3, #1
 8003f8c:	b2da      	uxtb	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	611a      	str	r2, [r3, #16]
}
 8003f94:	e05d      	b.n	8004052 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f9e:	d133      	bne.n	8004008 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	2b21      	cmp	r3, #33	; 0x21
 8003faa:	d109      	bne.n	8003fc0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003fbc:	611a      	str	r2, [r3, #16]
 8003fbe:	e008      	b.n	8003fd2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	f043 0301 	orr.w	r3, r3, #1
 8003fca:	b2da      	uxtb	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d004      	beq.n	8003fe4 <I2C_Master_SB+0x92>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d108      	bne.n	8003ff6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d032      	beq.n	8004052 <I2C_Master_SB+0x100>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d02d      	beq.n	8004052 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004004:	605a      	str	r2, [r3, #4]
}
 8004006:	e024      	b.n	8004052 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10e      	bne.n	800402e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004014:	b29b      	uxth	r3, r3
 8004016:	11db      	asrs	r3, r3, #7
 8004018:	b2db      	uxtb	r3, r3
 800401a:	f003 0306 	and.w	r3, r3, #6
 800401e:	b2db      	uxtb	r3, r3
 8004020:	f063 030f 	orn	r3, r3, #15
 8004024:	b2da      	uxtb	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	611a      	str	r2, [r3, #16]
}
 800402c:	e011      	b.n	8004052 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004032:	2b01      	cmp	r3, #1
 8004034:	d10d      	bne.n	8004052 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403a:	b29b      	uxth	r3, r3
 800403c:	11db      	asrs	r3, r3, #7
 800403e:	b2db      	uxtb	r3, r3
 8004040:	f003 0306 	and.w	r3, r3, #6
 8004044:	b2db      	uxtb	r3, r3
 8004046:	f063 030e 	orn	r3, r3, #14
 800404a:	b2da      	uxtb	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	611a      	str	r2, [r3, #16]
}
 8004052:	bf00      	nop
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr

0800405e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800405e:	b480      	push	{r7}
 8004060:	b083      	sub	sp, #12
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406a:	b2da      	uxtb	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004076:	2b00      	cmp	r3, #0
 8004078:	d004      	beq.n	8004084 <I2C_Master_ADD10+0x26>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800407e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004080:	2b00      	cmp	r3, #0
 8004082:	d108      	bne.n	8004096 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00c      	beq.n	80040a6 <I2C_Master_ADD10+0x48>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004092:	2b00      	cmp	r3, #0
 8004094:	d007      	beq.n	80040a6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	685a      	ldr	r2, [r3, #4]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040a4:	605a      	str	r2, [r3, #4]
  }
}
 80040a6:	bf00      	nop
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr

080040b2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80040b2:	b480      	push	{r7}
 80040b4:	b091      	sub	sp, #68	; 0x44
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ce:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2b22      	cmp	r3, #34	; 0x22
 80040da:	f040 8169 	bne.w	80043b0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10f      	bne.n	8004106 <I2C_Master_ADDR+0x54>
 80040e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80040ea:	2b40      	cmp	r3, #64	; 0x40
 80040ec:	d10b      	bne.n	8004106 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ee:	2300      	movs	r3, #0
 80040f0:	633b      	str	r3, [r7, #48]	; 0x30
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	633b      	str	r3, [r7, #48]	; 0x30
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	633b      	str	r3, [r7, #48]	; 0x30
 8004102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004104:	e160      	b.n	80043c8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800410a:	2b00      	cmp	r3, #0
 800410c:	d11d      	bne.n	800414a <I2C_Master_ADDR+0x98>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004116:	d118      	bne.n	800414a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004118:	2300      	movs	r3, #0
 800411a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800412c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800413c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004142:	1c5a      	adds	r2, r3, #1
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	651a      	str	r2, [r3, #80]	; 0x50
 8004148:	e13e      	b.n	80043c8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800414e:	b29b      	uxth	r3, r3
 8004150:	2b00      	cmp	r3, #0
 8004152:	d113      	bne.n	800417c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004154:	2300      	movs	r3, #0
 8004156:	62bb      	str	r3, [r7, #40]	; 0x28
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	62bb      	str	r3, [r7, #40]	; 0x28
 8004168:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	e115      	b.n	80043a8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004180:	b29b      	uxth	r3, r3
 8004182:	2b01      	cmp	r3, #1
 8004184:	f040 808a 	bne.w	800429c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800418a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800418e:	d137      	bne.n	8004200 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800419e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041ae:	d113      	bne.n	80041d8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041be:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041c0:	2300      	movs	r3, #0
 80041c2:	627b      	str	r3, [r7, #36]	; 0x24
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	627b      	str	r3, [r7, #36]	; 0x24
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	627b      	str	r3, [r7, #36]	; 0x24
 80041d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d6:	e0e7      	b.n	80043a8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041d8:	2300      	movs	r3, #0
 80041da:	623b      	str	r3, [r7, #32]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	623b      	str	r3, [r7, #32]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	623b      	str	r3, [r7, #32]
 80041ec:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	e0d3      	b.n	80043a8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004202:	2b08      	cmp	r3, #8
 8004204:	d02e      	beq.n	8004264 <I2C_Master_ADDR+0x1b2>
 8004206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004208:	2b20      	cmp	r3, #32
 800420a:	d02b      	beq.n	8004264 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800420c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800420e:	2b12      	cmp	r3, #18
 8004210:	d102      	bne.n	8004218 <I2C_Master_ADDR+0x166>
 8004212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004214:	2b01      	cmp	r3, #1
 8004216:	d125      	bne.n	8004264 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800421a:	2b04      	cmp	r3, #4
 800421c:	d00e      	beq.n	800423c <I2C_Master_ADDR+0x18a>
 800421e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004220:	2b02      	cmp	r3, #2
 8004222:	d00b      	beq.n	800423c <I2C_Master_ADDR+0x18a>
 8004224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004226:	2b10      	cmp	r3, #16
 8004228:	d008      	beq.n	800423c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004238:	601a      	str	r2, [r3, #0]
 800423a:	e007      	b.n	800424c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800424a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800424c:	2300      	movs	r3, #0
 800424e:	61fb      	str	r3, [r7, #28]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	61fb      	str	r3, [r7, #28]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	61fb      	str	r3, [r7, #28]
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	e0a1      	b.n	80043a8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004272:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004274:	2300      	movs	r3, #0
 8004276:	61bb      	str	r3, [r7, #24]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	61bb      	str	r3, [r7, #24]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	61bb      	str	r3, [r7, #24]
 8004288:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004298:	601a      	str	r2, [r3, #0]
 800429a:	e085      	b.n	80043a8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d14d      	bne.n	8004342 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80042a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a8:	2b04      	cmp	r3, #4
 80042aa:	d016      	beq.n	80042da <I2C_Master_ADDR+0x228>
 80042ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d013      	beq.n	80042da <I2C_Master_ADDR+0x228>
 80042b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b4:	2b10      	cmp	r3, #16
 80042b6:	d010      	beq.n	80042da <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042c6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042d6:	601a      	str	r2, [r3, #0]
 80042d8:	e007      	b.n	80042ea <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042e8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042f8:	d117      	bne.n	800432a <I2C_Master_ADDR+0x278>
 80042fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004300:	d00b      	beq.n	800431a <I2C_Master_ADDR+0x268>
 8004302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004304:	2b01      	cmp	r3, #1
 8004306:	d008      	beq.n	800431a <I2C_Master_ADDR+0x268>
 8004308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800430a:	2b08      	cmp	r3, #8
 800430c:	d005      	beq.n	800431a <I2C_Master_ADDR+0x268>
 800430e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004310:	2b10      	cmp	r3, #16
 8004312:	d002      	beq.n	800431a <I2C_Master_ADDR+0x268>
 8004314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004316:	2b20      	cmp	r3, #32
 8004318:	d107      	bne.n	800432a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	685a      	ldr	r2, [r3, #4]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004328:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800432a:	2300      	movs	r3, #0
 800432c:	617b      	str	r3, [r7, #20]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	617b      	str	r3, [r7, #20]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	617b      	str	r3, [r7, #20]
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	e032      	b.n	80043a8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004350:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800435c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004360:	d117      	bne.n	8004392 <I2C_Master_ADDR+0x2e0>
 8004362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004364:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004368:	d00b      	beq.n	8004382 <I2C_Master_ADDR+0x2d0>
 800436a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800436c:	2b01      	cmp	r3, #1
 800436e:	d008      	beq.n	8004382 <I2C_Master_ADDR+0x2d0>
 8004370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004372:	2b08      	cmp	r3, #8
 8004374:	d005      	beq.n	8004382 <I2C_Master_ADDR+0x2d0>
 8004376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004378:	2b10      	cmp	r3, #16
 800437a:	d002      	beq.n	8004382 <I2C_Master_ADDR+0x2d0>
 800437c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800437e:	2b20      	cmp	r3, #32
 8004380:	d107      	bne.n	8004392 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	685a      	ldr	r2, [r3, #4]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004390:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004392:	2300      	movs	r3, #0
 8004394:	613b      	str	r3, [r7, #16]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	613b      	str	r3, [r7, #16]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	613b      	str	r3, [r7, #16]
 80043a6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80043ae:	e00b      	b.n	80043c8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043b0:	2300      	movs	r3, #0
 80043b2:	60fb      	str	r3, [r7, #12]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	60fb      	str	r3, [r7, #12]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	60fb      	str	r3, [r7, #12]
 80043c4:	68fb      	ldr	r3, [r7, #12]
}
 80043c6:	e7ff      	b.n	80043c8 <I2C_Master_ADDR+0x316>
 80043c8:	bf00      	nop
 80043ca:	3744      	adds	r7, #68	; 0x44
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043e2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d02b      	beq.n	8004446 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f2:	781a      	ldrb	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fe:	1c5a      	adds	r2, r3, #1
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004408:	b29b      	uxth	r3, r3
 800440a:	3b01      	subs	r3, #1
 800440c:	b29a      	uxth	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004416:	b29b      	uxth	r3, r3
 8004418:	2b00      	cmp	r3, #0
 800441a:	d114      	bne.n	8004446 <I2C_SlaveTransmit_TXE+0x72>
 800441c:	7bfb      	ldrb	r3, [r7, #15]
 800441e:	2b29      	cmp	r3, #41	; 0x29
 8004420:	d111      	bne.n	8004446 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	685a      	ldr	r2, [r3, #4]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004430:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2221      	movs	r2, #33	; 0x21
 8004436:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2228      	movs	r2, #40	; 0x28
 800443c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f7ff f9e7 	bl	8003814 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004446:	bf00      	nop
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800444e:	b480      	push	{r7}
 8004450:	b083      	sub	sp, #12
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800445a:	b29b      	uxth	r3, r3
 800445c:	2b00      	cmp	r3, #0
 800445e:	d011      	beq.n	8004484 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004464:	781a      	ldrb	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004470:	1c5a      	adds	r2, r3, #1
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800447a:	b29b      	uxth	r3, r3
 800447c:	3b01      	subs	r3, #1
 800447e:	b29a      	uxth	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800449e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d02c      	beq.n	8004504 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	691a      	ldr	r2, [r3, #16]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b4:	b2d2      	uxtb	r2, r2
 80044b6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044bc:	1c5a      	adds	r2, r3, #1
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	3b01      	subs	r3, #1
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d114      	bne.n	8004504 <I2C_SlaveReceive_RXNE+0x74>
 80044da:	7bfb      	ldrb	r3, [r7, #15]
 80044dc:	2b2a      	cmp	r3, #42	; 0x2a
 80044de:	d111      	bne.n	8004504 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	685a      	ldr	r2, [r3, #4]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044ee:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2222      	movs	r2, #34	; 0x22
 80044f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2228      	movs	r2, #40	; 0x28
 80044fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f7ff f992 	bl	8003828 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004504:	bf00      	nop
 8004506:	3710      	adds	r7, #16
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004518:	b29b      	uxth	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d012      	beq.n	8004544 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	691a      	ldr	r2, [r3, #16]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004528:	b2d2      	uxtb	r2, r2
 800452a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004530:	1c5a      	adds	r2, r3, #1
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800453a:	b29b      	uxth	r3, r3
 800453c:	3b01      	subs	r3, #1
 800453e:	b29a      	uxth	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800455a:	2300      	movs	r3, #0
 800455c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004564:	b2db      	uxtb	r3, r3
 8004566:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800456a:	2b28      	cmp	r3, #40	; 0x28
 800456c:	d125      	bne.n	80045ba <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800457c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	2b00      	cmp	r3, #0
 8004586:	d101      	bne.n	800458c <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004588:	2301      	movs	r3, #1
 800458a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004592:	2b00      	cmp	r3, #0
 8004594:	d103      	bne.n	800459e <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	81bb      	strh	r3, [r7, #12]
 800459c:	e002      	b.n	80045a4 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80045ac:	89ba      	ldrh	r2, [r7, #12]
 80045ae:	7bfb      	ldrb	r3, [r7, #15]
 80045b0:	4619      	mov	r1, r3
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f7ff f942 	bl	800383c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80045b8:	e00e      	b.n	80045d8 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ba:	2300      	movs	r3, #0
 80045bc:	60bb      	str	r3, [r7, #8]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	695b      	ldr	r3, [r3, #20]
 80045c4:	60bb      	str	r3, [r7, #8]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	60bb      	str	r3, [r7, #8]
 80045ce:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80045d8:	bf00      	nop
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ee:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80045fe:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004600:	2300      	movs	r3, #0
 8004602:	60bb      	str	r3, [r7, #8]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	60bb      	str	r3, [r7, #8]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f042 0201 	orr.w	r2, r2, #1
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800462c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004638:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800463c:	d172      	bne.n	8004724 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800463e:	7bfb      	ldrb	r3, [r7, #15]
 8004640:	2b22      	cmp	r3, #34	; 0x22
 8004642:	d002      	beq.n	800464a <I2C_Slave_STOPF+0x6a>
 8004644:	7bfb      	ldrb	r3, [r7, #15]
 8004646:	2b2a      	cmp	r3, #42	; 0x2a
 8004648:	d135      	bne.n	80046b6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	b29a      	uxth	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800465c:	b29b      	uxth	r3, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d005      	beq.n	800466e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004666:	f043 0204 	orr.w	r2, r3, #4
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	685a      	ldr	r2, [r3, #4]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800467c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004682:	4618      	mov	r0, r3
 8004684:	f7fd ffb1 	bl	80025ea <HAL_DMA_GetState>
 8004688:	4603      	mov	r3, r0
 800468a:	2b01      	cmp	r3, #1
 800468c:	d049      	beq.n	8004722 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004692:	4a69      	ldr	r2, [pc, #420]	; (8004838 <I2C_Slave_STOPF+0x258>)
 8004694:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469a:	4618      	mov	r0, r3
 800469c:	f7fd ff83 	bl	80025a6 <HAL_DMA_Abort_IT>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d03d      	beq.n	8004722 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046b0:	4610      	mov	r0, r2
 80046b2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80046b4:	e035      	b.n	8004722 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	b29a      	uxth	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d005      	beq.n	80046da <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d2:	f043 0204 	orr.w	r2, r3, #4
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	685a      	ldr	r2, [r3, #4]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046e8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7fd ff7b 	bl	80025ea <HAL_DMA_GetState>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d014      	beq.n	8004724 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046fe:	4a4e      	ldr	r2, [pc, #312]	; (8004838 <I2C_Slave_STOPF+0x258>)
 8004700:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004706:	4618      	mov	r0, r3
 8004708:	f7fd ff4d 	bl	80025a6 <HAL_DMA_Abort_IT>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d008      	beq.n	8004724 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800471c:	4610      	mov	r0, r2
 800471e:	4798      	blx	r3
 8004720:	e000      	b.n	8004724 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004722:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004728:	b29b      	uxth	r3, r3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d03e      	beq.n	80047ac <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	695b      	ldr	r3, [r3, #20]
 8004734:	f003 0304 	and.w	r3, r3, #4
 8004738:	2b04      	cmp	r3, #4
 800473a:	d112      	bne.n	8004762 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	691a      	ldr	r2, [r3, #16]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004746:	b2d2      	uxtb	r2, r2
 8004748:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474e:	1c5a      	adds	r2, r3, #1
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004758:	b29b      	uxth	r3, r3
 800475a:	3b01      	subs	r3, #1
 800475c:	b29a      	uxth	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800476c:	2b40      	cmp	r3, #64	; 0x40
 800476e:	d112      	bne.n	8004796 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	691a      	ldr	r2, [r3, #16]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477a:	b2d2      	uxtb	r2, r2
 800477c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004782:	1c5a      	adds	r2, r3, #1
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800478c:	b29b      	uxth	r3, r3
 800478e:	3b01      	subs	r3, #1
 8004790:	b29a      	uxth	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800479a:	b29b      	uxth	r3, r3
 800479c:	2b00      	cmp	r3, #0
 800479e:	d005      	beq.n	80047ac <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a4:	f043 0204 	orr.w	r2, r3, #4
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d003      	beq.n	80047bc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 f8b3 	bl	8004920 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80047ba:	e039      	b.n	8004830 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80047bc:	7bfb      	ldrb	r3, [r7, #15]
 80047be:	2b2a      	cmp	r3, #42	; 0x2a
 80047c0:	d109      	bne.n	80047d6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2228      	movs	r2, #40	; 0x28
 80047cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f7ff f829 	bl	8003828 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b28      	cmp	r3, #40	; 0x28
 80047e0:	d111      	bne.n	8004806 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a15      	ldr	r2, [pc, #84]	; (800483c <I2C_Slave_STOPF+0x25c>)
 80047e6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2220      	movs	r2, #32
 80047f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f7ff f82a 	bl	8003858 <HAL_I2C_ListenCpltCallback>
}
 8004804:	e014      	b.n	8004830 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480a:	2b22      	cmp	r3, #34	; 0x22
 800480c:	d002      	beq.n	8004814 <I2C_Slave_STOPF+0x234>
 800480e:	7bfb      	ldrb	r3, [r7, #15]
 8004810:	2b22      	cmp	r3, #34	; 0x22
 8004812:	d10d      	bne.n	8004830 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2220      	movs	r2, #32
 800481e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f7fe fffc 	bl	8003828 <HAL_I2C_SlaveRxCpltCallback>
}
 8004830:	bf00      	nop
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	08004f51 	.word	0x08004f51
 800483c:	ffff0000 	.word	0xffff0000

08004840 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800484e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004854:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	2b08      	cmp	r3, #8
 800485a:	d002      	beq.n	8004862 <I2C_Slave_AF+0x22>
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	2b20      	cmp	r3, #32
 8004860:	d129      	bne.n	80048b6 <I2C_Slave_AF+0x76>
 8004862:	7bfb      	ldrb	r3, [r7, #15]
 8004864:	2b28      	cmp	r3, #40	; 0x28
 8004866:	d126      	bne.n	80048b6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a2c      	ldr	r2, [pc, #176]	; (800491c <I2C_Slave_AF+0xdc>)
 800486c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	685a      	ldr	r2, [r3, #4]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800487c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004886:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004896:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2220      	movs	r2, #32
 80048a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f7fe ffd2 	bl	8003858 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80048b4:	e02e      	b.n	8004914 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80048b6:	7bfb      	ldrb	r3, [r7, #15]
 80048b8:	2b21      	cmp	r3, #33	; 0x21
 80048ba:	d126      	bne.n	800490a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a17      	ldr	r2, [pc, #92]	; (800491c <I2C_Slave_AF+0xdc>)
 80048c0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2221      	movs	r2, #33	; 0x21
 80048c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2220      	movs	r2, #32
 80048cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	685a      	ldr	r2, [r3, #4]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048e6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048f0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004900:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7fe ff86 	bl	8003814 <HAL_I2C_SlaveTxCpltCallback>
}
 8004908:	e004      	b.n	8004914 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004912:	615a      	str	r2, [r3, #20]
}
 8004914:	bf00      	nop
 8004916:	3710      	adds	r7, #16
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	ffff0000 	.word	0xffff0000

08004920 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800492e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004936:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004938:	7bbb      	ldrb	r3, [r7, #14]
 800493a:	2b10      	cmp	r3, #16
 800493c:	d002      	beq.n	8004944 <I2C_ITError+0x24>
 800493e:	7bbb      	ldrb	r3, [r7, #14]
 8004940:	2b40      	cmp	r3, #64	; 0x40
 8004942:	d10a      	bne.n	800495a <I2C_ITError+0x3a>
 8004944:	7bfb      	ldrb	r3, [r7, #15]
 8004946:	2b22      	cmp	r3, #34	; 0x22
 8004948:	d107      	bne.n	800495a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004958:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800495a:	7bfb      	ldrb	r3, [r7, #15]
 800495c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004960:	2b28      	cmp	r3, #40	; 0x28
 8004962:	d107      	bne.n	8004974 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2228      	movs	r2, #40	; 0x28
 800496e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004972:	e015      	b.n	80049a0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800497e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004982:	d00a      	beq.n	800499a <I2C_ITError+0x7a>
 8004984:	7bfb      	ldrb	r3, [r7, #15]
 8004986:	2b60      	cmp	r3, #96	; 0x60
 8004988:	d007      	beq.n	800499a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2220      	movs	r2, #32
 800498e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049ae:	d162      	bne.n	8004a76 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	685a      	ldr	r2, [r3, #4]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049be:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d020      	beq.n	8004a10 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d2:	4a6a      	ldr	r2, [pc, #424]	; (8004b7c <I2C_ITError+0x25c>)
 80049d4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049da:	4618      	mov	r0, r3
 80049dc:	f7fd fde3 	bl	80025a6 <HAL_DMA_Abort_IT>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f000 8089 	beq.w	8004afa <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f022 0201 	bic.w	r2, r2, #1
 80049f6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2220      	movs	r2, #32
 80049fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a0a:	4610      	mov	r0, r2
 8004a0c:	4798      	blx	r3
 8004a0e:	e074      	b.n	8004afa <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a14:	4a59      	ldr	r2, [pc, #356]	; (8004b7c <I2C_ITError+0x25c>)
 8004a16:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7fd fdc2 	bl	80025a6 <HAL_DMA_Abort_IT>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d068      	beq.n	8004afa <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a32:	2b40      	cmp	r3, #64	; 0x40
 8004a34:	d10b      	bne.n	8004a4e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	691a      	ldr	r2, [r3, #16]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a40:	b2d2      	uxtb	r2, r2
 8004a42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a48:	1c5a      	adds	r2, r3, #1
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f022 0201 	bic.w	r2, r2, #1
 8004a5c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2220      	movs	r2, #32
 8004a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a70:	4610      	mov	r0, r2
 8004a72:	4798      	blx	r3
 8004a74:	e041      	b.n	8004afa <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b60      	cmp	r3, #96	; 0x60
 8004a80:	d125      	bne.n	8004ace <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2220      	movs	r2, #32
 8004a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a9a:	2b40      	cmp	r3, #64	; 0x40
 8004a9c:	d10b      	bne.n	8004ab6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	691a      	ldr	r2, [r3, #16]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	b2d2      	uxtb	r2, r2
 8004aaa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	1c5a      	adds	r2, r3, #1
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f022 0201 	bic.w	r2, r2, #1
 8004ac4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7fe feee 	bl	80038a8 <HAL_I2C_AbortCpltCallback>
 8004acc:	e015      	b.n	8004afa <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad8:	2b40      	cmp	r3, #64	; 0x40
 8004ada:	d10b      	bne.n	8004af4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	691a      	ldr	r2, [r3, #16]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae6:	b2d2      	uxtb	r2, r2
 8004ae8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aee:	1c5a      	adds	r2, r3, #1
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f7fe fecd 	bl	8003894 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afe:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10e      	bne.n	8004b28 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d109      	bne.n	8004b28 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d104      	bne.n	8004b28 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d007      	beq.n	8004b38 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685a      	ldr	r2, [r3, #4]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b36:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b3e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b44:	f003 0304 	and.w	r3, r3, #4
 8004b48:	2b04      	cmp	r3, #4
 8004b4a:	d113      	bne.n	8004b74 <I2C_ITError+0x254>
 8004b4c:	7bfb      	ldrb	r3, [r7, #15]
 8004b4e:	2b28      	cmp	r3, #40	; 0x28
 8004b50:	d110      	bne.n	8004b74 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a0a      	ldr	r2, [pc, #40]	; (8004b80 <I2C_ITError+0x260>)
 8004b56:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2220      	movs	r2, #32
 8004b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7fe fe72 	bl	8003858 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004b74:	bf00      	nop
 8004b76:	3710      	adds	r7, #16
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	08004f51 	.word	0x08004f51
 8004b80:	ffff0000 	.word	0xffff0000

08004b84 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b088      	sub	sp, #32
 8004b88:	af02      	add	r7, sp, #8
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	607a      	str	r2, [r7, #4]
 8004b8e:	603b      	str	r3, [r7, #0]
 8004b90:	460b      	mov	r3, r1
 8004b92:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b98:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	2b08      	cmp	r3, #8
 8004b9e:	d006      	beq.n	8004bae <I2C_MasterRequestWrite+0x2a>
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d003      	beq.n	8004bae <I2C_MasterRequestWrite+0x2a>
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004bac:	d108      	bne.n	8004bc0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bbc:	601a      	str	r2, [r3, #0]
 8004bbe:	e00b      	b.n	8004bd8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc4:	2b12      	cmp	r3, #18
 8004bc6:	d107      	bne.n	8004bd8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bd6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	9300      	str	r3, [sp, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 fa5b 	bl	80050a0 <I2C_WaitOnFlagUntilTimeout>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00d      	beq.n	8004c0c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bfe:	d103      	bne.n	8004c08 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e035      	b.n	8004c78 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c14:	d108      	bne.n	8004c28 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c16:	897b      	ldrh	r3, [r7, #10]
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c24:	611a      	str	r2, [r3, #16]
 8004c26:	e01b      	b.n	8004c60 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004c28:	897b      	ldrh	r3, [r7, #10]
 8004c2a:	11db      	asrs	r3, r3, #7
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	f003 0306 	and.w	r3, r3, #6
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	f063 030f 	orn	r3, r3, #15
 8004c38:	b2da      	uxtb	r2, r3
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	490e      	ldr	r1, [pc, #56]	; (8004c80 <I2C_MasterRequestWrite+0xfc>)
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f000 fa81 	bl	800514e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d001      	beq.n	8004c56 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e010      	b.n	8004c78 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004c56:	897b      	ldrh	r3, [r7, #10]
 8004c58:	b2da      	uxtb	r2, r3
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	4907      	ldr	r1, [pc, #28]	; (8004c84 <I2C_MasterRequestWrite+0x100>)
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f000 fa71 	bl	800514e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d001      	beq.n	8004c76 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e000      	b.n	8004c78 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3718      	adds	r7, #24
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	00010008 	.word	0x00010008
 8004c84:	00010002 	.word	0x00010002

08004c88 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b088      	sub	sp, #32
 8004c8c:	af02      	add	r7, sp, #8
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	607a      	str	r2, [r7, #4]
 8004c92:	603b      	str	r3, [r7, #0]
 8004c94:	460b      	mov	r3, r1
 8004c96:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004cac:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	2b08      	cmp	r3, #8
 8004cb2:	d006      	beq.n	8004cc2 <I2C_MasterRequestRead+0x3a>
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d003      	beq.n	8004cc2 <I2C_MasterRequestRead+0x3a>
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004cc0:	d108      	bne.n	8004cd4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cd0:	601a      	str	r2, [r3, #0]
 8004cd2:	e00b      	b.n	8004cec <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd8:	2b11      	cmp	r3, #17
 8004cda:	d107      	bne.n	8004cec <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	9300      	str	r3, [sp, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f000 f9d1 	bl	80050a0 <I2C_WaitOnFlagUntilTimeout>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00d      	beq.n	8004d20 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d12:	d103      	bne.n	8004d1c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e079      	b.n	8004e14 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d28:	d108      	bne.n	8004d3c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004d2a:	897b      	ldrh	r3, [r7, #10]
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	f043 0301 	orr.w	r3, r3, #1
 8004d32:	b2da      	uxtb	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	611a      	str	r2, [r3, #16]
 8004d3a:	e05f      	b.n	8004dfc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004d3c:	897b      	ldrh	r3, [r7, #10]
 8004d3e:	11db      	asrs	r3, r3, #7
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	f003 0306 	and.w	r3, r3, #6
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	f063 030f 	orn	r3, r3, #15
 8004d4c:	b2da      	uxtb	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	4930      	ldr	r1, [pc, #192]	; (8004e1c <I2C_MasterRequestRead+0x194>)
 8004d5a:	68f8      	ldr	r0, [r7, #12]
 8004d5c:	f000 f9f7 	bl	800514e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d001      	beq.n	8004d6a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e054      	b.n	8004e14 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004d6a:	897b      	ldrh	r3, [r7, #10]
 8004d6c:	b2da      	uxtb	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	4929      	ldr	r1, [pc, #164]	; (8004e20 <I2C_MasterRequestRead+0x198>)
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f000 f9e7 	bl	800514e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d001      	beq.n	8004d8a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e044      	b.n	8004e14 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	613b      	str	r3, [r7, #16]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	613b      	str	r3, [r7, #16]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	613b      	str	r3, [r7, #16]
 8004d9e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dae:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	9300      	str	r3, [sp, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004dbc:	68f8      	ldr	r0, [r7, #12]
 8004dbe:	f000 f96f 	bl	80050a0 <I2C_WaitOnFlagUntilTimeout>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00d      	beq.n	8004de4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dd6:	d103      	bne.n	8004de0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dde:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e017      	b.n	8004e14 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004de4:	897b      	ldrh	r3, [r7, #10]
 8004de6:	11db      	asrs	r3, r3, #7
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	f003 0306 	and.w	r3, r3, #6
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	f063 030e 	orn	r3, r3, #14
 8004df4:	b2da      	uxtb	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	4907      	ldr	r1, [pc, #28]	; (8004e20 <I2C_MasterRequestRead+0x198>)
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f000 f9a3 	bl	800514e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d001      	beq.n	8004e12 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e000      	b.n	8004e14 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3718      	adds	r7, #24
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	00010008 	.word	0x00010008
 8004e20:	00010002 	.word	0x00010002

08004e24 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b088      	sub	sp, #32
 8004e28:	af02      	add	r7, sp, #8
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	4608      	mov	r0, r1
 8004e2e:	4611      	mov	r1, r2
 8004e30:	461a      	mov	r2, r3
 8004e32:	4603      	mov	r3, r0
 8004e34:	817b      	strh	r3, [r7, #10]
 8004e36:	460b      	mov	r3, r1
 8004e38:	813b      	strh	r3, [r7, #8]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e4c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e50:	9300      	str	r3, [sp, #0]
 8004e52:	6a3b      	ldr	r3, [r7, #32]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f000 f920 	bl	80050a0 <I2C_WaitOnFlagUntilTimeout>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00d      	beq.n	8004e82 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e74:	d103      	bne.n	8004e7e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e7c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e05f      	b.n	8004f42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e82:	897b      	ldrh	r3, [r7, #10]
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	461a      	mov	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e90:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e94:	6a3a      	ldr	r2, [r7, #32]
 8004e96:	492d      	ldr	r1, [pc, #180]	; (8004f4c <I2C_RequestMemoryWrite+0x128>)
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f000 f958 	bl	800514e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d001      	beq.n	8004ea8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e04c      	b.n	8004f42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	617b      	str	r3, [r7, #20]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	617b      	str	r3, [r7, #20]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	617b      	str	r3, [r7, #20]
 8004ebc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ec0:	6a39      	ldr	r1, [r7, #32]
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	f000 f9c2 	bl	800524c <I2C_WaitOnTXEFlagUntilTimeout>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00d      	beq.n	8004eea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed2:	2b04      	cmp	r3, #4
 8004ed4:	d107      	bne.n	8004ee6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ee4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e02b      	b.n	8004f42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004eea:	88fb      	ldrh	r3, [r7, #6]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d105      	bne.n	8004efc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ef0:	893b      	ldrh	r3, [r7, #8]
 8004ef2:	b2da      	uxtb	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	611a      	str	r2, [r3, #16]
 8004efa:	e021      	b.n	8004f40 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004efc:	893b      	ldrh	r3, [r7, #8]
 8004efe:	0a1b      	lsrs	r3, r3, #8
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	b2da      	uxtb	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f0c:	6a39      	ldr	r1, [r7, #32]
 8004f0e:	68f8      	ldr	r0, [r7, #12]
 8004f10:	f000 f99c 	bl	800524c <I2C_WaitOnTXEFlagUntilTimeout>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00d      	beq.n	8004f36 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1e:	2b04      	cmp	r3, #4
 8004f20:	d107      	bne.n	8004f32 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f30:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e005      	b.n	8004f42 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f36:	893b      	ldrh	r3, [r7, #8]
 8004f38:	b2da      	uxtb	r2, r3
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3718      	adds	r7, #24
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	00010002 	.word	0x00010002

08004f50 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f60:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f68:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004f6a:	4b4b      	ldr	r3, [pc, #300]	; (8005098 <I2C_DMAAbort+0x148>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	08db      	lsrs	r3, r3, #3
 8004f70:	4a4a      	ldr	r2, [pc, #296]	; (800509c <I2C_DMAAbort+0x14c>)
 8004f72:	fba2 2303 	umull	r2, r3, r2, r3
 8004f76:	0a1a      	lsrs	r2, r3, #8
 8004f78:	4613      	mov	r3, r2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	4413      	add	r3, r2
 8004f7e:	00da      	lsls	r2, r3, #3
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d106      	bne.n	8004f98 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8e:	f043 0220 	orr.w	r2, r3, #32
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004f96:	e00a      	b.n	8004fae <I2C_DMAAbort+0x5e>
    }
    count--;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fac:	d0ea      	beq.n	8004f84 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d003      	beq.n	8004fbe <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fba:	2200      	movs	r2, #0
 8004fbc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d003      	beq.n	8004fce <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fca:	2200      	movs	r2, #0
 8004fcc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fdc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d003      	beq.n	8004ff4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d003      	beq.n	8005004 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005000:	2200      	movs	r2, #0
 8005002:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f022 0201 	bic.w	r2, r2, #1
 8005012:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b60      	cmp	r3, #96	; 0x60
 800501e:	d10e      	bne.n	800503e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	2220      	movs	r2, #32
 8005024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	2200      	movs	r2, #0
 8005034:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005036:	6978      	ldr	r0, [r7, #20]
 8005038:	f7fe fc36 	bl	80038a8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800503c:	e027      	b.n	800508e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800503e:	7cfb      	ldrb	r3, [r7, #19]
 8005040:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005044:	2b28      	cmp	r3, #40	; 0x28
 8005046:	d117      	bne.n	8005078 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f042 0201 	orr.w	r2, r2, #1
 8005056:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005066:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	2200      	movs	r2, #0
 800506c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	2228      	movs	r2, #40	; 0x28
 8005072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005076:	e007      	b.n	8005088 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	2220      	movs	r2, #32
 800507c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005088:	6978      	ldr	r0, [r7, #20]
 800508a:	f7fe fc03 	bl	8003894 <HAL_I2C_ErrorCallback>
}
 800508e:	bf00      	nop
 8005090:	3718      	adds	r7, #24
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	20000008 	.word	0x20000008
 800509c:	14f8b589 	.word	0x14f8b589

080050a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	603b      	str	r3, [r7, #0]
 80050ac:	4613      	mov	r3, r2
 80050ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050b0:	e025      	b.n	80050fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b8:	d021      	beq.n	80050fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ba:	f7fd f8c3 	bl	8002244 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	683a      	ldr	r2, [r7, #0]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d302      	bcc.n	80050d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d116      	bne.n	80050fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2220      	movs	r2, #32
 80050da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ea:	f043 0220 	orr.w	r2, r3, #32
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e023      	b.n	8005146 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	0c1b      	lsrs	r3, r3, #16
 8005102:	b2db      	uxtb	r3, r3
 8005104:	2b01      	cmp	r3, #1
 8005106:	d10d      	bne.n	8005124 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	43da      	mvns	r2, r3
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	4013      	ands	r3, r2
 8005114:	b29b      	uxth	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	bf0c      	ite	eq
 800511a:	2301      	moveq	r3, #1
 800511c:	2300      	movne	r3, #0
 800511e:	b2db      	uxtb	r3, r3
 8005120:	461a      	mov	r2, r3
 8005122:	e00c      	b.n	800513e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	43da      	mvns	r2, r3
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	4013      	ands	r3, r2
 8005130:	b29b      	uxth	r3, r3
 8005132:	2b00      	cmp	r3, #0
 8005134:	bf0c      	ite	eq
 8005136:	2301      	moveq	r3, #1
 8005138:	2300      	movne	r3, #0
 800513a:	b2db      	uxtb	r3, r3
 800513c:	461a      	mov	r2, r3
 800513e:	79fb      	ldrb	r3, [r7, #7]
 8005140:	429a      	cmp	r2, r3
 8005142:	d0b6      	beq.n	80050b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b084      	sub	sp, #16
 8005152:	af00      	add	r7, sp, #0
 8005154:	60f8      	str	r0, [r7, #12]
 8005156:	60b9      	str	r1, [r7, #8]
 8005158:	607a      	str	r2, [r7, #4]
 800515a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800515c:	e051      	b.n	8005202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	695b      	ldr	r3, [r3, #20]
 8005164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005168:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800516c:	d123      	bne.n	80051b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800517c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005186:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2200      	movs	r2, #0
 800518c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2220      	movs	r2, #32
 8005192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a2:	f043 0204 	orr.w	r2, r3, #4
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e046      	b.n	8005244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051bc:	d021      	beq.n	8005202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051be:	f7fd f841 	bl	8002244 <HAL_GetTick>
 80051c2:	4602      	mov	r2, r0
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d302      	bcc.n	80051d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d116      	bne.n	8005202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2200      	movs	r2, #0
 80051d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2220      	movs	r2, #32
 80051de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ee:	f043 0220 	orr.w	r2, r3, #32
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e020      	b.n	8005244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	0c1b      	lsrs	r3, r3, #16
 8005206:	b2db      	uxtb	r3, r3
 8005208:	2b01      	cmp	r3, #1
 800520a:	d10c      	bne.n	8005226 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	43da      	mvns	r2, r3
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	4013      	ands	r3, r2
 8005218:	b29b      	uxth	r3, r3
 800521a:	2b00      	cmp	r3, #0
 800521c:	bf14      	ite	ne
 800521e:	2301      	movne	r3, #1
 8005220:	2300      	moveq	r3, #0
 8005222:	b2db      	uxtb	r3, r3
 8005224:	e00b      	b.n	800523e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	43da      	mvns	r2, r3
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	4013      	ands	r3, r2
 8005232:	b29b      	uxth	r3, r3
 8005234:	2b00      	cmp	r3, #0
 8005236:	bf14      	ite	ne
 8005238:	2301      	movne	r3, #1
 800523a:	2300      	moveq	r3, #0
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d18d      	bne.n	800515e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3710      	adds	r7, #16
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005258:	e02d      	b.n	80052b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f000 f900 	bl	8005460 <I2C_IsAcknowledgeFailed>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d001      	beq.n	800526a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e02d      	b.n	80052c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005270:	d021      	beq.n	80052b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005272:	f7fc ffe7 	bl	8002244 <HAL_GetTick>
 8005276:	4602      	mov	r2, r0
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	429a      	cmp	r2, r3
 8005280:	d302      	bcc.n	8005288 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d116      	bne.n	80052b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2200      	movs	r2, #0
 800528c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2220      	movs	r2, #32
 8005292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a2:	f043 0220 	orr.w	r2, r3, #32
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e007      	b.n	80052c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	695b      	ldr	r3, [r3, #20]
 80052bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052c0:	2b80      	cmp	r3, #128	; 0x80
 80052c2:	d1ca      	bne.n	800525a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b084      	sub	sp, #16
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	60f8      	str	r0, [r7, #12]
 80052d6:	60b9      	str	r1, [r7, #8]
 80052d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052da:	e02d      	b.n	8005338 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f000 f8bf 	bl	8005460 <I2C_IsAcknowledgeFailed>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d001      	beq.n	80052ec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e02d      	b.n	8005348 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f2:	d021      	beq.n	8005338 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052f4:	f7fc ffa6 	bl	8002244 <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	68ba      	ldr	r2, [r7, #8]
 8005300:	429a      	cmp	r2, r3
 8005302:	d302      	bcc.n	800530a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d116      	bne.n	8005338 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2220      	movs	r2, #32
 8005314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005324:	f043 0220 	orr.w	r2, r3, #32
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e007      	b.n	8005348 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	f003 0304 	and.w	r3, r3, #4
 8005342:	2b04      	cmp	r3, #4
 8005344:	d1ca      	bne.n	80052dc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3710      	adds	r7, #16
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005358:	2300      	movs	r3, #0
 800535a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800535c:	4b13      	ldr	r3, [pc, #76]	; (80053ac <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	08db      	lsrs	r3, r3, #3
 8005362:	4a13      	ldr	r2, [pc, #76]	; (80053b0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005364:	fba2 2303 	umull	r2, r3, r2, r3
 8005368:	0a1a      	lsrs	r2, r3, #8
 800536a:	4613      	mov	r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	4413      	add	r3, r2
 8005370:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	3b01      	subs	r3, #1
 8005376:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d107      	bne.n	800538e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005382:	f043 0220 	orr.w	r2, r3, #32
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e008      	b.n	80053a0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005398:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800539c:	d0e9      	beq.n	8005372 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3714      	adds	r7, #20
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr
 80053ac:	20000008 	.word	0x20000008
 80053b0:	14f8b589 	.word	0x14f8b589

080053b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053c0:	e042      	b.n	8005448 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	f003 0310 	and.w	r3, r3, #16
 80053cc:	2b10      	cmp	r3, #16
 80053ce:	d119      	bne.n	8005404 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f06f 0210 	mvn.w	r2, #16
 80053d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2220      	movs	r2, #32
 80053e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e029      	b.n	8005458 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005404:	f7fc ff1e 	bl	8002244 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	68ba      	ldr	r2, [r7, #8]
 8005410:	429a      	cmp	r2, r3
 8005412:	d302      	bcc.n	800541a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d116      	bne.n	8005448 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2220      	movs	r2, #32
 8005424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005434:	f043 0220 	orr.w	r2, r3, #32
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e007      	b.n	8005458 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005452:	2b40      	cmp	r3, #64	; 0x40
 8005454:	d1b5      	bne.n	80053c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	3710      	adds	r7, #16
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005472:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005476:	d11b      	bne.n	80054b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005480:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2220      	movs	r2, #32
 800548c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549c:	f043 0204 	orr.w	r2, r3, #4
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e000      	b.n	80054b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	370c      	adds	r7, #12
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr

080054be <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80054be:	b480      	push	{r7}
 80054c0:	b083      	sub	sp, #12
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ca:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80054ce:	d103      	bne.n	80054d8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80054d6:	e007      	b.n	80054e8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054dc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80054e0:	d102      	bne.n	80054e8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2208      	movs	r2, #8
 80054e6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80054e8:	bf00      	nop
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b086      	sub	sp, #24
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d101      	bne.n	8005506 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e267      	b.n	80059d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b00      	cmp	r3, #0
 8005510:	d075      	beq.n	80055fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005512:	4b88      	ldr	r3, [pc, #544]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f003 030c 	and.w	r3, r3, #12
 800551a:	2b04      	cmp	r3, #4
 800551c:	d00c      	beq.n	8005538 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800551e:	4b85      	ldr	r3, [pc, #532]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005526:	2b08      	cmp	r3, #8
 8005528:	d112      	bne.n	8005550 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800552a:	4b82      	ldr	r3, [pc, #520]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005532:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005536:	d10b      	bne.n	8005550 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005538:	4b7e      	ldr	r3, [pc, #504]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d05b      	beq.n	80055fc <HAL_RCC_OscConfig+0x108>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d157      	bne.n	80055fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e242      	b.n	80059d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005558:	d106      	bne.n	8005568 <HAL_RCC_OscConfig+0x74>
 800555a:	4b76      	ldr	r3, [pc, #472]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a75      	ldr	r2, [pc, #468]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 8005560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005564:	6013      	str	r3, [r2, #0]
 8005566:	e01d      	b.n	80055a4 <HAL_RCC_OscConfig+0xb0>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005570:	d10c      	bne.n	800558c <HAL_RCC_OscConfig+0x98>
 8005572:	4b70      	ldr	r3, [pc, #448]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a6f      	ldr	r2, [pc, #444]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 8005578:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800557c:	6013      	str	r3, [r2, #0]
 800557e:	4b6d      	ldr	r3, [pc, #436]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a6c      	ldr	r2, [pc, #432]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 8005584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005588:	6013      	str	r3, [r2, #0]
 800558a:	e00b      	b.n	80055a4 <HAL_RCC_OscConfig+0xb0>
 800558c:	4b69      	ldr	r3, [pc, #420]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a68      	ldr	r2, [pc, #416]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 8005592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005596:	6013      	str	r3, [r2, #0]
 8005598:	4b66      	ldr	r3, [pc, #408]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a65      	ldr	r2, [pc, #404]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 800559e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d013      	beq.n	80055d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055ac:	f7fc fe4a 	bl	8002244 <HAL_GetTick>
 80055b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055b2:	e008      	b.n	80055c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055b4:	f7fc fe46 	bl	8002244 <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	2b64      	cmp	r3, #100	; 0x64
 80055c0:	d901      	bls.n	80055c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e207      	b.n	80059d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055c6:	4b5b      	ldr	r3, [pc, #364]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d0f0      	beq.n	80055b4 <HAL_RCC_OscConfig+0xc0>
 80055d2:	e014      	b.n	80055fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055d4:	f7fc fe36 	bl	8002244 <HAL_GetTick>
 80055d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055da:	e008      	b.n	80055ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055dc:	f7fc fe32 	bl	8002244 <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	2b64      	cmp	r3, #100	; 0x64
 80055e8:	d901      	bls.n	80055ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e1f3      	b.n	80059d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055ee:	4b51      	ldr	r3, [pc, #324]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1f0      	bne.n	80055dc <HAL_RCC_OscConfig+0xe8>
 80055fa:	e000      	b.n	80055fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	2b00      	cmp	r3, #0
 8005608:	d063      	beq.n	80056d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800560a:	4b4a      	ldr	r3, [pc, #296]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f003 030c 	and.w	r3, r3, #12
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00b      	beq.n	800562e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005616:	4b47      	ldr	r3, [pc, #284]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800561e:	2b08      	cmp	r3, #8
 8005620:	d11c      	bne.n	800565c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005622:	4b44      	ldr	r3, [pc, #272]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d116      	bne.n	800565c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800562e:	4b41      	ldr	r3, [pc, #260]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0302 	and.w	r3, r3, #2
 8005636:	2b00      	cmp	r3, #0
 8005638:	d005      	beq.n	8005646 <HAL_RCC_OscConfig+0x152>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	2b01      	cmp	r3, #1
 8005640:	d001      	beq.n	8005646 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e1c7      	b.n	80059d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005646:	4b3b      	ldr	r3, [pc, #236]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	00db      	lsls	r3, r3, #3
 8005654:	4937      	ldr	r1, [pc, #220]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 8005656:	4313      	orrs	r3, r2
 8005658:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800565a:	e03a      	b.n	80056d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d020      	beq.n	80056a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005664:	4b34      	ldr	r3, [pc, #208]	; (8005738 <HAL_RCC_OscConfig+0x244>)
 8005666:	2201      	movs	r2, #1
 8005668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800566a:	f7fc fdeb 	bl	8002244 <HAL_GetTick>
 800566e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005670:	e008      	b.n	8005684 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005672:	f7fc fde7 	bl	8002244 <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	2b02      	cmp	r3, #2
 800567e:	d901      	bls.n	8005684 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e1a8      	b.n	80059d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005684:	4b2b      	ldr	r3, [pc, #172]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0302 	and.w	r3, r3, #2
 800568c:	2b00      	cmp	r3, #0
 800568e:	d0f0      	beq.n	8005672 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005690:	4b28      	ldr	r3, [pc, #160]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	00db      	lsls	r3, r3, #3
 800569e:	4925      	ldr	r1, [pc, #148]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	600b      	str	r3, [r1, #0]
 80056a4:	e015      	b.n	80056d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056a6:	4b24      	ldr	r3, [pc, #144]	; (8005738 <HAL_RCC_OscConfig+0x244>)
 80056a8:	2200      	movs	r2, #0
 80056aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ac:	f7fc fdca 	bl	8002244 <HAL_GetTick>
 80056b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056b2:	e008      	b.n	80056c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056b4:	f7fc fdc6 	bl	8002244 <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d901      	bls.n	80056c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e187      	b.n	80059d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056c6:	4b1b      	ldr	r3, [pc, #108]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0302 	and.w	r3, r3, #2
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1f0      	bne.n	80056b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0308 	and.w	r3, r3, #8
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d036      	beq.n	800574c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d016      	beq.n	8005714 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056e6:	4b15      	ldr	r3, [pc, #84]	; (800573c <HAL_RCC_OscConfig+0x248>)
 80056e8:	2201      	movs	r2, #1
 80056ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ec:	f7fc fdaa 	bl	8002244 <HAL_GetTick>
 80056f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056f2:	e008      	b.n	8005706 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056f4:	f7fc fda6 	bl	8002244 <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d901      	bls.n	8005706 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e167      	b.n	80059d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005706:	4b0b      	ldr	r3, [pc, #44]	; (8005734 <HAL_RCC_OscConfig+0x240>)
 8005708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800570a:	f003 0302 	and.w	r3, r3, #2
 800570e:	2b00      	cmp	r3, #0
 8005710:	d0f0      	beq.n	80056f4 <HAL_RCC_OscConfig+0x200>
 8005712:	e01b      	b.n	800574c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005714:	4b09      	ldr	r3, [pc, #36]	; (800573c <HAL_RCC_OscConfig+0x248>)
 8005716:	2200      	movs	r2, #0
 8005718:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800571a:	f7fc fd93 	bl	8002244 <HAL_GetTick>
 800571e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005720:	e00e      	b.n	8005740 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005722:	f7fc fd8f 	bl	8002244 <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	2b02      	cmp	r3, #2
 800572e:	d907      	bls.n	8005740 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e150      	b.n	80059d6 <HAL_RCC_OscConfig+0x4e2>
 8005734:	40023800 	.word	0x40023800
 8005738:	42470000 	.word	0x42470000
 800573c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005740:	4b88      	ldr	r3, [pc, #544]	; (8005964 <HAL_RCC_OscConfig+0x470>)
 8005742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005744:	f003 0302 	and.w	r3, r3, #2
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1ea      	bne.n	8005722 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0304 	and.w	r3, r3, #4
 8005754:	2b00      	cmp	r3, #0
 8005756:	f000 8097 	beq.w	8005888 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800575a:	2300      	movs	r3, #0
 800575c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800575e:	4b81      	ldr	r3, [pc, #516]	; (8005964 <HAL_RCC_OscConfig+0x470>)
 8005760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10f      	bne.n	800578a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800576a:	2300      	movs	r3, #0
 800576c:	60bb      	str	r3, [r7, #8]
 800576e:	4b7d      	ldr	r3, [pc, #500]	; (8005964 <HAL_RCC_OscConfig+0x470>)
 8005770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005772:	4a7c      	ldr	r2, [pc, #496]	; (8005964 <HAL_RCC_OscConfig+0x470>)
 8005774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005778:	6413      	str	r3, [r2, #64]	; 0x40
 800577a:	4b7a      	ldr	r3, [pc, #488]	; (8005964 <HAL_RCC_OscConfig+0x470>)
 800577c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005782:	60bb      	str	r3, [r7, #8]
 8005784:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005786:	2301      	movs	r3, #1
 8005788:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800578a:	4b77      	ldr	r3, [pc, #476]	; (8005968 <HAL_RCC_OscConfig+0x474>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005792:	2b00      	cmp	r3, #0
 8005794:	d118      	bne.n	80057c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005796:	4b74      	ldr	r3, [pc, #464]	; (8005968 <HAL_RCC_OscConfig+0x474>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a73      	ldr	r2, [pc, #460]	; (8005968 <HAL_RCC_OscConfig+0x474>)
 800579c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057a2:	f7fc fd4f 	bl	8002244 <HAL_GetTick>
 80057a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057a8:	e008      	b.n	80057bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057aa:	f7fc fd4b 	bl	8002244 <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d901      	bls.n	80057bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e10c      	b.n	80059d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057bc:	4b6a      	ldr	r3, [pc, #424]	; (8005968 <HAL_RCC_OscConfig+0x474>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d0f0      	beq.n	80057aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d106      	bne.n	80057de <HAL_RCC_OscConfig+0x2ea>
 80057d0:	4b64      	ldr	r3, [pc, #400]	; (8005964 <HAL_RCC_OscConfig+0x470>)
 80057d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d4:	4a63      	ldr	r2, [pc, #396]	; (8005964 <HAL_RCC_OscConfig+0x470>)
 80057d6:	f043 0301 	orr.w	r3, r3, #1
 80057da:	6713      	str	r3, [r2, #112]	; 0x70
 80057dc:	e01c      	b.n	8005818 <HAL_RCC_OscConfig+0x324>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	2b05      	cmp	r3, #5
 80057e4:	d10c      	bne.n	8005800 <HAL_RCC_OscConfig+0x30c>
 80057e6:	4b5f      	ldr	r3, [pc, #380]	; (8005964 <HAL_RCC_OscConfig+0x470>)
 80057e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ea:	4a5e      	ldr	r2, [pc, #376]	; (8005964 <HAL_RCC_OscConfig+0x470>)
 80057ec:	f043 0304 	orr.w	r3, r3, #4
 80057f0:	6713      	str	r3, [r2, #112]	; 0x70
 80057f2:	4b5c      	ldr	r3, [pc, #368]	; (8005964 <HAL_RCC_OscConfig+0x470>)
 80057f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f6:	4a5b      	ldr	r2, [pc, #364]	; (8005964 <HAL_RCC_OscConfig+0x470>)
 80057f8:	f043 0301 	orr.w	r3, r3, #1
 80057fc:	6713      	str	r3, [r2, #112]	; 0x70
 80057fe:	e00b      	b.n	8005818 <HAL_RCC_OscConfig+0x324>
 8005800:	4b58      	ldr	r3, [pc, #352]	; (8005964 <HAL_RCC_OscConfig+0x470>)
 8005802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005804:	4a57      	ldr	r2, [pc, #348]	; (8005964 <HAL_RCC_OscConfig+0x470>)
 8005806:	f023 0301 	bic.w	r3, r3, #1
 800580a:	6713      	str	r3, [r2, #112]	; 0x70
 800580c:	4b55      	ldr	r3, [pc, #340]	; (8005964 <HAL_RCC_OscConfig+0x470>)
 800580e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005810:	4a54      	ldr	r2, [pc, #336]	; (8005964 <HAL_RCC_OscConfig+0x470>)
 8005812:	f023 0304 	bic.w	r3, r3, #4
 8005816:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d015      	beq.n	800584c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005820:	f7fc fd10 	bl	8002244 <HAL_GetTick>
 8005824:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005826:	e00a      	b.n	800583e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005828:	f7fc fd0c 	bl	8002244 <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	f241 3288 	movw	r2, #5000	; 0x1388
 8005836:	4293      	cmp	r3, r2
 8005838:	d901      	bls.n	800583e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e0cb      	b.n	80059d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800583e:	4b49      	ldr	r3, [pc, #292]	; (8005964 <HAL_RCC_OscConfig+0x470>)
 8005840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005842:	f003 0302 	and.w	r3, r3, #2
 8005846:	2b00      	cmp	r3, #0
 8005848:	d0ee      	beq.n	8005828 <HAL_RCC_OscConfig+0x334>
 800584a:	e014      	b.n	8005876 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800584c:	f7fc fcfa 	bl	8002244 <HAL_GetTick>
 8005850:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005852:	e00a      	b.n	800586a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005854:	f7fc fcf6 	bl	8002244 <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005862:	4293      	cmp	r3, r2
 8005864:	d901      	bls.n	800586a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e0b5      	b.n	80059d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800586a:	4b3e      	ldr	r3, [pc, #248]	; (8005964 <HAL_RCC_OscConfig+0x470>)
 800586c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800586e:	f003 0302 	and.w	r3, r3, #2
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1ee      	bne.n	8005854 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005876:	7dfb      	ldrb	r3, [r7, #23]
 8005878:	2b01      	cmp	r3, #1
 800587a:	d105      	bne.n	8005888 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800587c:	4b39      	ldr	r3, [pc, #228]	; (8005964 <HAL_RCC_OscConfig+0x470>)
 800587e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005880:	4a38      	ldr	r2, [pc, #224]	; (8005964 <HAL_RCC_OscConfig+0x470>)
 8005882:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005886:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	699b      	ldr	r3, [r3, #24]
 800588c:	2b00      	cmp	r3, #0
 800588e:	f000 80a1 	beq.w	80059d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005892:	4b34      	ldr	r3, [pc, #208]	; (8005964 <HAL_RCC_OscConfig+0x470>)
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f003 030c 	and.w	r3, r3, #12
 800589a:	2b08      	cmp	r3, #8
 800589c:	d05c      	beq.n	8005958 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d141      	bne.n	800592a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058a6:	4b31      	ldr	r3, [pc, #196]	; (800596c <HAL_RCC_OscConfig+0x478>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ac:	f7fc fcca 	bl	8002244 <HAL_GetTick>
 80058b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058b2:	e008      	b.n	80058c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058b4:	f7fc fcc6 	bl	8002244 <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d901      	bls.n	80058c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e087      	b.n	80059d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058c6:	4b27      	ldr	r3, [pc, #156]	; (8005964 <HAL_RCC_OscConfig+0x470>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1f0      	bne.n	80058b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	69da      	ldr	r2, [r3, #28]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a1b      	ldr	r3, [r3, #32]
 80058da:	431a      	orrs	r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e0:	019b      	lsls	r3, r3, #6
 80058e2:	431a      	orrs	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e8:	085b      	lsrs	r3, r3, #1
 80058ea:	3b01      	subs	r3, #1
 80058ec:	041b      	lsls	r3, r3, #16
 80058ee:	431a      	orrs	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f4:	061b      	lsls	r3, r3, #24
 80058f6:	491b      	ldr	r1, [pc, #108]	; (8005964 <HAL_RCC_OscConfig+0x470>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058fc:	4b1b      	ldr	r3, [pc, #108]	; (800596c <HAL_RCC_OscConfig+0x478>)
 80058fe:	2201      	movs	r2, #1
 8005900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005902:	f7fc fc9f 	bl	8002244 <HAL_GetTick>
 8005906:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005908:	e008      	b.n	800591c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800590a:	f7fc fc9b 	bl	8002244 <HAL_GetTick>
 800590e:	4602      	mov	r2, r0
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	2b02      	cmp	r3, #2
 8005916:	d901      	bls.n	800591c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	e05c      	b.n	80059d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800591c:	4b11      	ldr	r3, [pc, #68]	; (8005964 <HAL_RCC_OscConfig+0x470>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005924:	2b00      	cmp	r3, #0
 8005926:	d0f0      	beq.n	800590a <HAL_RCC_OscConfig+0x416>
 8005928:	e054      	b.n	80059d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800592a:	4b10      	ldr	r3, [pc, #64]	; (800596c <HAL_RCC_OscConfig+0x478>)
 800592c:	2200      	movs	r2, #0
 800592e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005930:	f7fc fc88 	bl	8002244 <HAL_GetTick>
 8005934:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005936:	e008      	b.n	800594a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005938:	f7fc fc84 	bl	8002244 <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	2b02      	cmp	r3, #2
 8005944:	d901      	bls.n	800594a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e045      	b.n	80059d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800594a:	4b06      	ldr	r3, [pc, #24]	; (8005964 <HAL_RCC_OscConfig+0x470>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1f0      	bne.n	8005938 <HAL_RCC_OscConfig+0x444>
 8005956:	e03d      	b.n	80059d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	699b      	ldr	r3, [r3, #24]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d107      	bne.n	8005970 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e038      	b.n	80059d6 <HAL_RCC_OscConfig+0x4e2>
 8005964:	40023800 	.word	0x40023800
 8005968:	40007000 	.word	0x40007000
 800596c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005970:	4b1b      	ldr	r3, [pc, #108]	; (80059e0 <HAL_RCC_OscConfig+0x4ec>)
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d028      	beq.n	80059d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005988:	429a      	cmp	r2, r3
 800598a:	d121      	bne.n	80059d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005996:	429a      	cmp	r2, r3
 8005998:	d11a      	bne.n	80059d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80059a0:	4013      	ands	r3, r2
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80059a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d111      	bne.n	80059d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b6:	085b      	lsrs	r3, r3, #1
 80059b8:	3b01      	subs	r3, #1
 80059ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059bc:	429a      	cmp	r2, r3
 80059be:	d107      	bne.n	80059d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d001      	beq.n	80059d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e000      	b.n	80059d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3718      	adds	r7, #24
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	40023800 	.word	0x40023800

080059e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d101      	bne.n	80059f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e0cc      	b.n	8005b92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059f8:	4b68      	ldr	r3, [pc, #416]	; (8005b9c <HAL_RCC_ClockConfig+0x1b8>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0307 	and.w	r3, r3, #7
 8005a00:	683a      	ldr	r2, [r7, #0]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d90c      	bls.n	8005a20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a06:	4b65      	ldr	r3, [pc, #404]	; (8005b9c <HAL_RCC_ClockConfig+0x1b8>)
 8005a08:	683a      	ldr	r2, [r7, #0]
 8005a0a:	b2d2      	uxtb	r2, r2
 8005a0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a0e:	4b63      	ldr	r3, [pc, #396]	; (8005b9c <HAL_RCC_ClockConfig+0x1b8>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0307 	and.w	r3, r3, #7
 8005a16:	683a      	ldr	r2, [r7, #0]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d001      	beq.n	8005a20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e0b8      	b.n	8005b92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0302 	and.w	r3, r3, #2
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d020      	beq.n	8005a6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0304 	and.w	r3, r3, #4
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d005      	beq.n	8005a44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a38:	4b59      	ldr	r3, [pc, #356]	; (8005ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	4a58      	ldr	r2, [pc, #352]	; (8005ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0308 	and.w	r3, r3, #8
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d005      	beq.n	8005a5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a50:	4b53      	ldr	r3, [pc, #332]	; (8005ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	4a52      	ldr	r2, [pc, #328]	; (8005ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a5c:	4b50      	ldr	r3, [pc, #320]	; (8005ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	494d      	ldr	r1, [pc, #308]	; (8005ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d044      	beq.n	8005b04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d107      	bne.n	8005a92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a82:	4b47      	ldr	r3, [pc, #284]	; (8005ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d119      	bne.n	8005ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e07f      	b.n	8005b92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d003      	beq.n	8005aa2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a9e:	2b03      	cmp	r3, #3
 8005aa0:	d107      	bne.n	8005ab2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005aa2:	4b3f      	ldr	r3, [pc, #252]	; (8005ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d109      	bne.n	8005ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e06f      	b.n	8005b92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ab2:	4b3b      	ldr	r3, [pc, #236]	; (8005ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0302 	and.w	r3, r3, #2
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d101      	bne.n	8005ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e067      	b.n	8005b92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ac2:	4b37      	ldr	r3, [pc, #220]	; (8005ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	f023 0203 	bic.w	r2, r3, #3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	4934      	ldr	r1, [pc, #208]	; (8005ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ad4:	f7fc fbb6 	bl	8002244 <HAL_GetTick>
 8005ad8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ada:	e00a      	b.n	8005af2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005adc:	f7fc fbb2 	bl	8002244 <HAL_GetTick>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d901      	bls.n	8005af2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e04f      	b.n	8005b92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005af2:	4b2b      	ldr	r3, [pc, #172]	; (8005ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f003 020c 	and.w	r2, r3, #12
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d1eb      	bne.n	8005adc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b04:	4b25      	ldr	r3, [pc, #148]	; (8005b9c <HAL_RCC_ClockConfig+0x1b8>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0307 	and.w	r3, r3, #7
 8005b0c:	683a      	ldr	r2, [r7, #0]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d20c      	bcs.n	8005b2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b12:	4b22      	ldr	r3, [pc, #136]	; (8005b9c <HAL_RCC_ClockConfig+0x1b8>)
 8005b14:	683a      	ldr	r2, [r7, #0]
 8005b16:	b2d2      	uxtb	r2, r2
 8005b18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b1a:	4b20      	ldr	r3, [pc, #128]	; (8005b9c <HAL_RCC_ClockConfig+0x1b8>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0307 	and.w	r3, r3, #7
 8005b22:	683a      	ldr	r2, [r7, #0]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d001      	beq.n	8005b2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e032      	b.n	8005b92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0304 	and.w	r3, r3, #4
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d008      	beq.n	8005b4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b38:	4b19      	ldr	r3, [pc, #100]	; (8005ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	4916      	ldr	r1, [pc, #88]	; (8005ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0308 	and.w	r3, r3, #8
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d009      	beq.n	8005b6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b56:	4b12      	ldr	r3, [pc, #72]	; (8005ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	00db      	lsls	r3, r3, #3
 8005b64:	490e      	ldr	r1, [pc, #56]	; (8005ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b6a:	f000 f821 	bl	8005bb0 <HAL_RCC_GetSysClockFreq>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	4b0b      	ldr	r3, [pc, #44]	; (8005ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	091b      	lsrs	r3, r3, #4
 8005b76:	f003 030f 	and.w	r3, r3, #15
 8005b7a:	490a      	ldr	r1, [pc, #40]	; (8005ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8005b7c:	5ccb      	ldrb	r3, [r1, r3]
 8005b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b82:	4a09      	ldr	r2, [pc, #36]	; (8005ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005b86:	4b09      	ldr	r3, [pc, #36]	; (8005bac <HAL_RCC_ClockConfig+0x1c8>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7fc fb16 	bl	80021bc <HAL_InitTick>

  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3710      	adds	r7, #16
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	40023c00 	.word	0x40023c00
 8005ba0:	40023800 	.word	0x40023800
 8005ba4:	08008290 	.word	0x08008290
 8005ba8:	20000008 	.word	0x20000008
 8005bac:	2000000c 	.word	0x2000000c

08005bb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bb4:	b094      	sub	sp, #80	; 0x50
 8005bb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	647b      	str	r3, [r7, #68]	; 0x44
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005bc8:	4b79      	ldr	r3, [pc, #484]	; (8005db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	f003 030c 	and.w	r3, r3, #12
 8005bd0:	2b08      	cmp	r3, #8
 8005bd2:	d00d      	beq.n	8005bf0 <HAL_RCC_GetSysClockFreq+0x40>
 8005bd4:	2b08      	cmp	r3, #8
 8005bd6:	f200 80e1 	bhi.w	8005d9c <HAL_RCC_GetSysClockFreq+0x1ec>
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d002      	beq.n	8005be4 <HAL_RCC_GetSysClockFreq+0x34>
 8005bde:	2b04      	cmp	r3, #4
 8005be0:	d003      	beq.n	8005bea <HAL_RCC_GetSysClockFreq+0x3a>
 8005be2:	e0db      	b.n	8005d9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005be4:	4b73      	ldr	r3, [pc, #460]	; (8005db4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005be6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005be8:	e0db      	b.n	8005da2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005bea:	4b73      	ldr	r3, [pc, #460]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x208>)
 8005bec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005bee:	e0d8      	b.n	8005da2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005bf0:	4b6f      	ldr	r3, [pc, #444]	; (8005db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bf8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005bfa:	4b6d      	ldr	r3, [pc, #436]	; (8005db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d063      	beq.n	8005cce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c06:	4b6a      	ldr	r3, [pc, #424]	; (8005db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	099b      	lsrs	r3, r3, #6
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c10:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c18:	633b      	str	r3, [r7, #48]	; 0x30
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	637b      	str	r3, [r7, #52]	; 0x34
 8005c1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005c22:	4622      	mov	r2, r4
 8005c24:	462b      	mov	r3, r5
 8005c26:	f04f 0000 	mov.w	r0, #0
 8005c2a:	f04f 0100 	mov.w	r1, #0
 8005c2e:	0159      	lsls	r1, r3, #5
 8005c30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c34:	0150      	lsls	r0, r2, #5
 8005c36:	4602      	mov	r2, r0
 8005c38:	460b      	mov	r3, r1
 8005c3a:	4621      	mov	r1, r4
 8005c3c:	1a51      	subs	r1, r2, r1
 8005c3e:	6139      	str	r1, [r7, #16]
 8005c40:	4629      	mov	r1, r5
 8005c42:	eb63 0301 	sbc.w	r3, r3, r1
 8005c46:	617b      	str	r3, [r7, #20]
 8005c48:	f04f 0200 	mov.w	r2, #0
 8005c4c:	f04f 0300 	mov.w	r3, #0
 8005c50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c54:	4659      	mov	r1, fp
 8005c56:	018b      	lsls	r3, r1, #6
 8005c58:	4651      	mov	r1, sl
 8005c5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005c5e:	4651      	mov	r1, sl
 8005c60:	018a      	lsls	r2, r1, #6
 8005c62:	4651      	mov	r1, sl
 8005c64:	ebb2 0801 	subs.w	r8, r2, r1
 8005c68:	4659      	mov	r1, fp
 8005c6a:	eb63 0901 	sbc.w	r9, r3, r1
 8005c6e:	f04f 0200 	mov.w	r2, #0
 8005c72:	f04f 0300 	mov.w	r3, #0
 8005c76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c82:	4690      	mov	r8, r2
 8005c84:	4699      	mov	r9, r3
 8005c86:	4623      	mov	r3, r4
 8005c88:	eb18 0303 	adds.w	r3, r8, r3
 8005c8c:	60bb      	str	r3, [r7, #8]
 8005c8e:	462b      	mov	r3, r5
 8005c90:	eb49 0303 	adc.w	r3, r9, r3
 8005c94:	60fb      	str	r3, [r7, #12]
 8005c96:	f04f 0200 	mov.w	r2, #0
 8005c9a:	f04f 0300 	mov.w	r3, #0
 8005c9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005ca2:	4629      	mov	r1, r5
 8005ca4:	024b      	lsls	r3, r1, #9
 8005ca6:	4621      	mov	r1, r4
 8005ca8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005cac:	4621      	mov	r1, r4
 8005cae:	024a      	lsls	r2, r1, #9
 8005cb0:	4610      	mov	r0, r2
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005cc0:	f7fa fed4 	bl	8000a6c <__aeabi_uldivmod>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	4613      	mov	r3, r2
 8005cca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ccc:	e058      	b.n	8005d80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cce:	4b38      	ldr	r3, [pc, #224]	; (8005db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	099b      	lsrs	r3, r3, #6
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	4611      	mov	r1, r2
 8005cda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005cde:	623b      	str	r3, [r7, #32]
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ce4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005ce8:	4642      	mov	r2, r8
 8005cea:	464b      	mov	r3, r9
 8005cec:	f04f 0000 	mov.w	r0, #0
 8005cf0:	f04f 0100 	mov.w	r1, #0
 8005cf4:	0159      	lsls	r1, r3, #5
 8005cf6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005cfa:	0150      	lsls	r0, r2, #5
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	460b      	mov	r3, r1
 8005d00:	4641      	mov	r1, r8
 8005d02:	ebb2 0a01 	subs.w	sl, r2, r1
 8005d06:	4649      	mov	r1, r9
 8005d08:	eb63 0b01 	sbc.w	fp, r3, r1
 8005d0c:	f04f 0200 	mov.w	r2, #0
 8005d10:	f04f 0300 	mov.w	r3, #0
 8005d14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005d18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005d1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005d20:	ebb2 040a 	subs.w	r4, r2, sl
 8005d24:	eb63 050b 	sbc.w	r5, r3, fp
 8005d28:	f04f 0200 	mov.w	r2, #0
 8005d2c:	f04f 0300 	mov.w	r3, #0
 8005d30:	00eb      	lsls	r3, r5, #3
 8005d32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d36:	00e2      	lsls	r2, r4, #3
 8005d38:	4614      	mov	r4, r2
 8005d3a:	461d      	mov	r5, r3
 8005d3c:	4643      	mov	r3, r8
 8005d3e:	18e3      	adds	r3, r4, r3
 8005d40:	603b      	str	r3, [r7, #0]
 8005d42:	464b      	mov	r3, r9
 8005d44:	eb45 0303 	adc.w	r3, r5, r3
 8005d48:	607b      	str	r3, [r7, #4]
 8005d4a:	f04f 0200 	mov.w	r2, #0
 8005d4e:	f04f 0300 	mov.w	r3, #0
 8005d52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005d56:	4629      	mov	r1, r5
 8005d58:	028b      	lsls	r3, r1, #10
 8005d5a:	4621      	mov	r1, r4
 8005d5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d60:	4621      	mov	r1, r4
 8005d62:	028a      	lsls	r2, r1, #10
 8005d64:	4610      	mov	r0, r2
 8005d66:	4619      	mov	r1, r3
 8005d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	61bb      	str	r3, [r7, #24]
 8005d6e:	61fa      	str	r2, [r7, #28]
 8005d70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d74:	f7fa fe7a 	bl	8000a6c <__aeabi_uldivmod>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d80:	4b0b      	ldr	r3, [pc, #44]	; (8005db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	0c1b      	lsrs	r3, r3, #16
 8005d86:	f003 0303 	and.w	r3, r3, #3
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	005b      	lsls	r3, r3, #1
 8005d8e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005d90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d9a:	e002      	b.n	8005da2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d9c:	4b05      	ldr	r3, [pc, #20]	; (8005db4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005d9e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005da0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005da2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3750      	adds	r7, #80	; 0x50
 8005da8:	46bd      	mov	sp, r7
 8005daa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005dae:	bf00      	nop
 8005db0:	40023800 	.word	0x40023800
 8005db4:	00f42400 	.word	0x00f42400
 8005db8:	007a1200 	.word	0x007a1200

08005dbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005dc0:	4b03      	ldr	r3, [pc, #12]	; (8005dd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	20000008 	.word	0x20000008

08005dd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005dd8:	f7ff fff0 	bl	8005dbc <HAL_RCC_GetHCLKFreq>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	4b05      	ldr	r3, [pc, #20]	; (8005df4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	0a9b      	lsrs	r3, r3, #10
 8005de4:	f003 0307 	and.w	r3, r3, #7
 8005de8:	4903      	ldr	r1, [pc, #12]	; (8005df8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005dea:	5ccb      	ldrb	r3, [r1, r3]
 8005dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	40023800 	.word	0x40023800
 8005df8:	080082a0 	.word	0x080082a0

08005dfc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d101      	bne.n	8005e0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e041      	b.n	8005e92 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d106      	bne.n	8005e28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f7fc f8cc 	bl	8001fc0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2202      	movs	r2, #2
 8005e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	3304      	adds	r3, #4
 8005e38:	4619      	mov	r1, r3
 8005e3a:	4610      	mov	r0, r2
 8005e3c:	f000 f9a0 	bl	8006180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3708      	adds	r7, #8
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
	...

08005e9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d109      	bne.n	8005ec0 <HAL_TIM_PWM_Start+0x24>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	bf14      	ite	ne
 8005eb8:	2301      	movne	r3, #1
 8005eba:	2300      	moveq	r3, #0
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	e022      	b.n	8005f06 <HAL_TIM_PWM_Start+0x6a>
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	2b04      	cmp	r3, #4
 8005ec4:	d109      	bne.n	8005eda <HAL_TIM_PWM_Start+0x3e>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	bf14      	ite	ne
 8005ed2:	2301      	movne	r3, #1
 8005ed4:	2300      	moveq	r3, #0
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	e015      	b.n	8005f06 <HAL_TIM_PWM_Start+0x6a>
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	2b08      	cmp	r3, #8
 8005ede:	d109      	bne.n	8005ef4 <HAL_TIM_PWM_Start+0x58>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	bf14      	ite	ne
 8005eec:	2301      	movne	r3, #1
 8005eee:	2300      	moveq	r3, #0
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	e008      	b.n	8005f06 <HAL_TIM_PWM_Start+0x6a>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	bf14      	ite	ne
 8005f00:	2301      	movne	r3, #1
 8005f02:	2300      	moveq	r3, #0
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d001      	beq.n	8005f0e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e068      	b.n	8005fe0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d104      	bne.n	8005f1e <HAL_TIM_PWM_Start+0x82>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2202      	movs	r2, #2
 8005f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f1c:	e013      	b.n	8005f46 <HAL_TIM_PWM_Start+0xaa>
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	2b04      	cmp	r3, #4
 8005f22:	d104      	bne.n	8005f2e <HAL_TIM_PWM_Start+0x92>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2202      	movs	r2, #2
 8005f28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f2c:	e00b      	b.n	8005f46 <HAL_TIM_PWM_Start+0xaa>
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	2b08      	cmp	r3, #8
 8005f32:	d104      	bne.n	8005f3e <HAL_TIM_PWM_Start+0xa2>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2202      	movs	r2, #2
 8005f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f3c:	e003      	b.n	8005f46 <HAL_TIM_PWM_Start+0xaa>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2202      	movs	r2, #2
 8005f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	6839      	ldr	r1, [r7, #0]
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f000 fb22 	bl	8006598 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a23      	ldr	r2, [pc, #140]	; (8005fe8 <HAL_TIM_PWM_Start+0x14c>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d107      	bne.n	8005f6e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a1d      	ldr	r2, [pc, #116]	; (8005fe8 <HAL_TIM_PWM_Start+0x14c>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d018      	beq.n	8005faa <HAL_TIM_PWM_Start+0x10e>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f80:	d013      	beq.n	8005faa <HAL_TIM_PWM_Start+0x10e>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a19      	ldr	r2, [pc, #100]	; (8005fec <HAL_TIM_PWM_Start+0x150>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d00e      	beq.n	8005faa <HAL_TIM_PWM_Start+0x10e>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a17      	ldr	r2, [pc, #92]	; (8005ff0 <HAL_TIM_PWM_Start+0x154>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d009      	beq.n	8005faa <HAL_TIM_PWM_Start+0x10e>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a16      	ldr	r2, [pc, #88]	; (8005ff4 <HAL_TIM_PWM_Start+0x158>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d004      	beq.n	8005faa <HAL_TIM_PWM_Start+0x10e>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a14      	ldr	r2, [pc, #80]	; (8005ff8 <HAL_TIM_PWM_Start+0x15c>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d111      	bne.n	8005fce <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f003 0307 	and.w	r3, r3, #7
 8005fb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2b06      	cmp	r3, #6
 8005fba:	d010      	beq.n	8005fde <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f042 0201 	orr.w	r2, r2, #1
 8005fca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fcc:	e007      	b.n	8005fde <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f042 0201 	orr.w	r2, r2, #1
 8005fdc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3710      	adds	r7, #16
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	40010000 	.word	0x40010000
 8005fec:	40000400 	.word	0x40000400
 8005ff0:	40000800 	.word	0x40000800
 8005ff4:	40000c00 	.word	0x40000c00
 8005ff8:	40014000 	.word	0x40014000

08005ffc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b086      	sub	sp, #24
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006008:	2300      	movs	r3, #0
 800600a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006012:	2b01      	cmp	r3, #1
 8006014:	d101      	bne.n	800601a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006016:	2302      	movs	r3, #2
 8006018:	e0ae      	b.n	8006178 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2201      	movs	r2, #1
 800601e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2b0c      	cmp	r3, #12
 8006026:	f200 809f 	bhi.w	8006168 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800602a:	a201      	add	r2, pc, #4	; (adr r2, 8006030 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800602c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006030:	08006065 	.word	0x08006065
 8006034:	08006169 	.word	0x08006169
 8006038:	08006169 	.word	0x08006169
 800603c:	08006169 	.word	0x08006169
 8006040:	080060a5 	.word	0x080060a5
 8006044:	08006169 	.word	0x08006169
 8006048:	08006169 	.word	0x08006169
 800604c:	08006169 	.word	0x08006169
 8006050:	080060e7 	.word	0x080060e7
 8006054:	08006169 	.word	0x08006169
 8006058:	08006169 	.word	0x08006169
 800605c:	08006169 	.word	0x08006169
 8006060:	08006127 	.word	0x08006127
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68b9      	ldr	r1, [r7, #8]
 800606a:	4618      	mov	r0, r3
 800606c:	f000 f908 	bl	8006280 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	699a      	ldr	r2, [r3, #24]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f042 0208 	orr.w	r2, r2, #8
 800607e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	699a      	ldr	r2, [r3, #24]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f022 0204 	bic.w	r2, r2, #4
 800608e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	6999      	ldr	r1, [r3, #24]
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	691a      	ldr	r2, [r3, #16]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	430a      	orrs	r2, r1
 80060a0:	619a      	str	r2, [r3, #24]
      break;
 80060a2:	e064      	b.n	800616e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68b9      	ldr	r1, [r7, #8]
 80060aa:	4618      	mov	r0, r3
 80060ac:	f000 f94e 	bl	800634c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	699a      	ldr	r2, [r3, #24]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	699a      	ldr	r2, [r3, #24]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	6999      	ldr	r1, [r3, #24]
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	021a      	lsls	r2, r3, #8
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	430a      	orrs	r2, r1
 80060e2:	619a      	str	r2, [r3, #24]
      break;
 80060e4:	e043      	b.n	800616e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68b9      	ldr	r1, [r7, #8]
 80060ec:	4618      	mov	r0, r3
 80060ee:	f000 f999 	bl	8006424 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	69da      	ldr	r2, [r3, #28]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f042 0208 	orr.w	r2, r2, #8
 8006100:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	69da      	ldr	r2, [r3, #28]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f022 0204 	bic.w	r2, r2, #4
 8006110:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	69d9      	ldr	r1, [r3, #28]
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	691a      	ldr	r2, [r3, #16]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	430a      	orrs	r2, r1
 8006122:	61da      	str	r2, [r3, #28]
      break;
 8006124:	e023      	b.n	800616e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68b9      	ldr	r1, [r7, #8]
 800612c:	4618      	mov	r0, r3
 800612e:	f000 f9e3 	bl	80064f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	69da      	ldr	r2, [r3, #28]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006140:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	69da      	ldr	r2, [r3, #28]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006150:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	69d9      	ldr	r1, [r3, #28]
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	021a      	lsls	r2, r3, #8
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	430a      	orrs	r2, r1
 8006164:	61da      	str	r2, [r3, #28]
      break;
 8006166:	e002      	b.n	800616e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	75fb      	strb	r3, [r7, #23]
      break;
 800616c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006176:	7dfb      	ldrb	r3, [r7, #23]
}
 8006178:	4618      	mov	r0, r3
 800617a:	3718      	adds	r7, #24
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006180:	b480      	push	{r7}
 8006182:	b085      	sub	sp, #20
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a34      	ldr	r2, [pc, #208]	; (8006264 <TIM_Base_SetConfig+0xe4>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d00f      	beq.n	80061b8 <TIM_Base_SetConfig+0x38>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800619e:	d00b      	beq.n	80061b8 <TIM_Base_SetConfig+0x38>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a31      	ldr	r2, [pc, #196]	; (8006268 <TIM_Base_SetConfig+0xe8>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d007      	beq.n	80061b8 <TIM_Base_SetConfig+0x38>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a30      	ldr	r2, [pc, #192]	; (800626c <TIM_Base_SetConfig+0xec>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d003      	beq.n	80061b8 <TIM_Base_SetConfig+0x38>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a2f      	ldr	r2, [pc, #188]	; (8006270 <TIM_Base_SetConfig+0xf0>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d108      	bne.n	80061ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a25      	ldr	r2, [pc, #148]	; (8006264 <TIM_Base_SetConfig+0xe4>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d01b      	beq.n	800620a <TIM_Base_SetConfig+0x8a>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061d8:	d017      	beq.n	800620a <TIM_Base_SetConfig+0x8a>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a22      	ldr	r2, [pc, #136]	; (8006268 <TIM_Base_SetConfig+0xe8>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d013      	beq.n	800620a <TIM_Base_SetConfig+0x8a>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a21      	ldr	r2, [pc, #132]	; (800626c <TIM_Base_SetConfig+0xec>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d00f      	beq.n	800620a <TIM_Base_SetConfig+0x8a>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a20      	ldr	r2, [pc, #128]	; (8006270 <TIM_Base_SetConfig+0xf0>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d00b      	beq.n	800620a <TIM_Base_SetConfig+0x8a>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a1f      	ldr	r2, [pc, #124]	; (8006274 <TIM_Base_SetConfig+0xf4>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d007      	beq.n	800620a <TIM_Base_SetConfig+0x8a>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a1e      	ldr	r2, [pc, #120]	; (8006278 <TIM_Base_SetConfig+0xf8>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d003      	beq.n	800620a <TIM_Base_SetConfig+0x8a>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a1d      	ldr	r2, [pc, #116]	; (800627c <TIM_Base_SetConfig+0xfc>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d108      	bne.n	800621c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006210:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	4313      	orrs	r3, r2
 800621a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	695b      	ldr	r3, [r3, #20]
 8006226:	4313      	orrs	r3, r2
 8006228:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	689a      	ldr	r2, [r3, #8]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a08      	ldr	r2, [pc, #32]	; (8006264 <TIM_Base_SetConfig+0xe4>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d103      	bne.n	8006250 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	691a      	ldr	r2, [r3, #16]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	615a      	str	r2, [r3, #20]
}
 8006256:	bf00      	nop
 8006258:	3714      	adds	r7, #20
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	40010000 	.word	0x40010000
 8006268:	40000400 	.word	0x40000400
 800626c:	40000800 	.word	0x40000800
 8006270:	40000c00 	.word	0x40000c00
 8006274:	40014000 	.word	0x40014000
 8006278:	40014400 	.word	0x40014400
 800627c:	40014800 	.word	0x40014800

08006280 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006280:	b480      	push	{r7}
 8006282:	b087      	sub	sp, #28
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a1b      	ldr	r3, [r3, #32]
 800628e:	f023 0201 	bic.w	r2, r3, #1
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a1b      	ldr	r3, [r3, #32]
 800629a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f023 0303 	bic.w	r3, r3, #3
 80062b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	4313      	orrs	r3, r2
 80062c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	f023 0302 	bic.w	r3, r3, #2
 80062c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	697a      	ldr	r2, [r7, #20]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a1c      	ldr	r2, [pc, #112]	; (8006348 <TIM_OC1_SetConfig+0xc8>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d10c      	bne.n	80062f6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	f023 0308 	bic.w	r3, r3, #8
 80062e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	697a      	ldr	r2, [r7, #20]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	f023 0304 	bic.w	r3, r3, #4
 80062f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a13      	ldr	r2, [pc, #76]	; (8006348 <TIM_OC1_SetConfig+0xc8>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d111      	bne.n	8006322 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006304:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800630c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	695b      	ldr	r3, [r3, #20]
 8006312:	693a      	ldr	r2, [r7, #16]
 8006314:	4313      	orrs	r3, r2
 8006316:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	699b      	ldr	r3, [r3, #24]
 800631c:	693a      	ldr	r2, [r7, #16]
 800631e:	4313      	orrs	r3, r2
 8006320:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	693a      	ldr	r2, [r7, #16]
 8006326:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	685a      	ldr	r2, [r3, #4]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	697a      	ldr	r2, [r7, #20]
 800633a:	621a      	str	r2, [r3, #32]
}
 800633c:	bf00      	nop
 800633e:	371c      	adds	r7, #28
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr
 8006348:	40010000 	.word	0x40010000

0800634c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800634c:	b480      	push	{r7}
 800634e:	b087      	sub	sp, #28
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a1b      	ldr	r3, [r3, #32]
 800635a:	f023 0210 	bic.w	r2, r3, #16
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800637a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006382:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	021b      	lsls	r3, r3, #8
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	4313      	orrs	r3, r2
 800638e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	f023 0320 	bic.w	r3, r3, #32
 8006396:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	011b      	lsls	r3, r3, #4
 800639e:	697a      	ldr	r2, [r7, #20]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a1e      	ldr	r2, [pc, #120]	; (8006420 <TIM_OC2_SetConfig+0xd4>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d10d      	bne.n	80063c8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	011b      	lsls	r3, r3, #4
 80063ba:	697a      	ldr	r2, [r7, #20]
 80063bc:	4313      	orrs	r3, r2
 80063be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4a15      	ldr	r2, [pc, #84]	; (8006420 <TIM_OC2_SetConfig+0xd4>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d113      	bne.n	80063f8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	695b      	ldr	r3, [r3, #20]
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	693a      	ldr	r2, [r7, #16]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	699b      	ldr	r3, [r3, #24]
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	693a      	ldr	r2, [r7, #16]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	693a      	ldr	r2, [r7, #16]
 80063fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	685a      	ldr	r2, [r3, #4]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	697a      	ldr	r2, [r7, #20]
 8006410:	621a      	str	r2, [r3, #32]
}
 8006412:	bf00      	nop
 8006414:	371c      	adds	r7, #28
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	40010000 	.word	0x40010000

08006424 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006424:	b480      	push	{r7}
 8006426:	b087      	sub	sp, #28
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a1b      	ldr	r3, [r3, #32]
 8006432:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	69db      	ldr	r3, [r3, #28]
 800644a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f023 0303 	bic.w	r3, r3, #3
 800645a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	4313      	orrs	r3, r2
 8006464:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800646c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	021b      	lsls	r3, r3, #8
 8006474:	697a      	ldr	r2, [r7, #20]
 8006476:	4313      	orrs	r3, r2
 8006478:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a1d      	ldr	r2, [pc, #116]	; (80064f4 <TIM_OC3_SetConfig+0xd0>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d10d      	bne.n	800649e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006488:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	021b      	lsls	r3, r3, #8
 8006490:	697a      	ldr	r2, [r7, #20]
 8006492:	4313      	orrs	r3, r2
 8006494:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800649c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a14      	ldr	r2, [pc, #80]	; (80064f4 <TIM_OC3_SetConfig+0xd0>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d113      	bne.n	80064ce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	011b      	lsls	r3, r3, #4
 80064bc:	693a      	ldr	r2, [r7, #16]
 80064be:	4313      	orrs	r3, r2
 80064c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	699b      	ldr	r3, [r3, #24]
 80064c6:	011b      	lsls	r3, r3, #4
 80064c8:	693a      	ldr	r2, [r7, #16]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	693a      	ldr	r2, [r7, #16]
 80064d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	685a      	ldr	r2, [r3, #4]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	697a      	ldr	r2, [r7, #20]
 80064e6:	621a      	str	r2, [r3, #32]
}
 80064e8:	bf00      	nop
 80064ea:	371c      	adds	r7, #28
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr
 80064f4:	40010000 	.word	0x40010000

080064f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b087      	sub	sp, #28
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a1b      	ldr	r3, [r3, #32]
 8006512:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	69db      	ldr	r3, [r3, #28]
 800651e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800652e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	021b      	lsls	r3, r3, #8
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	4313      	orrs	r3, r2
 800653a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006542:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	031b      	lsls	r3, r3, #12
 800654a:	693a      	ldr	r2, [r7, #16]
 800654c:	4313      	orrs	r3, r2
 800654e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a10      	ldr	r2, [pc, #64]	; (8006594 <TIM_OC4_SetConfig+0x9c>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d109      	bne.n	800656c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800655e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	695b      	ldr	r3, [r3, #20]
 8006564:	019b      	lsls	r3, r3, #6
 8006566:	697a      	ldr	r2, [r7, #20]
 8006568:	4313      	orrs	r3, r2
 800656a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	685a      	ldr	r2, [r3, #4]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	693a      	ldr	r2, [r7, #16]
 8006584:	621a      	str	r2, [r3, #32]
}
 8006586:	bf00      	nop
 8006588:	371c      	adds	r7, #28
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	40010000 	.word	0x40010000

08006598 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006598:	b480      	push	{r7}
 800659a:	b087      	sub	sp, #28
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	f003 031f 	and.w	r3, r3, #31
 80065aa:	2201      	movs	r2, #1
 80065ac:	fa02 f303 	lsl.w	r3, r2, r3
 80065b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6a1a      	ldr	r2, [r3, #32]
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	43db      	mvns	r3, r3
 80065ba:	401a      	ands	r2, r3
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6a1a      	ldr	r2, [r3, #32]
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	f003 031f 	and.w	r3, r3, #31
 80065ca:	6879      	ldr	r1, [r7, #4]
 80065cc:	fa01 f303 	lsl.w	r3, r1, r3
 80065d0:	431a      	orrs	r2, r3
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	621a      	str	r2, [r3, #32]
}
 80065d6:	bf00      	nop
 80065d8:	371c      	adds	r7, #28
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr

080065e2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80065e2:	b480      	push	{r7}
 80065e4:	b085      	sub	sp, #20
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	60f8      	str	r0, [r7, #12]
 80065ea:	60b9      	str	r1, [r7, #8]
 80065ec:	4613      	mov	r3, r2
 80065ee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	2b20      	cmp	r3, #32
 80065fa:	d130      	bne.n	800665e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d002      	beq.n	8006608 <HAL_UART_Transmit_IT+0x26>
 8006602:	88fb      	ldrh	r3, [r7, #6]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d101      	bne.n	800660c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e029      	b.n	8006660 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006612:	2b01      	cmp	r3, #1
 8006614:	d101      	bne.n	800661a <HAL_UART_Transmit_IT+0x38>
 8006616:	2302      	movs	r3, #2
 8006618:	e022      	b.n	8006660 <HAL_UART_Transmit_IT+0x7e>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2201      	movs	r2, #1
 800661e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	68ba      	ldr	r2, [r7, #8]
 8006626:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	88fa      	ldrh	r2, [r7, #6]
 800662c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	88fa      	ldrh	r2, [r7, #6]
 8006632:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2200      	movs	r2, #0
 8006638:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2221      	movs	r2, #33	; 0x21
 800663e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2200      	movs	r2, #0
 8006646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68da      	ldr	r2, [r3, #12]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006658:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800665a:	2300      	movs	r3, #0
 800665c:	e000      	b.n	8006660 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800665e:	2302      	movs	r3, #2
  }
}
 8006660:	4618      	mov	r0, r3
 8006662:	3714      	adds	r7, #20
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	4613      	mov	r3, r2
 8006678:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006680:	b2db      	uxtb	r3, r3
 8006682:	2b20      	cmp	r3, #32
 8006684:	d11d      	bne.n	80066c2 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d002      	beq.n	8006692 <HAL_UART_Receive_IT+0x26>
 800668c:	88fb      	ldrh	r3, [r7, #6]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d101      	bne.n	8006696 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e016      	b.n	80066c4 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800669c:	2b01      	cmp	r3, #1
 800669e:	d101      	bne.n	80066a4 <HAL_UART_Receive_IT+0x38>
 80066a0:	2302      	movs	r3, #2
 80066a2:	e00f      	b.n	80066c4 <HAL_UART_Receive_IT+0x58>
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80066b2:	88fb      	ldrh	r3, [r7, #6]
 80066b4:	461a      	mov	r2, r3
 80066b6:	68b9      	ldr	r1, [r7, #8]
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	f000 faab 	bl	8006c14 <UART_Start_Receive_IT>
 80066be:	4603      	mov	r3, r0
 80066c0:	e000      	b.n	80066c4 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80066c2:	2302      	movs	r3, #2
  }
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3710      	adds	r7, #16
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b0ba      	sub	sp, #232	; 0xe8
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	695b      	ldr	r3, [r3, #20]
 80066ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80066f2:	2300      	movs	r3, #0
 80066f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80066f8:	2300      	movs	r3, #0
 80066fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80066fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006702:	f003 030f 	and.w	r3, r3, #15
 8006706:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800670a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800670e:	2b00      	cmp	r3, #0
 8006710:	d10f      	bne.n	8006732 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006716:	f003 0320 	and.w	r3, r3, #32
 800671a:	2b00      	cmp	r3, #0
 800671c:	d009      	beq.n	8006732 <HAL_UART_IRQHandler+0x66>
 800671e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006722:	f003 0320 	and.w	r3, r3, #32
 8006726:	2b00      	cmp	r3, #0
 8006728:	d003      	beq.n	8006732 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 fb8f 	bl	8006e4e <UART_Receive_IT>
      return;
 8006730:	e256      	b.n	8006be0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006732:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006736:	2b00      	cmp	r3, #0
 8006738:	f000 80de 	beq.w	80068f8 <HAL_UART_IRQHandler+0x22c>
 800673c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006740:	f003 0301 	and.w	r3, r3, #1
 8006744:	2b00      	cmp	r3, #0
 8006746:	d106      	bne.n	8006756 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800674c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006750:	2b00      	cmp	r3, #0
 8006752:	f000 80d1 	beq.w	80068f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	2b00      	cmp	r3, #0
 8006760:	d00b      	beq.n	800677a <HAL_UART_IRQHandler+0xae>
 8006762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800676a:	2b00      	cmp	r3, #0
 800676c:	d005      	beq.n	800677a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006772:	f043 0201 	orr.w	r2, r3, #1
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800677a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800677e:	f003 0304 	and.w	r3, r3, #4
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00b      	beq.n	800679e <HAL_UART_IRQHandler+0xd2>
 8006786:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800678a:	f003 0301 	and.w	r3, r3, #1
 800678e:	2b00      	cmp	r3, #0
 8006790:	d005      	beq.n	800679e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006796:	f043 0202 	orr.w	r2, r3, #2
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800679e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067a2:	f003 0302 	and.w	r3, r3, #2
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d00b      	beq.n	80067c2 <HAL_UART_IRQHandler+0xf6>
 80067aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067ae:	f003 0301 	and.w	r3, r3, #1
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d005      	beq.n	80067c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ba:	f043 0204 	orr.w	r2, r3, #4
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80067c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067c6:	f003 0308 	and.w	r3, r3, #8
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d011      	beq.n	80067f2 <HAL_UART_IRQHandler+0x126>
 80067ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067d2:	f003 0320 	and.w	r3, r3, #32
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d105      	bne.n	80067e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80067da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067de:	f003 0301 	and.w	r3, r3, #1
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d005      	beq.n	80067f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ea:	f043 0208 	orr.w	r2, r3, #8
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	f000 81ed 	beq.w	8006bd6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80067fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006800:	f003 0320 	and.w	r3, r3, #32
 8006804:	2b00      	cmp	r3, #0
 8006806:	d008      	beq.n	800681a <HAL_UART_IRQHandler+0x14e>
 8006808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800680c:	f003 0320 	and.w	r3, r3, #32
 8006810:	2b00      	cmp	r3, #0
 8006812:	d002      	beq.n	800681a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 fb1a 	bl	8006e4e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	695b      	ldr	r3, [r3, #20]
 8006820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006824:	2b40      	cmp	r3, #64	; 0x40
 8006826:	bf0c      	ite	eq
 8006828:	2301      	moveq	r3, #1
 800682a:	2300      	movne	r3, #0
 800682c:	b2db      	uxtb	r3, r3
 800682e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006836:	f003 0308 	and.w	r3, r3, #8
 800683a:	2b00      	cmp	r3, #0
 800683c:	d103      	bne.n	8006846 <HAL_UART_IRQHandler+0x17a>
 800683e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006842:	2b00      	cmp	r3, #0
 8006844:	d04f      	beq.n	80068e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 fa22 	bl	8006c90 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	695b      	ldr	r3, [r3, #20]
 8006852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006856:	2b40      	cmp	r3, #64	; 0x40
 8006858:	d141      	bne.n	80068de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	3314      	adds	r3, #20
 8006860:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006864:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006868:	e853 3f00 	ldrex	r3, [r3]
 800686c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006870:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006874:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006878:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	3314      	adds	r3, #20
 8006882:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006886:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800688a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006892:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006896:	e841 2300 	strex	r3, r2, [r1]
 800689a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800689e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1d9      	bne.n	800685a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d013      	beq.n	80068d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b2:	4a7d      	ldr	r2, [pc, #500]	; (8006aa8 <HAL_UART_IRQHandler+0x3dc>)
 80068b4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ba:	4618      	mov	r0, r3
 80068bc:	f7fb fe73 	bl	80025a6 <HAL_DMA_Abort_IT>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d016      	beq.n	80068f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80068d0:	4610      	mov	r0, r2
 80068d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068d4:	e00e      	b.n	80068f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 f986 	bl	8006be8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068dc:	e00a      	b.n	80068f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 f982 	bl	8006be8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068e4:	e006      	b.n	80068f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 f97e 	bl	8006be8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80068f2:	e170      	b.n	8006bd6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068f4:	bf00      	nop
    return;
 80068f6:	e16e      	b.n	8006bd6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	f040 814a 	bne.w	8006b96 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006906:	f003 0310 	and.w	r3, r3, #16
 800690a:	2b00      	cmp	r3, #0
 800690c:	f000 8143 	beq.w	8006b96 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006914:	f003 0310 	and.w	r3, r3, #16
 8006918:	2b00      	cmp	r3, #0
 800691a:	f000 813c 	beq.w	8006b96 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800691e:	2300      	movs	r3, #0
 8006920:	60bb      	str	r3, [r7, #8]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	60bb      	str	r3, [r7, #8]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	60bb      	str	r3, [r7, #8]
 8006932:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	695b      	ldr	r3, [r3, #20]
 800693a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800693e:	2b40      	cmp	r3, #64	; 0x40
 8006940:	f040 80b4 	bne.w	8006aac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006950:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006954:	2b00      	cmp	r3, #0
 8006956:	f000 8140 	beq.w	8006bda <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800695e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006962:	429a      	cmp	r2, r3
 8006964:	f080 8139 	bcs.w	8006bda <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800696e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006974:	69db      	ldr	r3, [r3, #28]
 8006976:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800697a:	f000 8088 	beq.w	8006a8e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	330c      	adds	r3, #12
 8006984:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006988:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800698c:	e853 3f00 	ldrex	r3, [r3]
 8006990:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006994:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006998:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800699c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	330c      	adds	r3, #12
 80069a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80069aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80069ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80069b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80069ba:	e841 2300 	strex	r3, r2, [r1]
 80069be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80069c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d1d9      	bne.n	800697e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	3314      	adds	r3, #20
 80069d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069d4:	e853 3f00 	ldrex	r3, [r3]
 80069d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80069da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069dc:	f023 0301 	bic.w	r3, r3, #1
 80069e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	3314      	adds	r3, #20
 80069ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80069ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80069f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80069f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80069fa:	e841 2300 	strex	r3, r2, [r1]
 80069fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006a00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1e1      	bne.n	80069ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	3314      	adds	r3, #20
 8006a0c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a10:	e853 3f00 	ldrex	r3, [r3]
 8006a14:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006a16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	3314      	adds	r3, #20
 8006a26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006a2a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006a2c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006a30:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a32:	e841 2300 	strex	r3, r2, [r1]
 8006a36:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006a38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d1e3      	bne.n	8006a06 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2220      	movs	r2, #32
 8006a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	330c      	adds	r3, #12
 8006a52:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a56:	e853 3f00 	ldrex	r3, [r3]
 8006a5a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006a5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a5e:	f023 0310 	bic.w	r3, r3, #16
 8006a62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	330c      	adds	r3, #12
 8006a6c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006a70:	65ba      	str	r2, [r7, #88]	; 0x58
 8006a72:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a76:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a78:	e841 2300 	strex	r3, r2, [r1]
 8006a7c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006a7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d1e3      	bne.n	8006a4c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f7fb fd1c 	bl	80024c6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	1ad3      	subs	r3, r2, r3
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 f8ac 	bl	8006bfc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006aa4:	e099      	b.n	8006bda <HAL_UART_IRQHandler+0x50e>
 8006aa6:	bf00      	nop
 8006aa8:	08006d57 	.word	0x08006d57
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	f000 808b 	beq.w	8006bde <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006ac8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f000 8086 	beq.w	8006bde <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	330c      	adds	r3, #12
 8006ad8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006adc:	e853 3f00 	ldrex	r3, [r3]
 8006ae0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ae4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ae8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	330c      	adds	r3, #12
 8006af2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006af6:	647a      	str	r2, [r7, #68]	; 0x44
 8006af8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006afc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006afe:	e841 2300 	strex	r3, r2, [r1]
 8006b02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d1e3      	bne.n	8006ad2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	3314      	adds	r3, #20
 8006b10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b14:	e853 3f00 	ldrex	r3, [r3]
 8006b18:	623b      	str	r3, [r7, #32]
   return(result);
 8006b1a:	6a3b      	ldr	r3, [r7, #32]
 8006b1c:	f023 0301 	bic.w	r3, r3, #1
 8006b20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	3314      	adds	r3, #20
 8006b2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006b2e:	633a      	str	r2, [r7, #48]	; 0x30
 8006b30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b36:	e841 2300 	strex	r3, r2, [r1]
 8006b3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d1e3      	bne.n	8006b0a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2220      	movs	r2, #32
 8006b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	330c      	adds	r3, #12
 8006b56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	e853 3f00 	ldrex	r3, [r3]
 8006b5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f023 0310 	bic.w	r3, r3, #16
 8006b66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	330c      	adds	r3, #12
 8006b70:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006b74:	61fa      	str	r2, [r7, #28]
 8006b76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b78:	69b9      	ldr	r1, [r7, #24]
 8006b7a:	69fa      	ldr	r2, [r7, #28]
 8006b7c:	e841 2300 	strex	r3, r2, [r1]
 8006b80:	617b      	str	r3, [r7, #20]
   return(result);
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d1e3      	bne.n	8006b50 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 f834 	bl	8006bfc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b94:	e023      	b.n	8006bde <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d009      	beq.n	8006bb6 <HAL_UART_IRQHandler+0x4ea>
 8006ba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d003      	beq.n	8006bb6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 f8e5 	bl	8006d7e <UART_Transmit_IT>
    return;
 8006bb4:	e014      	b.n	8006be0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00e      	beq.n	8006be0 <HAL_UART_IRQHandler+0x514>
 8006bc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d008      	beq.n	8006be0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 f925 	bl	8006e1e <UART_EndTransmit_IT>
    return;
 8006bd4:	e004      	b.n	8006be0 <HAL_UART_IRQHandler+0x514>
    return;
 8006bd6:	bf00      	nop
 8006bd8:	e002      	b.n	8006be0 <HAL_UART_IRQHandler+0x514>
      return;
 8006bda:	bf00      	nop
 8006bdc:	e000      	b.n	8006be0 <HAL_UART_IRQHandler+0x514>
      return;
 8006bde:	bf00      	nop
  }
}
 8006be0:	37e8      	adds	r7, #232	; 0xe8
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop

08006be8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006bf0:	bf00      	nop
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	460b      	mov	r3, r1
 8006c06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c08:	bf00      	nop
 8006c0a:	370c      	adds	r7, #12
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b085      	sub	sp, #20
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	4613      	mov	r3, r2
 8006c20:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	68ba      	ldr	r2, [r7, #8]
 8006c26:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	88fa      	ldrh	r2, [r7, #6]
 8006c2c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	88fa      	ldrh	r2, [r7, #6]
 8006c32:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2200      	movs	r2, #0
 8006c38:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2222      	movs	r2, #34	; 0x22
 8006c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d007      	beq.n	8006c62 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68da      	ldr	r2, [r3, #12]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c60:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	695a      	ldr	r2, [r3, #20]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f042 0201 	orr.w	r2, r2, #1
 8006c70:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	68da      	ldr	r2, [r3, #12]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f042 0220 	orr.w	r2, r2, #32
 8006c80:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3714      	adds	r7, #20
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b095      	sub	sp, #84	; 0x54
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	330c      	adds	r3, #12
 8006c9e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ca2:	e853 3f00 	ldrex	r3, [r3]
 8006ca6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006caa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006cae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	330c      	adds	r3, #12
 8006cb6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006cb8:	643a      	str	r2, [r7, #64]	; 0x40
 8006cba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cbc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006cbe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006cc0:	e841 2300 	strex	r3, r2, [r1]
 8006cc4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d1e5      	bne.n	8006c98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	3314      	adds	r3, #20
 8006cd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd4:	6a3b      	ldr	r3, [r7, #32]
 8006cd6:	e853 3f00 	ldrex	r3, [r3]
 8006cda:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	f023 0301 	bic.w	r3, r3, #1
 8006ce2:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	3314      	adds	r3, #20
 8006cea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cec:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006cee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cf4:	e841 2300 	strex	r3, r2, [r1]
 8006cf8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1e5      	bne.n	8006ccc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d119      	bne.n	8006d3c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	330c      	adds	r3, #12
 8006d0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	e853 3f00 	ldrex	r3, [r3]
 8006d16:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	f023 0310 	bic.w	r3, r3, #16
 8006d1e:	647b      	str	r3, [r7, #68]	; 0x44
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	330c      	adds	r3, #12
 8006d26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d28:	61ba      	str	r2, [r7, #24]
 8006d2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2c:	6979      	ldr	r1, [r7, #20]
 8006d2e:	69ba      	ldr	r2, [r7, #24]
 8006d30:	e841 2300 	strex	r3, r2, [r1]
 8006d34:	613b      	str	r3, [r7, #16]
   return(result);
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d1e5      	bne.n	8006d08 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2220      	movs	r2, #32
 8006d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006d4a:	bf00      	nop
 8006d4c:	3754      	adds	r7, #84	; 0x54
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr

08006d56 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d56:	b580      	push	{r7, lr}
 8006d58:	b084      	sub	sp, #16
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d62:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2200      	movs	r2, #0
 8006d68:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d70:	68f8      	ldr	r0, [r7, #12]
 8006d72:	f7ff ff39 	bl	8006be8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d76:	bf00      	nop
 8006d78:	3710      	adds	r7, #16
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006d7e:	b480      	push	{r7}
 8006d80:	b085      	sub	sp, #20
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	2b21      	cmp	r3, #33	; 0x21
 8006d90:	d13e      	bne.n	8006e10 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d9a:	d114      	bne.n	8006dc6 <UART_Transmit_IT+0x48>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	691b      	ldr	r3, [r3, #16]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d110      	bne.n	8006dc6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6a1b      	ldr	r3, [r3, #32]
 8006da8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	881b      	ldrh	r3, [r3, #0]
 8006dae:	461a      	mov	r2, r3
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006db8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a1b      	ldr	r3, [r3, #32]
 8006dbe:	1c9a      	adds	r2, r3, #2
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	621a      	str	r2, [r3, #32]
 8006dc4:	e008      	b.n	8006dd8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a1b      	ldr	r3, [r3, #32]
 8006dca:	1c59      	adds	r1, r3, #1
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	6211      	str	r1, [r2, #32]
 8006dd0:	781a      	ldrb	r2, [r3, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	3b01      	subs	r3, #1
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	4619      	mov	r1, r3
 8006de6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d10f      	bne.n	8006e0c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	68da      	ldr	r2, [r3, #12]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006dfa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	68da      	ldr	r2, [r3, #12]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e0a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	e000      	b.n	8006e12 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006e10:	2302      	movs	r3, #2
  }
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3714      	adds	r7, #20
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr

08006e1e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e1e:	b580      	push	{r7, lr}
 8006e20:	b082      	sub	sp, #8
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	68da      	ldr	r2, [r3, #12]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e34:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2220      	movs	r2, #32
 8006e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f7fa f944 	bl	80010cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3708      	adds	r7, #8
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}

08006e4e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b08c      	sub	sp, #48	; 0x30
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	2b22      	cmp	r3, #34	; 0x22
 8006e60:	f040 80ab 	bne.w	8006fba <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e6c:	d117      	bne.n	8006e9e <UART_Receive_IT+0x50>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d113      	bne.n	8006e9e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006e76:	2300      	movs	r3, #0
 8006e78:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e7e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e90:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e96:	1c9a      	adds	r2, r3, #2
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	629a      	str	r2, [r3, #40]	; 0x28
 8006e9c:	e026      	b.n	8006eec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eb0:	d007      	beq.n	8006ec2 <UART_Receive_IT+0x74>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d10a      	bne.n	8006ed0 <UART_Receive_IT+0x82>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	691b      	ldr	r3, [r3, #16]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d106      	bne.n	8006ed0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	b2da      	uxtb	r2, r3
 8006eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ecc:	701a      	strb	r2, [r3, #0]
 8006ece:	e008      	b.n	8006ee2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006edc:	b2da      	uxtb	r2, r3
 8006ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ee6:	1c5a      	adds	r2, r3, #1
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	4619      	mov	r1, r3
 8006efa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d15a      	bne.n	8006fb6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68da      	ldr	r2, [r3, #12]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f022 0220 	bic.w	r2, r2, #32
 8006f0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	68da      	ldr	r2, [r3, #12]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	695a      	ldr	r2, [r3, #20]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f022 0201 	bic.w	r2, r2, #1
 8006f2e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2220      	movs	r2, #32
 8006f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d135      	bne.n	8006fac <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	330c      	adds	r3, #12
 8006f4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	e853 3f00 	ldrex	r3, [r3]
 8006f54:	613b      	str	r3, [r7, #16]
   return(result);
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	f023 0310 	bic.w	r3, r3, #16
 8006f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	330c      	adds	r3, #12
 8006f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f66:	623a      	str	r2, [r7, #32]
 8006f68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6a:	69f9      	ldr	r1, [r7, #28]
 8006f6c:	6a3a      	ldr	r2, [r7, #32]
 8006f6e:	e841 2300 	strex	r3, r2, [r1]
 8006f72:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d1e5      	bne.n	8006f46 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 0310 	and.w	r3, r3, #16
 8006f84:	2b10      	cmp	r3, #16
 8006f86:	d10a      	bne.n	8006f9e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f88:	2300      	movs	r3, #0
 8006f8a:	60fb      	str	r3, [r7, #12]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	60fb      	str	r3, [r7, #12]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	60fb      	str	r3, [r7, #12]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f7ff fe29 	bl	8006bfc <HAL_UARTEx_RxEventCallback>
 8006faa:	e002      	b.n	8006fb2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f7fa f8c1 	bl	8001134 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	e002      	b.n	8006fbc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	e000      	b.n	8006fbc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006fba:	2302      	movs	r3, #2
  }
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3730      	adds	r7, #48	; 0x30
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <siprintf>:
 8006fc4:	b40e      	push	{r1, r2, r3}
 8006fc6:	b500      	push	{lr}
 8006fc8:	b09c      	sub	sp, #112	; 0x70
 8006fca:	ab1d      	add	r3, sp, #116	; 0x74
 8006fcc:	9002      	str	r0, [sp, #8]
 8006fce:	9006      	str	r0, [sp, #24]
 8006fd0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006fd4:	4809      	ldr	r0, [pc, #36]	; (8006ffc <siprintf+0x38>)
 8006fd6:	9107      	str	r1, [sp, #28]
 8006fd8:	9104      	str	r1, [sp, #16]
 8006fda:	4909      	ldr	r1, [pc, #36]	; (8007000 <siprintf+0x3c>)
 8006fdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fe0:	9105      	str	r1, [sp, #20]
 8006fe2:	6800      	ldr	r0, [r0, #0]
 8006fe4:	9301      	str	r3, [sp, #4]
 8006fe6:	a902      	add	r1, sp, #8
 8006fe8:	f000 f9b2 	bl	8007350 <_svfiprintf_r>
 8006fec:	9b02      	ldr	r3, [sp, #8]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	701a      	strb	r2, [r3, #0]
 8006ff2:	b01c      	add	sp, #112	; 0x70
 8006ff4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ff8:	b003      	add	sp, #12
 8006ffa:	4770      	bx	lr
 8006ffc:	20000060 	.word	0x20000060
 8007000:	ffff0208 	.word	0xffff0208

08007004 <_vsiprintf_r>:
 8007004:	b500      	push	{lr}
 8007006:	b09b      	sub	sp, #108	; 0x6c
 8007008:	9100      	str	r1, [sp, #0]
 800700a:	9104      	str	r1, [sp, #16]
 800700c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007010:	9105      	str	r1, [sp, #20]
 8007012:	9102      	str	r1, [sp, #8]
 8007014:	4905      	ldr	r1, [pc, #20]	; (800702c <_vsiprintf_r+0x28>)
 8007016:	9103      	str	r1, [sp, #12]
 8007018:	4669      	mov	r1, sp
 800701a:	f000 f999 	bl	8007350 <_svfiprintf_r>
 800701e:	9b00      	ldr	r3, [sp, #0]
 8007020:	2200      	movs	r2, #0
 8007022:	701a      	strb	r2, [r3, #0]
 8007024:	b01b      	add	sp, #108	; 0x6c
 8007026:	f85d fb04 	ldr.w	pc, [sp], #4
 800702a:	bf00      	nop
 800702c:	ffff0208 	.word	0xffff0208

08007030 <vsiprintf>:
 8007030:	4613      	mov	r3, r2
 8007032:	460a      	mov	r2, r1
 8007034:	4601      	mov	r1, r0
 8007036:	4802      	ldr	r0, [pc, #8]	; (8007040 <vsiprintf+0x10>)
 8007038:	6800      	ldr	r0, [r0, #0]
 800703a:	f7ff bfe3 	b.w	8007004 <_vsiprintf_r>
 800703e:	bf00      	nop
 8007040:	20000060 	.word	0x20000060

08007044 <memset>:
 8007044:	4402      	add	r2, r0
 8007046:	4603      	mov	r3, r0
 8007048:	4293      	cmp	r3, r2
 800704a:	d100      	bne.n	800704e <memset+0xa>
 800704c:	4770      	bx	lr
 800704e:	f803 1b01 	strb.w	r1, [r3], #1
 8007052:	e7f9      	b.n	8007048 <memset+0x4>

08007054 <__errno>:
 8007054:	4b01      	ldr	r3, [pc, #4]	; (800705c <__errno+0x8>)
 8007056:	6818      	ldr	r0, [r3, #0]
 8007058:	4770      	bx	lr
 800705a:	bf00      	nop
 800705c:	20000060 	.word	0x20000060

08007060 <__libc_init_array>:
 8007060:	b570      	push	{r4, r5, r6, lr}
 8007062:	4d0d      	ldr	r5, [pc, #52]	; (8007098 <__libc_init_array+0x38>)
 8007064:	4c0d      	ldr	r4, [pc, #52]	; (800709c <__libc_init_array+0x3c>)
 8007066:	1b64      	subs	r4, r4, r5
 8007068:	10a4      	asrs	r4, r4, #2
 800706a:	2600      	movs	r6, #0
 800706c:	42a6      	cmp	r6, r4
 800706e:	d109      	bne.n	8007084 <__libc_init_array+0x24>
 8007070:	4d0b      	ldr	r5, [pc, #44]	; (80070a0 <__libc_init_array+0x40>)
 8007072:	4c0c      	ldr	r4, [pc, #48]	; (80070a4 <__libc_init_array+0x44>)
 8007074:	f000 fc6a 	bl	800794c <_init>
 8007078:	1b64      	subs	r4, r4, r5
 800707a:	10a4      	asrs	r4, r4, #2
 800707c:	2600      	movs	r6, #0
 800707e:	42a6      	cmp	r6, r4
 8007080:	d105      	bne.n	800708e <__libc_init_array+0x2e>
 8007082:	bd70      	pop	{r4, r5, r6, pc}
 8007084:	f855 3b04 	ldr.w	r3, [r5], #4
 8007088:	4798      	blx	r3
 800708a:	3601      	adds	r6, #1
 800708c:	e7ee      	b.n	800706c <__libc_init_array+0xc>
 800708e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007092:	4798      	blx	r3
 8007094:	3601      	adds	r6, #1
 8007096:	e7f2      	b.n	800707e <__libc_init_array+0x1e>
 8007098:	080082e4 	.word	0x080082e4
 800709c:	080082e4 	.word	0x080082e4
 80070a0:	080082e4 	.word	0x080082e4
 80070a4:	080082e8 	.word	0x080082e8

080070a8 <__retarget_lock_acquire_recursive>:
 80070a8:	4770      	bx	lr

080070aa <__retarget_lock_release_recursive>:
 80070aa:	4770      	bx	lr

080070ac <_free_r>:
 80070ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070ae:	2900      	cmp	r1, #0
 80070b0:	d044      	beq.n	800713c <_free_r+0x90>
 80070b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070b6:	9001      	str	r0, [sp, #4]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	f1a1 0404 	sub.w	r4, r1, #4
 80070be:	bfb8      	it	lt
 80070c0:	18e4      	addlt	r4, r4, r3
 80070c2:	f000 f8df 	bl	8007284 <__malloc_lock>
 80070c6:	4a1e      	ldr	r2, [pc, #120]	; (8007140 <_free_r+0x94>)
 80070c8:	9801      	ldr	r0, [sp, #4]
 80070ca:	6813      	ldr	r3, [r2, #0]
 80070cc:	b933      	cbnz	r3, 80070dc <_free_r+0x30>
 80070ce:	6063      	str	r3, [r4, #4]
 80070d0:	6014      	str	r4, [r2, #0]
 80070d2:	b003      	add	sp, #12
 80070d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80070d8:	f000 b8da 	b.w	8007290 <__malloc_unlock>
 80070dc:	42a3      	cmp	r3, r4
 80070de:	d908      	bls.n	80070f2 <_free_r+0x46>
 80070e0:	6825      	ldr	r5, [r4, #0]
 80070e2:	1961      	adds	r1, r4, r5
 80070e4:	428b      	cmp	r3, r1
 80070e6:	bf01      	itttt	eq
 80070e8:	6819      	ldreq	r1, [r3, #0]
 80070ea:	685b      	ldreq	r3, [r3, #4]
 80070ec:	1949      	addeq	r1, r1, r5
 80070ee:	6021      	streq	r1, [r4, #0]
 80070f0:	e7ed      	b.n	80070ce <_free_r+0x22>
 80070f2:	461a      	mov	r2, r3
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	b10b      	cbz	r3, 80070fc <_free_r+0x50>
 80070f8:	42a3      	cmp	r3, r4
 80070fa:	d9fa      	bls.n	80070f2 <_free_r+0x46>
 80070fc:	6811      	ldr	r1, [r2, #0]
 80070fe:	1855      	adds	r5, r2, r1
 8007100:	42a5      	cmp	r5, r4
 8007102:	d10b      	bne.n	800711c <_free_r+0x70>
 8007104:	6824      	ldr	r4, [r4, #0]
 8007106:	4421      	add	r1, r4
 8007108:	1854      	adds	r4, r2, r1
 800710a:	42a3      	cmp	r3, r4
 800710c:	6011      	str	r1, [r2, #0]
 800710e:	d1e0      	bne.n	80070d2 <_free_r+0x26>
 8007110:	681c      	ldr	r4, [r3, #0]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	6053      	str	r3, [r2, #4]
 8007116:	440c      	add	r4, r1
 8007118:	6014      	str	r4, [r2, #0]
 800711a:	e7da      	b.n	80070d2 <_free_r+0x26>
 800711c:	d902      	bls.n	8007124 <_free_r+0x78>
 800711e:	230c      	movs	r3, #12
 8007120:	6003      	str	r3, [r0, #0]
 8007122:	e7d6      	b.n	80070d2 <_free_r+0x26>
 8007124:	6825      	ldr	r5, [r4, #0]
 8007126:	1961      	adds	r1, r4, r5
 8007128:	428b      	cmp	r3, r1
 800712a:	bf04      	itt	eq
 800712c:	6819      	ldreq	r1, [r3, #0]
 800712e:	685b      	ldreq	r3, [r3, #4]
 8007130:	6063      	str	r3, [r4, #4]
 8007132:	bf04      	itt	eq
 8007134:	1949      	addeq	r1, r1, r5
 8007136:	6021      	streq	r1, [r4, #0]
 8007138:	6054      	str	r4, [r2, #4]
 800713a:	e7ca      	b.n	80070d2 <_free_r+0x26>
 800713c:	b003      	add	sp, #12
 800713e:	bd30      	pop	{r4, r5, pc}
 8007140:	20000e00 	.word	0x20000e00

08007144 <sbrk_aligned>:
 8007144:	b570      	push	{r4, r5, r6, lr}
 8007146:	4e0e      	ldr	r6, [pc, #56]	; (8007180 <sbrk_aligned+0x3c>)
 8007148:	460c      	mov	r4, r1
 800714a:	6831      	ldr	r1, [r6, #0]
 800714c:	4605      	mov	r5, r0
 800714e:	b911      	cbnz	r1, 8007156 <sbrk_aligned+0x12>
 8007150:	f000 fba6 	bl	80078a0 <_sbrk_r>
 8007154:	6030      	str	r0, [r6, #0]
 8007156:	4621      	mov	r1, r4
 8007158:	4628      	mov	r0, r5
 800715a:	f000 fba1 	bl	80078a0 <_sbrk_r>
 800715e:	1c43      	adds	r3, r0, #1
 8007160:	d00a      	beq.n	8007178 <sbrk_aligned+0x34>
 8007162:	1cc4      	adds	r4, r0, #3
 8007164:	f024 0403 	bic.w	r4, r4, #3
 8007168:	42a0      	cmp	r0, r4
 800716a:	d007      	beq.n	800717c <sbrk_aligned+0x38>
 800716c:	1a21      	subs	r1, r4, r0
 800716e:	4628      	mov	r0, r5
 8007170:	f000 fb96 	bl	80078a0 <_sbrk_r>
 8007174:	3001      	adds	r0, #1
 8007176:	d101      	bne.n	800717c <sbrk_aligned+0x38>
 8007178:	f04f 34ff 	mov.w	r4, #4294967295
 800717c:	4620      	mov	r0, r4
 800717e:	bd70      	pop	{r4, r5, r6, pc}
 8007180:	20000e04 	.word	0x20000e04

08007184 <_malloc_r>:
 8007184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007188:	1ccd      	adds	r5, r1, #3
 800718a:	f025 0503 	bic.w	r5, r5, #3
 800718e:	3508      	adds	r5, #8
 8007190:	2d0c      	cmp	r5, #12
 8007192:	bf38      	it	cc
 8007194:	250c      	movcc	r5, #12
 8007196:	2d00      	cmp	r5, #0
 8007198:	4607      	mov	r7, r0
 800719a:	db01      	blt.n	80071a0 <_malloc_r+0x1c>
 800719c:	42a9      	cmp	r1, r5
 800719e:	d905      	bls.n	80071ac <_malloc_r+0x28>
 80071a0:	230c      	movs	r3, #12
 80071a2:	603b      	str	r3, [r7, #0]
 80071a4:	2600      	movs	r6, #0
 80071a6:	4630      	mov	r0, r6
 80071a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007280 <_malloc_r+0xfc>
 80071b0:	f000 f868 	bl	8007284 <__malloc_lock>
 80071b4:	f8d8 3000 	ldr.w	r3, [r8]
 80071b8:	461c      	mov	r4, r3
 80071ba:	bb5c      	cbnz	r4, 8007214 <_malloc_r+0x90>
 80071bc:	4629      	mov	r1, r5
 80071be:	4638      	mov	r0, r7
 80071c0:	f7ff ffc0 	bl	8007144 <sbrk_aligned>
 80071c4:	1c43      	adds	r3, r0, #1
 80071c6:	4604      	mov	r4, r0
 80071c8:	d155      	bne.n	8007276 <_malloc_r+0xf2>
 80071ca:	f8d8 4000 	ldr.w	r4, [r8]
 80071ce:	4626      	mov	r6, r4
 80071d0:	2e00      	cmp	r6, #0
 80071d2:	d145      	bne.n	8007260 <_malloc_r+0xdc>
 80071d4:	2c00      	cmp	r4, #0
 80071d6:	d048      	beq.n	800726a <_malloc_r+0xe6>
 80071d8:	6823      	ldr	r3, [r4, #0]
 80071da:	4631      	mov	r1, r6
 80071dc:	4638      	mov	r0, r7
 80071de:	eb04 0903 	add.w	r9, r4, r3
 80071e2:	f000 fb5d 	bl	80078a0 <_sbrk_r>
 80071e6:	4581      	cmp	r9, r0
 80071e8:	d13f      	bne.n	800726a <_malloc_r+0xe6>
 80071ea:	6821      	ldr	r1, [r4, #0]
 80071ec:	1a6d      	subs	r5, r5, r1
 80071ee:	4629      	mov	r1, r5
 80071f0:	4638      	mov	r0, r7
 80071f2:	f7ff ffa7 	bl	8007144 <sbrk_aligned>
 80071f6:	3001      	adds	r0, #1
 80071f8:	d037      	beq.n	800726a <_malloc_r+0xe6>
 80071fa:	6823      	ldr	r3, [r4, #0]
 80071fc:	442b      	add	r3, r5
 80071fe:	6023      	str	r3, [r4, #0]
 8007200:	f8d8 3000 	ldr.w	r3, [r8]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d038      	beq.n	800727a <_malloc_r+0xf6>
 8007208:	685a      	ldr	r2, [r3, #4]
 800720a:	42a2      	cmp	r2, r4
 800720c:	d12b      	bne.n	8007266 <_malloc_r+0xe2>
 800720e:	2200      	movs	r2, #0
 8007210:	605a      	str	r2, [r3, #4]
 8007212:	e00f      	b.n	8007234 <_malloc_r+0xb0>
 8007214:	6822      	ldr	r2, [r4, #0]
 8007216:	1b52      	subs	r2, r2, r5
 8007218:	d41f      	bmi.n	800725a <_malloc_r+0xd6>
 800721a:	2a0b      	cmp	r2, #11
 800721c:	d917      	bls.n	800724e <_malloc_r+0xca>
 800721e:	1961      	adds	r1, r4, r5
 8007220:	42a3      	cmp	r3, r4
 8007222:	6025      	str	r5, [r4, #0]
 8007224:	bf18      	it	ne
 8007226:	6059      	strne	r1, [r3, #4]
 8007228:	6863      	ldr	r3, [r4, #4]
 800722a:	bf08      	it	eq
 800722c:	f8c8 1000 	streq.w	r1, [r8]
 8007230:	5162      	str	r2, [r4, r5]
 8007232:	604b      	str	r3, [r1, #4]
 8007234:	4638      	mov	r0, r7
 8007236:	f104 060b 	add.w	r6, r4, #11
 800723a:	f000 f829 	bl	8007290 <__malloc_unlock>
 800723e:	f026 0607 	bic.w	r6, r6, #7
 8007242:	1d23      	adds	r3, r4, #4
 8007244:	1af2      	subs	r2, r6, r3
 8007246:	d0ae      	beq.n	80071a6 <_malloc_r+0x22>
 8007248:	1b9b      	subs	r3, r3, r6
 800724a:	50a3      	str	r3, [r4, r2]
 800724c:	e7ab      	b.n	80071a6 <_malloc_r+0x22>
 800724e:	42a3      	cmp	r3, r4
 8007250:	6862      	ldr	r2, [r4, #4]
 8007252:	d1dd      	bne.n	8007210 <_malloc_r+0x8c>
 8007254:	f8c8 2000 	str.w	r2, [r8]
 8007258:	e7ec      	b.n	8007234 <_malloc_r+0xb0>
 800725a:	4623      	mov	r3, r4
 800725c:	6864      	ldr	r4, [r4, #4]
 800725e:	e7ac      	b.n	80071ba <_malloc_r+0x36>
 8007260:	4634      	mov	r4, r6
 8007262:	6876      	ldr	r6, [r6, #4]
 8007264:	e7b4      	b.n	80071d0 <_malloc_r+0x4c>
 8007266:	4613      	mov	r3, r2
 8007268:	e7cc      	b.n	8007204 <_malloc_r+0x80>
 800726a:	230c      	movs	r3, #12
 800726c:	603b      	str	r3, [r7, #0]
 800726e:	4638      	mov	r0, r7
 8007270:	f000 f80e 	bl	8007290 <__malloc_unlock>
 8007274:	e797      	b.n	80071a6 <_malloc_r+0x22>
 8007276:	6025      	str	r5, [r4, #0]
 8007278:	e7dc      	b.n	8007234 <_malloc_r+0xb0>
 800727a:	605b      	str	r3, [r3, #4]
 800727c:	deff      	udf	#255	; 0xff
 800727e:	bf00      	nop
 8007280:	20000e00 	.word	0x20000e00

08007284 <__malloc_lock>:
 8007284:	4801      	ldr	r0, [pc, #4]	; (800728c <__malloc_lock+0x8>)
 8007286:	f7ff bf0f 	b.w	80070a8 <__retarget_lock_acquire_recursive>
 800728a:	bf00      	nop
 800728c:	20000dfc 	.word	0x20000dfc

08007290 <__malloc_unlock>:
 8007290:	4801      	ldr	r0, [pc, #4]	; (8007298 <__malloc_unlock+0x8>)
 8007292:	f7ff bf0a 	b.w	80070aa <__retarget_lock_release_recursive>
 8007296:	bf00      	nop
 8007298:	20000dfc 	.word	0x20000dfc

0800729c <__ssputs_r>:
 800729c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072a0:	688e      	ldr	r6, [r1, #8]
 80072a2:	461f      	mov	r7, r3
 80072a4:	42be      	cmp	r6, r7
 80072a6:	680b      	ldr	r3, [r1, #0]
 80072a8:	4682      	mov	sl, r0
 80072aa:	460c      	mov	r4, r1
 80072ac:	4690      	mov	r8, r2
 80072ae:	d82c      	bhi.n	800730a <__ssputs_r+0x6e>
 80072b0:	898a      	ldrh	r2, [r1, #12]
 80072b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80072b6:	d026      	beq.n	8007306 <__ssputs_r+0x6a>
 80072b8:	6965      	ldr	r5, [r4, #20]
 80072ba:	6909      	ldr	r1, [r1, #16]
 80072bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80072c0:	eba3 0901 	sub.w	r9, r3, r1
 80072c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80072c8:	1c7b      	adds	r3, r7, #1
 80072ca:	444b      	add	r3, r9
 80072cc:	106d      	asrs	r5, r5, #1
 80072ce:	429d      	cmp	r5, r3
 80072d0:	bf38      	it	cc
 80072d2:	461d      	movcc	r5, r3
 80072d4:	0553      	lsls	r3, r2, #21
 80072d6:	d527      	bpl.n	8007328 <__ssputs_r+0x8c>
 80072d8:	4629      	mov	r1, r5
 80072da:	f7ff ff53 	bl	8007184 <_malloc_r>
 80072de:	4606      	mov	r6, r0
 80072e0:	b360      	cbz	r0, 800733c <__ssputs_r+0xa0>
 80072e2:	6921      	ldr	r1, [r4, #16]
 80072e4:	464a      	mov	r2, r9
 80072e6:	f000 faeb 	bl	80078c0 <memcpy>
 80072ea:	89a3      	ldrh	r3, [r4, #12]
 80072ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80072f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072f4:	81a3      	strh	r3, [r4, #12]
 80072f6:	6126      	str	r6, [r4, #16]
 80072f8:	6165      	str	r5, [r4, #20]
 80072fa:	444e      	add	r6, r9
 80072fc:	eba5 0509 	sub.w	r5, r5, r9
 8007300:	6026      	str	r6, [r4, #0]
 8007302:	60a5      	str	r5, [r4, #8]
 8007304:	463e      	mov	r6, r7
 8007306:	42be      	cmp	r6, r7
 8007308:	d900      	bls.n	800730c <__ssputs_r+0x70>
 800730a:	463e      	mov	r6, r7
 800730c:	6820      	ldr	r0, [r4, #0]
 800730e:	4632      	mov	r2, r6
 8007310:	4641      	mov	r1, r8
 8007312:	f000 faab 	bl	800786c <memmove>
 8007316:	68a3      	ldr	r3, [r4, #8]
 8007318:	1b9b      	subs	r3, r3, r6
 800731a:	60a3      	str	r3, [r4, #8]
 800731c:	6823      	ldr	r3, [r4, #0]
 800731e:	4433      	add	r3, r6
 8007320:	6023      	str	r3, [r4, #0]
 8007322:	2000      	movs	r0, #0
 8007324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007328:	462a      	mov	r2, r5
 800732a:	f000 fad7 	bl	80078dc <_realloc_r>
 800732e:	4606      	mov	r6, r0
 8007330:	2800      	cmp	r0, #0
 8007332:	d1e0      	bne.n	80072f6 <__ssputs_r+0x5a>
 8007334:	6921      	ldr	r1, [r4, #16]
 8007336:	4650      	mov	r0, sl
 8007338:	f7ff feb8 	bl	80070ac <_free_r>
 800733c:	230c      	movs	r3, #12
 800733e:	f8ca 3000 	str.w	r3, [sl]
 8007342:	89a3      	ldrh	r3, [r4, #12]
 8007344:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007348:	81a3      	strh	r3, [r4, #12]
 800734a:	f04f 30ff 	mov.w	r0, #4294967295
 800734e:	e7e9      	b.n	8007324 <__ssputs_r+0x88>

08007350 <_svfiprintf_r>:
 8007350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007354:	4698      	mov	r8, r3
 8007356:	898b      	ldrh	r3, [r1, #12]
 8007358:	061b      	lsls	r3, r3, #24
 800735a:	b09d      	sub	sp, #116	; 0x74
 800735c:	4607      	mov	r7, r0
 800735e:	460d      	mov	r5, r1
 8007360:	4614      	mov	r4, r2
 8007362:	d50e      	bpl.n	8007382 <_svfiprintf_r+0x32>
 8007364:	690b      	ldr	r3, [r1, #16]
 8007366:	b963      	cbnz	r3, 8007382 <_svfiprintf_r+0x32>
 8007368:	2140      	movs	r1, #64	; 0x40
 800736a:	f7ff ff0b 	bl	8007184 <_malloc_r>
 800736e:	6028      	str	r0, [r5, #0]
 8007370:	6128      	str	r0, [r5, #16]
 8007372:	b920      	cbnz	r0, 800737e <_svfiprintf_r+0x2e>
 8007374:	230c      	movs	r3, #12
 8007376:	603b      	str	r3, [r7, #0]
 8007378:	f04f 30ff 	mov.w	r0, #4294967295
 800737c:	e0d0      	b.n	8007520 <_svfiprintf_r+0x1d0>
 800737e:	2340      	movs	r3, #64	; 0x40
 8007380:	616b      	str	r3, [r5, #20]
 8007382:	2300      	movs	r3, #0
 8007384:	9309      	str	r3, [sp, #36]	; 0x24
 8007386:	2320      	movs	r3, #32
 8007388:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800738c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007390:	2330      	movs	r3, #48	; 0x30
 8007392:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007538 <_svfiprintf_r+0x1e8>
 8007396:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800739a:	f04f 0901 	mov.w	r9, #1
 800739e:	4623      	mov	r3, r4
 80073a0:	469a      	mov	sl, r3
 80073a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073a6:	b10a      	cbz	r2, 80073ac <_svfiprintf_r+0x5c>
 80073a8:	2a25      	cmp	r2, #37	; 0x25
 80073aa:	d1f9      	bne.n	80073a0 <_svfiprintf_r+0x50>
 80073ac:	ebba 0b04 	subs.w	fp, sl, r4
 80073b0:	d00b      	beq.n	80073ca <_svfiprintf_r+0x7a>
 80073b2:	465b      	mov	r3, fp
 80073b4:	4622      	mov	r2, r4
 80073b6:	4629      	mov	r1, r5
 80073b8:	4638      	mov	r0, r7
 80073ba:	f7ff ff6f 	bl	800729c <__ssputs_r>
 80073be:	3001      	adds	r0, #1
 80073c0:	f000 80a9 	beq.w	8007516 <_svfiprintf_r+0x1c6>
 80073c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073c6:	445a      	add	r2, fp
 80073c8:	9209      	str	r2, [sp, #36]	; 0x24
 80073ca:	f89a 3000 	ldrb.w	r3, [sl]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	f000 80a1 	beq.w	8007516 <_svfiprintf_r+0x1c6>
 80073d4:	2300      	movs	r3, #0
 80073d6:	f04f 32ff 	mov.w	r2, #4294967295
 80073da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073de:	f10a 0a01 	add.w	sl, sl, #1
 80073e2:	9304      	str	r3, [sp, #16]
 80073e4:	9307      	str	r3, [sp, #28]
 80073e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073ea:	931a      	str	r3, [sp, #104]	; 0x68
 80073ec:	4654      	mov	r4, sl
 80073ee:	2205      	movs	r2, #5
 80073f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073f4:	4850      	ldr	r0, [pc, #320]	; (8007538 <_svfiprintf_r+0x1e8>)
 80073f6:	f7f8 fefb 	bl	80001f0 <memchr>
 80073fa:	9a04      	ldr	r2, [sp, #16]
 80073fc:	b9d8      	cbnz	r0, 8007436 <_svfiprintf_r+0xe6>
 80073fe:	06d0      	lsls	r0, r2, #27
 8007400:	bf44      	itt	mi
 8007402:	2320      	movmi	r3, #32
 8007404:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007408:	0711      	lsls	r1, r2, #28
 800740a:	bf44      	itt	mi
 800740c:	232b      	movmi	r3, #43	; 0x2b
 800740e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007412:	f89a 3000 	ldrb.w	r3, [sl]
 8007416:	2b2a      	cmp	r3, #42	; 0x2a
 8007418:	d015      	beq.n	8007446 <_svfiprintf_r+0xf6>
 800741a:	9a07      	ldr	r2, [sp, #28]
 800741c:	4654      	mov	r4, sl
 800741e:	2000      	movs	r0, #0
 8007420:	f04f 0c0a 	mov.w	ip, #10
 8007424:	4621      	mov	r1, r4
 8007426:	f811 3b01 	ldrb.w	r3, [r1], #1
 800742a:	3b30      	subs	r3, #48	; 0x30
 800742c:	2b09      	cmp	r3, #9
 800742e:	d94d      	bls.n	80074cc <_svfiprintf_r+0x17c>
 8007430:	b1b0      	cbz	r0, 8007460 <_svfiprintf_r+0x110>
 8007432:	9207      	str	r2, [sp, #28]
 8007434:	e014      	b.n	8007460 <_svfiprintf_r+0x110>
 8007436:	eba0 0308 	sub.w	r3, r0, r8
 800743a:	fa09 f303 	lsl.w	r3, r9, r3
 800743e:	4313      	orrs	r3, r2
 8007440:	9304      	str	r3, [sp, #16]
 8007442:	46a2      	mov	sl, r4
 8007444:	e7d2      	b.n	80073ec <_svfiprintf_r+0x9c>
 8007446:	9b03      	ldr	r3, [sp, #12]
 8007448:	1d19      	adds	r1, r3, #4
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	9103      	str	r1, [sp, #12]
 800744e:	2b00      	cmp	r3, #0
 8007450:	bfbb      	ittet	lt
 8007452:	425b      	neglt	r3, r3
 8007454:	f042 0202 	orrlt.w	r2, r2, #2
 8007458:	9307      	strge	r3, [sp, #28]
 800745a:	9307      	strlt	r3, [sp, #28]
 800745c:	bfb8      	it	lt
 800745e:	9204      	strlt	r2, [sp, #16]
 8007460:	7823      	ldrb	r3, [r4, #0]
 8007462:	2b2e      	cmp	r3, #46	; 0x2e
 8007464:	d10c      	bne.n	8007480 <_svfiprintf_r+0x130>
 8007466:	7863      	ldrb	r3, [r4, #1]
 8007468:	2b2a      	cmp	r3, #42	; 0x2a
 800746a:	d134      	bne.n	80074d6 <_svfiprintf_r+0x186>
 800746c:	9b03      	ldr	r3, [sp, #12]
 800746e:	1d1a      	adds	r2, r3, #4
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	9203      	str	r2, [sp, #12]
 8007474:	2b00      	cmp	r3, #0
 8007476:	bfb8      	it	lt
 8007478:	f04f 33ff 	movlt.w	r3, #4294967295
 800747c:	3402      	adds	r4, #2
 800747e:	9305      	str	r3, [sp, #20]
 8007480:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007548 <_svfiprintf_r+0x1f8>
 8007484:	7821      	ldrb	r1, [r4, #0]
 8007486:	2203      	movs	r2, #3
 8007488:	4650      	mov	r0, sl
 800748a:	f7f8 feb1 	bl	80001f0 <memchr>
 800748e:	b138      	cbz	r0, 80074a0 <_svfiprintf_r+0x150>
 8007490:	9b04      	ldr	r3, [sp, #16]
 8007492:	eba0 000a 	sub.w	r0, r0, sl
 8007496:	2240      	movs	r2, #64	; 0x40
 8007498:	4082      	lsls	r2, r0
 800749a:	4313      	orrs	r3, r2
 800749c:	3401      	adds	r4, #1
 800749e:	9304      	str	r3, [sp, #16]
 80074a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074a4:	4825      	ldr	r0, [pc, #148]	; (800753c <_svfiprintf_r+0x1ec>)
 80074a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80074aa:	2206      	movs	r2, #6
 80074ac:	f7f8 fea0 	bl	80001f0 <memchr>
 80074b0:	2800      	cmp	r0, #0
 80074b2:	d038      	beq.n	8007526 <_svfiprintf_r+0x1d6>
 80074b4:	4b22      	ldr	r3, [pc, #136]	; (8007540 <_svfiprintf_r+0x1f0>)
 80074b6:	bb1b      	cbnz	r3, 8007500 <_svfiprintf_r+0x1b0>
 80074b8:	9b03      	ldr	r3, [sp, #12]
 80074ba:	3307      	adds	r3, #7
 80074bc:	f023 0307 	bic.w	r3, r3, #7
 80074c0:	3308      	adds	r3, #8
 80074c2:	9303      	str	r3, [sp, #12]
 80074c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074c6:	4433      	add	r3, r6
 80074c8:	9309      	str	r3, [sp, #36]	; 0x24
 80074ca:	e768      	b.n	800739e <_svfiprintf_r+0x4e>
 80074cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80074d0:	460c      	mov	r4, r1
 80074d2:	2001      	movs	r0, #1
 80074d4:	e7a6      	b.n	8007424 <_svfiprintf_r+0xd4>
 80074d6:	2300      	movs	r3, #0
 80074d8:	3401      	adds	r4, #1
 80074da:	9305      	str	r3, [sp, #20]
 80074dc:	4619      	mov	r1, r3
 80074de:	f04f 0c0a 	mov.w	ip, #10
 80074e2:	4620      	mov	r0, r4
 80074e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074e8:	3a30      	subs	r2, #48	; 0x30
 80074ea:	2a09      	cmp	r2, #9
 80074ec:	d903      	bls.n	80074f6 <_svfiprintf_r+0x1a6>
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d0c6      	beq.n	8007480 <_svfiprintf_r+0x130>
 80074f2:	9105      	str	r1, [sp, #20]
 80074f4:	e7c4      	b.n	8007480 <_svfiprintf_r+0x130>
 80074f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80074fa:	4604      	mov	r4, r0
 80074fc:	2301      	movs	r3, #1
 80074fe:	e7f0      	b.n	80074e2 <_svfiprintf_r+0x192>
 8007500:	ab03      	add	r3, sp, #12
 8007502:	9300      	str	r3, [sp, #0]
 8007504:	462a      	mov	r2, r5
 8007506:	4b0f      	ldr	r3, [pc, #60]	; (8007544 <_svfiprintf_r+0x1f4>)
 8007508:	a904      	add	r1, sp, #16
 800750a:	4638      	mov	r0, r7
 800750c:	f3af 8000 	nop.w
 8007510:	1c42      	adds	r2, r0, #1
 8007512:	4606      	mov	r6, r0
 8007514:	d1d6      	bne.n	80074c4 <_svfiprintf_r+0x174>
 8007516:	89ab      	ldrh	r3, [r5, #12]
 8007518:	065b      	lsls	r3, r3, #25
 800751a:	f53f af2d 	bmi.w	8007378 <_svfiprintf_r+0x28>
 800751e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007520:	b01d      	add	sp, #116	; 0x74
 8007522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007526:	ab03      	add	r3, sp, #12
 8007528:	9300      	str	r3, [sp, #0]
 800752a:	462a      	mov	r2, r5
 800752c:	4b05      	ldr	r3, [pc, #20]	; (8007544 <_svfiprintf_r+0x1f4>)
 800752e:	a904      	add	r1, sp, #16
 8007530:	4638      	mov	r0, r7
 8007532:	f000 f879 	bl	8007628 <_printf_i>
 8007536:	e7eb      	b.n	8007510 <_svfiprintf_r+0x1c0>
 8007538:	080082a8 	.word	0x080082a8
 800753c:	080082b2 	.word	0x080082b2
 8007540:	00000000 	.word	0x00000000
 8007544:	0800729d 	.word	0x0800729d
 8007548:	080082ae 	.word	0x080082ae

0800754c <_printf_common>:
 800754c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007550:	4616      	mov	r6, r2
 8007552:	4699      	mov	r9, r3
 8007554:	688a      	ldr	r2, [r1, #8]
 8007556:	690b      	ldr	r3, [r1, #16]
 8007558:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800755c:	4293      	cmp	r3, r2
 800755e:	bfb8      	it	lt
 8007560:	4613      	movlt	r3, r2
 8007562:	6033      	str	r3, [r6, #0]
 8007564:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007568:	4607      	mov	r7, r0
 800756a:	460c      	mov	r4, r1
 800756c:	b10a      	cbz	r2, 8007572 <_printf_common+0x26>
 800756e:	3301      	adds	r3, #1
 8007570:	6033      	str	r3, [r6, #0]
 8007572:	6823      	ldr	r3, [r4, #0]
 8007574:	0699      	lsls	r1, r3, #26
 8007576:	bf42      	ittt	mi
 8007578:	6833      	ldrmi	r3, [r6, #0]
 800757a:	3302      	addmi	r3, #2
 800757c:	6033      	strmi	r3, [r6, #0]
 800757e:	6825      	ldr	r5, [r4, #0]
 8007580:	f015 0506 	ands.w	r5, r5, #6
 8007584:	d106      	bne.n	8007594 <_printf_common+0x48>
 8007586:	f104 0a19 	add.w	sl, r4, #25
 800758a:	68e3      	ldr	r3, [r4, #12]
 800758c:	6832      	ldr	r2, [r6, #0]
 800758e:	1a9b      	subs	r3, r3, r2
 8007590:	42ab      	cmp	r3, r5
 8007592:	dc26      	bgt.n	80075e2 <_printf_common+0x96>
 8007594:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007598:	1e13      	subs	r3, r2, #0
 800759a:	6822      	ldr	r2, [r4, #0]
 800759c:	bf18      	it	ne
 800759e:	2301      	movne	r3, #1
 80075a0:	0692      	lsls	r2, r2, #26
 80075a2:	d42b      	bmi.n	80075fc <_printf_common+0xb0>
 80075a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80075a8:	4649      	mov	r1, r9
 80075aa:	4638      	mov	r0, r7
 80075ac:	47c0      	blx	r8
 80075ae:	3001      	adds	r0, #1
 80075b0:	d01e      	beq.n	80075f0 <_printf_common+0xa4>
 80075b2:	6823      	ldr	r3, [r4, #0]
 80075b4:	6922      	ldr	r2, [r4, #16]
 80075b6:	f003 0306 	and.w	r3, r3, #6
 80075ba:	2b04      	cmp	r3, #4
 80075bc:	bf02      	ittt	eq
 80075be:	68e5      	ldreq	r5, [r4, #12]
 80075c0:	6833      	ldreq	r3, [r6, #0]
 80075c2:	1aed      	subeq	r5, r5, r3
 80075c4:	68a3      	ldr	r3, [r4, #8]
 80075c6:	bf0c      	ite	eq
 80075c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075cc:	2500      	movne	r5, #0
 80075ce:	4293      	cmp	r3, r2
 80075d0:	bfc4      	itt	gt
 80075d2:	1a9b      	subgt	r3, r3, r2
 80075d4:	18ed      	addgt	r5, r5, r3
 80075d6:	2600      	movs	r6, #0
 80075d8:	341a      	adds	r4, #26
 80075da:	42b5      	cmp	r5, r6
 80075dc:	d11a      	bne.n	8007614 <_printf_common+0xc8>
 80075de:	2000      	movs	r0, #0
 80075e0:	e008      	b.n	80075f4 <_printf_common+0xa8>
 80075e2:	2301      	movs	r3, #1
 80075e4:	4652      	mov	r2, sl
 80075e6:	4649      	mov	r1, r9
 80075e8:	4638      	mov	r0, r7
 80075ea:	47c0      	blx	r8
 80075ec:	3001      	adds	r0, #1
 80075ee:	d103      	bne.n	80075f8 <_printf_common+0xac>
 80075f0:	f04f 30ff 	mov.w	r0, #4294967295
 80075f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075f8:	3501      	adds	r5, #1
 80075fa:	e7c6      	b.n	800758a <_printf_common+0x3e>
 80075fc:	18e1      	adds	r1, r4, r3
 80075fe:	1c5a      	adds	r2, r3, #1
 8007600:	2030      	movs	r0, #48	; 0x30
 8007602:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007606:	4422      	add	r2, r4
 8007608:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800760c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007610:	3302      	adds	r3, #2
 8007612:	e7c7      	b.n	80075a4 <_printf_common+0x58>
 8007614:	2301      	movs	r3, #1
 8007616:	4622      	mov	r2, r4
 8007618:	4649      	mov	r1, r9
 800761a:	4638      	mov	r0, r7
 800761c:	47c0      	blx	r8
 800761e:	3001      	adds	r0, #1
 8007620:	d0e6      	beq.n	80075f0 <_printf_common+0xa4>
 8007622:	3601      	adds	r6, #1
 8007624:	e7d9      	b.n	80075da <_printf_common+0x8e>
	...

08007628 <_printf_i>:
 8007628:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800762c:	7e0f      	ldrb	r7, [r1, #24]
 800762e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007630:	2f78      	cmp	r7, #120	; 0x78
 8007632:	4691      	mov	r9, r2
 8007634:	4680      	mov	r8, r0
 8007636:	460c      	mov	r4, r1
 8007638:	469a      	mov	sl, r3
 800763a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800763e:	d807      	bhi.n	8007650 <_printf_i+0x28>
 8007640:	2f62      	cmp	r7, #98	; 0x62
 8007642:	d80a      	bhi.n	800765a <_printf_i+0x32>
 8007644:	2f00      	cmp	r7, #0
 8007646:	f000 80d4 	beq.w	80077f2 <_printf_i+0x1ca>
 800764a:	2f58      	cmp	r7, #88	; 0x58
 800764c:	f000 80c0 	beq.w	80077d0 <_printf_i+0x1a8>
 8007650:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007654:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007658:	e03a      	b.n	80076d0 <_printf_i+0xa8>
 800765a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800765e:	2b15      	cmp	r3, #21
 8007660:	d8f6      	bhi.n	8007650 <_printf_i+0x28>
 8007662:	a101      	add	r1, pc, #4	; (adr r1, 8007668 <_printf_i+0x40>)
 8007664:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007668:	080076c1 	.word	0x080076c1
 800766c:	080076d5 	.word	0x080076d5
 8007670:	08007651 	.word	0x08007651
 8007674:	08007651 	.word	0x08007651
 8007678:	08007651 	.word	0x08007651
 800767c:	08007651 	.word	0x08007651
 8007680:	080076d5 	.word	0x080076d5
 8007684:	08007651 	.word	0x08007651
 8007688:	08007651 	.word	0x08007651
 800768c:	08007651 	.word	0x08007651
 8007690:	08007651 	.word	0x08007651
 8007694:	080077d9 	.word	0x080077d9
 8007698:	08007701 	.word	0x08007701
 800769c:	08007793 	.word	0x08007793
 80076a0:	08007651 	.word	0x08007651
 80076a4:	08007651 	.word	0x08007651
 80076a8:	080077fb 	.word	0x080077fb
 80076ac:	08007651 	.word	0x08007651
 80076b0:	08007701 	.word	0x08007701
 80076b4:	08007651 	.word	0x08007651
 80076b8:	08007651 	.word	0x08007651
 80076bc:	0800779b 	.word	0x0800779b
 80076c0:	682b      	ldr	r3, [r5, #0]
 80076c2:	1d1a      	adds	r2, r3, #4
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	602a      	str	r2, [r5, #0]
 80076c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80076d0:	2301      	movs	r3, #1
 80076d2:	e09f      	b.n	8007814 <_printf_i+0x1ec>
 80076d4:	6820      	ldr	r0, [r4, #0]
 80076d6:	682b      	ldr	r3, [r5, #0]
 80076d8:	0607      	lsls	r7, r0, #24
 80076da:	f103 0104 	add.w	r1, r3, #4
 80076de:	6029      	str	r1, [r5, #0]
 80076e0:	d501      	bpl.n	80076e6 <_printf_i+0xbe>
 80076e2:	681e      	ldr	r6, [r3, #0]
 80076e4:	e003      	b.n	80076ee <_printf_i+0xc6>
 80076e6:	0646      	lsls	r6, r0, #25
 80076e8:	d5fb      	bpl.n	80076e2 <_printf_i+0xba>
 80076ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 80076ee:	2e00      	cmp	r6, #0
 80076f0:	da03      	bge.n	80076fa <_printf_i+0xd2>
 80076f2:	232d      	movs	r3, #45	; 0x2d
 80076f4:	4276      	negs	r6, r6
 80076f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076fa:	485a      	ldr	r0, [pc, #360]	; (8007864 <_printf_i+0x23c>)
 80076fc:	230a      	movs	r3, #10
 80076fe:	e012      	b.n	8007726 <_printf_i+0xfe>
 8007700:	682b      	ldr	r3, [r5, #0]
 8007702:	6820      	ldr	r0, [r4, #0]
 8007704:	1d19      	adds	r1, r3, #4
 8007706:	6029      	str	r1, [r5, #0]
 8007708:	0605      	lsls	r5, r0, #24
 800770a:	d501      	bpl.n	8007710 <_printf_i+0xe8>
 800770c:	681e      	ldr	r6, [r3, #0]
 800770e:	e002      	b.n	8007716 <_printf_i+0xee>
 8007710:	0641      	lsls	r1, r0, #25
 8007712:	d5fb      	bpl.n	800770c <_printf_i+0xe4>
 8007714:	881e      	ldrh	r6, [r3, #0]
 8007716:	4853      	ldr	r0, [pc, #332]	; (8007864 <_printf_i+0x23c>)
 8007718:	2f6f      	cmp	r7, #111	; 0x6f
 800771a:	bf0c      	ite	eq
 800771c:	2308      	moveq	r3, #8
 800771e:	230a      	movne	r3, #10
 8007720:	2100      	movs	r1, #0
 8007722:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007726:	6865      	ldr	r5, [r4, #4]
 8007728:	60a5      	str	r5, [r4, #8]
 800772a:	2d00      	cmp	r5, #0
 800772c:	bfa2      	ittt	ge
 800772e:	6821      	ldrge	r1, [r4, #0]
 8007730:	f021 0104 	bicge.w	r1, r1, #4
 8007734:	6021      	strge	r1, [r4, #0]
 8007736:	b90e      	cbnz	r6, 800773c <_printf_i+0x114>
 8007738:	2d00      	cmp	r5, #0
 800773a:	d04b      	beq.n	80077d4 <_printf_i+0x1ac>
 800773c:	4615      	mov	r5, r2
 800773e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007742:	fb03 6711 	mls	r7, r3, r1, r6
 8007746:	5dc7      	ldrb	r7, [r0, r7]
 8007748:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800774c:	4637      	mov	r7, r6
 800774e:	42bb      	cmp	r3, r7
 8007750:	460e      	mov	r6, r1
 8007752:	d9f4      	bls.n	800773e <_printf_i+0x116>
 8007754:	2b08      	cmp	r3, #8
 8007756:	d10b      	bne.n	8007770 <_printf_i+0x148>
 8007758:	6823      	ldr	r3, [r4, #0]
 800775a:	07de      	lsls	r6, r3, #31
 800775c:	d508      	bpl.n	8007770 <_printf_i+0x148>
 800775e:	6923      	ldr	r3, [r4, #16]
 8007760:	6861      	ldr	r1, [r4, #4]
 8007762:	4299      	cmp	r1, r3
 8007764:	bfde      	ittt	le
 8007766:	2330      	movle	r3, #48	; 0x30
 8007768:	f805 3c01 	strble.w	r3, [r5, #-1]
 800776c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007770:	1b52      	subs	r2, r2, r5
 8007772:	6122      	str	r2, [r4, #16]
 8007774:	f8cd a000 	str.w	sl, [sp]
 8007778:	464b      	mov	r3, r9
 800777a:	aa03      	add	r2, sp, #12
 800777c:	4621      	mov	r1, r4
 800777e:	4640      	mov	r0, r8
 8007780:	f7ff fee4 	bl	800754c <_printf_common>
 8007784:	3001      	adds	r0, #1
 8007786:	d14a      	bne.n	800781e <_printf_i+0x1f6>
 8007788:	f04f 30ff 	mov.w	r0, #4294967295
 800778c:	b004      	add	sp, #16
 800778e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007792:	6823      	ldr	r3, [r4, #0]
 8007794:	f043 0320 	orr.w	r3, r3, #32
 8007798:	6023      	str	r3, [r4, #0]
 800779a:	4833      	ldr	r0, [pc, #204]	; (8007868 <_printf_i+0x240>)
 800779c:	2778      	movs	r7, #120	; 0x78
 800779e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80077a2:	6823      	ldr	r3, [r4, #0]
 80077a4:	6829      	ldr	r1, [r5, #0]
 80077a6:	061f      	lsls	r7, r3, #24
 80077a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80077ac:	d402      	bmi.n	80077b4 <_printf_i+0x18c>
 80077ae:	065f      	lsls	r7, r3, #25
 80077b0:	bf48      	it	mi
 80077b2:	b2b6      	uxthmi	r6, r6
 80077b4:	07df      	lsls	r7, r3, #31
 80077b6:	bf48      	it	mi
 80077b8:	f043 0320 	orrmi.w	r3, r3, #32
 80077bc:	6029      	str	r1, [r5, #0]
 80077be:	bf48      	it	mi
 80077c0:	6023      	strmi	r3, [r4, #0]
 80077c2:	b91e      	cbnz	r6, 80077cc <_printf_i+0x1a4>
 80077c4:	6823      	ldr	r3, [r4, #0]
 80077c6:	f023 0320 	bic.w	r3, r3, #32
 80077ca:	6023      	str	r3, [r4, #0]
 80077cc:	2310      	movs	r3, #16
 80077ce:	e7a7      	b.n	8007720 <_printf_i+0xf8>
 80077d0:	4824      	ldr	r0, [pc, #144]	; (8007864 <_printf_i+0x23c>)
 80077d2:	e7e4      	b.n	800779e <_printf_i+0x176>
 80077d4:	4615      	mov	r5, r2
 80077d6:	e7bd      	b.n	8007754 <_printf_i+0x12c>
 80077d8:	682b      	ldr	r3, [r5, #0]
 80077da:	6826      	ldr	r6, [r4, #0]
 80077dc:	6961      	ldr	r1, [r4, #20]
 80077de:	1d18      	adds	r0, r3, #4
 80077e0:	6028      	str	r0, [r5, #0]
 80077e2:	0635      	lsls	r5, r6, #24
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	d501      	bpl.n	80077ec <_printf_i+0x1c4>
 80077e8:	6019      	str	r1, [r3, #0]
 80077ea:	e002      	b.n	80077f2 <_printf_i+0x1ca>
 80077ec:	0670      	lsls	r0, r6, #25
 80077ee:	d5fb      	bpl.n	80077e8 <_printf_i+0x1c0>
 80077f0:	8019      	strh	r1, [r3, #0]
 80077f2:	2300      	movs	r3, #0
 80077f4:	6123      	str	r3, [r4, #16]
 80077f6:	4615      	mov	r5, r2
 80077f8:	e7bc      	b.n	8007774 <_printf_i+0x14c>
 80077fa:	682b      	ldr	r3, [r5, #0]
 80077fc:	1d1a      	adds	r2, r3, #4
 80077fe:	602a      	str	r2, [r5, #0]
 8007800:	681d      	ldr	r5, [r3, #0]
 8007802:	6862      	ldr	r2, [r4, #4]
 8007804:	2100      	movs	r1, #0
 8007806:	4628      	mov	r0, r5
 8007808:	f7f8 fcf2 	bl	80001f0 <memchr>
 800780c:	b108      	cbz	r0, 8007812 <_printf_i+0x1ea>
 800780e:	1b40      	subs	r0, r0, r5
 8007810:	6060      	str	r0, [r4, #4]
 8007812:	6863      	ldr	r3, [r4, #4]
 8007814:	6123      	str	r3, [r4, #16]
 8007816:	2300      	movs	r3, #0
 8007818:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800781c:	e7aa      	b.n	8007774 <_printf_i+0x14c>
 800781e:	6923      	ldr	r3, [r4, #16]
 8007820:	462a      	mov	r2, r5
 8007822:	4649      	mov	r1, r9
 8007824:	4640      	mov	r0, r8
 8007826:	47d0      	blx	sl
 8007828:	3001      	adds	r0, #1
 800782a:	d0ad      	beq.n	8007788 <_printf_i+0x160>
 800782c:	6823      	ldr	r3, [r4, #0]
 800782e:	079b      	lsls	r3, r3, #30
 8007830:	d413      	bmi.n	800785a <_printf_i+0x232>
 8007832:	68e0      	ldr	r0, [r4, #12]
 8007834:	9b03      	ldr	r3, [sp, #12]
 8007836:	4298      	cmp	r0, r3
 8007838:	bfb8      	it	lt
 800783a:	4618      	movlt	r0, r3
 800783c:	e7a6      	b.n	800778c <_printf_i+0x164>
 800783e:	2301      	movs	r3, #1
 8007840:	4632      	mov	r2, r6
 8007842:	4649      	mov	r1, r9
 8007844:	4640      	mov	r0, r8
 8007846:	47d0      	blx	sl
 8007848:	3001      	adds	r0, #1
 800784a:	d09d      	beq.n	8007788 <_printf_i+0x160>
 800784c:	3501      	adds	r5, #1
 800784e:	68e3      	ldr	r3, [r4, #12]
 8007850:	9903      	ldr	r1, [sp, #12]
 8007852:	1a5b      	subs	r3, r3, r1
 8007854:	42ab      	cmp	r3, r5
 8007856:	dcf2      	bgt.n	800783e <_printf_i+0x216>
 8007858:	e7eb      	b.n	8007832 <_printf_i+0x20a>
 800785a:	2500      	movs	r5, #0
 800785c:	f104 0619 	add.w	r6, r4, #25
 8007860:	e7f5      	b.n	800784e <_printf_i+0x226>
 8007862:	bf00      	nop
 8007864:	080082b9 	.word	0x080082b9
 8007868:	080082ca 	.word	0x080082ca

0800786c <memmove>:
 800786c:	4288      	cmp	r0, r1
 800786e:	b510      	push	{r4, lr}
 8007870:	eb01 0402 	add.w	r4, r1, r2
 8007874:	d902      	bls.n	800787c <memmove+0x10>
 8007876:	4284      	cmp	r4, r0
 8007878:	4623      	mov	r3, r4
 800787a:	d807      	bhi.n	800788c <memmove+0x20>
 800787c:	1e43      	subs	r3, r0, #1
 800787e:	42a1      	cmp	r1, r4
 8007880:	d008      	beq.n	8007894 <memmove+0x28>
 8007882:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007886:	f803 2f01 	strb.w	r2, [r3, #1]!
 800788a:	e7f8      	b.n	800787e <memmove+0x12>
 800788c:	4402      	add	r2, r0
 800788e:	4601      	mov	r1, r0
 8007890:	428a      	cmp	r2, r1
 8007892:	d100      	bne.n	8007896 <memmove+0x2a>
 8007894:	bd10      	pop	{r4, pc}
 8007896:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800789a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800789e:	e7f7      	b.n	8007890 <memmove+0x24>

080078a0 <_sbrk_r>:
 80078a0:	b538      	push	{r3, r4, r5, lr}
 80078a2:	4d06      	ldr	r5, [pc, #24]	; (80078bc <_sbrk_r+0x1c>)
 80078a4:	2300      	movs	r3, #0
 80078a6:	4604      	mov	r4, r0
 80078a8:	4608      	mov	r0, r1
 80078aa:	602b      	str	r3, [r5, #0]
 80078ac:	f7fa fbf2 	bl	8002094 <_sbrk>
 80078b0:	1c43      	adds	r3, r0, #1
 80078b2:	d102      	bne.n	80078ba <_sbrk_r+0x1a>
 80078b4:	682b      	ldr	r3, [r5, #0]
 80078b6:	b103      	cbz	r3, 80078ba <_sbrk_r+0x1a>
 80078b8:	6023      	str	r3, [r4, #0]
 80078ba:	bd38      	pop	{r3, r4, r5, pc}
 80078bc:	20000df8 	.word	0x20000df8

080078c0 <memcpy>:
 80078c0:	440a      	add	r2, r1
 80078c2:	4291      	cmp	r1, r2
 80078c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80078c8:	d100      	bne.n	80078cc <memcpy+0xc>
 80078ca:	4770      	bx	lr
 80078cc:	b510      	push	{r4, lr}
 80078ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078d6:	4291      	cmp	r1, r2
 80078d8:	d1f9      	bne.n	80078ce <memcpy+0xe>
 80078da:	bd10      	pop	{r4, pc}

080078dc <_realloc_r>:
 80078dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078e0:	4680      	mov	r8, r0
 80078e2:	4614      	mov	r4, r2
 80078e4:	460e      	mov	r6, r1
 80078e6:	b921      	cbnz	r1, 80078f2 <_realloc_r+0x16>
 80078e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078ec:	4611      	mov	r1, r2
 80078ee:	f7ff bc49 	b.w	8007184 <_malloc_r>
 80078f2:	b92a      	cbnz	r2, 8007900 <_realloc_r+0x24>
 80078f4:	f7ff fbda 	bl	80070ac <_free_r>
 80078f8:	4625      	mov	r5, r4
 80078fa:	4628      	mov	r0, r5
 80078fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007900:	f000 f81b 	bl	800793a <_malloc_usable_size_r>
 8007904:	4284      	cmp	r4, r0
 8007906:	4607      	mov	r7, r0
 8007908:	d802      	bhi.n	8007910 <_realloc_r+0x34>
 800790a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800790e:	d812      	bhi.n	8007936 <_realloc_r+0x5a>
 8007910:	4621      	mov	r1, r4
 8007912:	4640      	mov	r0, r8
 8007914:	f7ff fc36 	bl	8007184 <_malloc_r>
 8007918:	4605      	mov	r5, r0
 800791a:	2800      	cmp	r0, #0
 800791c:	d0ed      	beq.n	80078fa <_realloc_r+0x1e>
 800791e:	42bc      	cmp	r4, r7
 8007920:	4622      	mov	r2, r4
 8007922:	4631      	mov	r1, r6
 8007924:	bf28      	it	cs
 8007926:	463a      	movcs	r2, r7
 8007928:	f7ff ffca 	bl	80078c0 <memcpy>
 800792c:	4631      	mov	r1, r6
 800792e:	4640      	mov	r0, r8
 8007930:	f7ff fbbc 	bl	80070ac <_free_r>
 8007934:	e7e1      	b.n	80078fa <_realloc_r+0x1e>
 8007936:	4635      	mov	r5, r6
 8007938:	e7df      	b.n	80078fa <_realloc_r+0x1e>

0800793a <_malloc_usable_size_r>:
 800793a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800793e:	1f18      	subs	r0, r3, #4
 8007940:	2b00      	cmp	r3, #0
 8007942:	bfbc      	itt	lt
 8007944:	580b      	ldrlt	r3, [r1, r0]
 8007946:	18c0      	addlt	r0, r0, r3
 8007948:	4770      	bx	lr
	...

0800794c <_init>:
 800794c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800794e:	bf00      	nop
 8007950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007952:	bc08      	pop	{r3}
 8007954:	469e      	mov	lr, r3
 8007956:	4770      	bx	lr

08007958 <_fini>:
 8007958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800795a:	bf00      	nop
 800795c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800795e:	bc08      	pop	{r3}
 8007960:	469e      	mov	lr, r3
 8007962:	4770      	bx	lr
